#+TITLE:     Nyxt Config
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes


#+begin_src emacs-lisp
(setq-local nyxt-config (expand-file-name "~/.config/nyxt")
            nyxt-pkg (expand-file-name "~/.local/share/nyxt/extensions"))
#+end_src

* Docs

** Lisp

+ [[https://www.sbcl.org/manual/index.html][SBLC Manual]]
+ [[https://www.sbcl.org/manual/asdf.html#Top][ASDF Manual]]

* Resources

+ [[https://github.com/shaunsingh/nix-darwin-dotfiles/blob/9a434ffd912b781d01bc92abd6317c0fcfaa6cdb/configs/nyxt/commands.lisp][shaunsingh/nix-darwin-dotfiles]]
+ [[github:aartaka/nyxt-config][aartaka/nyxt-config]]

* Setup

** ASDF

My configs need a few packages. I'd like to source the code locally instead of
installing packages. I'm not sure of options for managing Nyxt packages.

See [[https://github.com/atlas-engineer/nyxt/blob/630287ca5ac6bb05719ba899f0270f33b7b58294/documents/README.org#branch-management][nyxt.asd]] for example of an =asdf= system declaration.

** Dependencies
*** nx-tailor

** REPL

Seriously, probably try the REPL-features earlier rather than later...

+ Nyxt's autodocumenting features are fantastic, but the REPL will just make it
  way easier to learn.
+ A common-lisp setup in emacs with no more than the =sly= packages should hook
  into your completion nicely.
+ Symbols complete with no LSP server/process required, since code is data is
  code is data ... then reflection is easy.
+ Jumping to source while connected to the =slynk= REPL just works, using
  =xref=.

***** TODO revisit the following later after more time (not my first rodeo)

#+begin_quote
I have consult, xref, eldoc, vertico, etc. set up, but it should work with
minimal tweaks in other completion systems. If you haven't set up ivy, company,
helm, consult, etc... then that may pose some challenges.

Otherwise, it just all falls into place.

NO LSP REQUIRED. No half-patched template typescript projects that import junk
from =npm= while requiring platform/project specific configuration. Your runtime
already runs your code, so those configurations should remain where code runs.

Formatters are also an entire class of problems that you generally avoid.

Can also easily connect to REPL on the network (though jumping to source there
may requires the same path-mapping shenanigans as LSP)
#+end_quote

*** SLY

Mainly follow the [[https://github.com/atlas-engineer/nyxt/blob/master/documents/README.org#L77][dev guide]].

#+begin_quote
Note to Self (from 2012-2014): Slime has be outmoded by Sly
#+end_quote

+ start-slynk :: run from nyxt, check for =port= using =list-messages=
+ sly-connect :: run from emacs

**** TODO Required? =(asdf:load-system :slynk)=

Also, note =(reset-asdf-registries)= does seem to be required, unless you don't
hook into nyxt's package loading. (e.g. quicklisp, which i'm not sure is
recommended; or other methods)

**** TODO how to send desktop notifications on REPL start, etc?


* Notes

I'm not sure how to set up a completely separate profile to isolate the
programmability from long-term browsing sessions.

** Common Lisp

*** Classes & Slots

These are eqivalent, but naively reevaluating does't affect the browser.

#+begin_src common-lisp
(define-configuration browser
  ;; it doesn't run anything that overwrites the defaults...
  ;; other settings are taking effect either.
  ((external-editor-program (list "alacritty --command vim"))))
#+end_src

Use =(slot-value ...)=

#+begin_src common-lisp
(defmethod customize-instance ((browser browser) &key)
  ;; old theme code: just set dark mode
  ;; (setf (slot-value browser 'theme) theme:+dark-theme+)

  ;; Alter the instance of the browser's theme slot
  (setf (slot-value browser 'external-editor-program)
        ;; '("gmacsclient" "-c")
        '("alacritty --command vim")))
#+end_src

***** TODO learn more...

#+begin_src common-lisp
(with-slots ((a obj1-slot-a) ... ) obj1 ... )
#+end_src


*** Combinating

"Method Combination" ... hmm close

#+begin_quote
_method_ *n.* an object that is part of a generic function and which provides
information about how that generic function should behave when its arguments are
objects of certain classes or with certain identities.

_method combination_ *n.* 1. generally, the composition of a set of methods to
produce an effective method for a generic function. 2. an object of type
method-combination, which represents the details of how the method
combination[1] for one or more specific generic functions is to be performed.
#+end_quote

** Source

*** libraries/analysis

+ The CL code in [[https://github.com/atlas-engineer/nyxt/blob/630287ca5ac6bb05719ba899f0270f33b7b58294/libraries/analysis/README.org?plain=1#L5][libraries/analysis/*.lisp]] implements a tokenizer for processing
  natural language (probably within nyxt's output itself).

|-------------------------+----------------------------------------------------|
| file                    | class                                              |
|-------------------------+----------------------------------------------------|
| text-rank.lisp          | (defclass document-vertex (document) ... )         |
| analysis.lisp           | (defclass document () ... )                        |
| analysis.lisp           | (defclass document-collection () ... )             |
| composite-sequence.lisp | (defclass sequence-model (node) ... )              |
| composite-sequence.lisp | (defclass node () ... )                            |
| composite-sequence.lisp | (defclass element-node (node) ... )                |
| data.lisp               | (defclass language-data () ... )                   |
| dbscan.lisp             | (defclass document-cluster (document-vertex) ... ) |
|-------------------------+----------------------------------------------------|

Some detail is omitted from the tables.

** Automation

*** Notifications

Is there an interface for this?

+ The [[https://github.com/atlas-engineer/nyxt/blob/630287ca5ac6bb05719ba899f0270f33b7b58294/libraries/password-manager/password-keepassxc.lisp#L7][password:keepassxc-interface]] class shows how to interface with CLI

** Packages

I tried some of these, but can't quite get =asdf= working

*** [[https://git.migalmoreno.com/nx-tailor][migalmoreno/nx-tailor]]

See [[https://git.migalmoreno.com/nx-tailor/tree/README.md][README.md]]

#+begin_src sh :dir (identity nyxt-pkg)
git clone https://git.migalmoreno.com/nx-tailor
#+end_src

Just trying out the examples for now

#+begin_src common-lisp :tangle (expand-file-name "tailor.lisp" nyxt-config)
(define-configuration tailor:tailor-mode
  ((tailor:auto-p :time)
   (tailor:light-theme-threshold (* 8 60 60))
   (tailor:dark-theme-threshold (* 21.5 60 60))
   (tailor:main '(modus-operandi . modus-vivendi))
   (tailor:themes
    (list
     (make-instance 'tailor:user-theme
                    :name 'modus-operandi
                    :background-color "white"
                    :on-background-color "black"
                    :primary-color "#093060"
                    :secondary-color "#dfdfdf"
                    :on-secondary-color "#f0f0f0"
                    :accent-color "#8f0075"
                    :on-accent-color "#005a5f"
                    :font-family "Iosevka")
     (make-instance 'tailor:user-theme
                    :name 'modus-vivendi
                    :dark-p t
                    :background-color "black"
                    :on-background-color "white"
                    :primary-color "#c6eaff"
                    :secondary-color "#323232"
                    :on-secondary-color "#a8a8a8"
                    :accent-color "#afafef"
                    :on-accent-color "#a8a8a8"
                    :font-family "Iosevka")))))
#+end_src

Some other code is needed in =config.lisp= in order to add =tailor-mode= to
=web-buffers=. Once =tailor-mode= is active in a buffer, run =M-x load-theme=.

#+begin_src common-lisp
(define-configuration web-buffer
 ((default-modes `(tailor:tailor-mode ,@%slot-default%))))
#+end_src


* Tasks

** nyxt

*** TODO checkout Nyxt packages
+ [ ] [[https://github.com/aartaka/nx-search-engines][aartaka/nx-search-engines]] (contains completion for many [[https://github.com/aartaka/nx-search-engines/blob/master/search-engines.lisp][search engines]])
+ [ ] [[https://github.com/aartaka/nx-kaomoji][aartaka/nx-kaomoji]]

*** Try emitting graphviz from Nyxt using [[https://github.com/michaelw/cl-dot/blob/master/package.lisp][cl-dot]]

*** TODO review [[https://github.com/migalmoreno/nx-tailor][migalmoreno/nx-tailor]] source


*** TODO Configure & Try features

Maybe purchase the [[https://nyxt.atlas.engineer/extension/invader.org][invader theme]]

** Automation

+ scripting nyxt :: run with --headless, --no-socket and etc
+ extracting content :: using lisp or javascript
+ nyxt/mode/password:password-mode :: look into keypassxc/yubikey and gpg
+ Process Mode :: watch files/directories, run commands

*** Desktop/Customization

Auto rules is a good way to enforce policy for browsing specific apps. If
applied alongside custom wrapper scripts or Desktop files, then SSB's can be
supported

+ Auto Rules :: match-(domain|host|url|regex|scheme)
+ format-status-(tabs|modes) ::
