#+TITLE:     Nyxt Config
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes

referencing [[github:aartaka/nyxt-config][aartaka/nyxt-config]] and others

#+begin_src emacs-lisp
(setq-local nyxt-config (expand-file-name "~/.config/nyxt")
            nyxt-pkg (expand-file-name "~/.local/share/nyxt/extensions"))
#+end_src

* Tasks
** TODO checkout Nyxt packages
+ [ ] [[https://github.com/aartaka/nx-search-engines][aartaka/nx-search-engines]] (contains completion for many [[https://github.com/aartaka/nx-search-engines/blob/master/search-engines.lisp][search engines]])
+ [ ] [[https://github.com/aartaka/nx-kaomoji][aartaka/nx-kaomoji]]

** TODO review [[https://github.com/migalmoreno/nx-tailor][migalmoreno/nx-tailor]] source


** TODO Configure & Try features

Maybe purchase the [[https://nyxt.atlas.engineer/extension/invader.org][invader theme]]

*** Automation

+ scripting nyxt :: run with --headless, --no-socket and etc
+ extracting content :: using lisp or javascript
+ nyxt/mode/password:password-mode :: look into keypassxc/yubikey and gpg
+ Process Mode :: watch files/directories, run commands


*** Desktop/Customization

Auto rules is a good way to enforce policy for browsing specific apps. If
applied alongside custom wrapper scripts or Desktop files, then SSB's can be
supported

+ Auto Rules :: match-(domain|host|url|regex|scheme)
+ format-status-(tabs|modes) ::



* Setup

** Installing Packages

My configs need a few packages. I'd like to source the code locally instead of
installing packages. I'm not sure of options for managing Nyxt packages.

#+begin_src sh :dir (identity nyxt-pkg)
git clone https://github.com/migalmoreno/nx-tailor
#+end_src

** [[https://github.com/migalmoreno/nx-tailor][migalmoreno/nx-tailor]]

Just trying out the examples for now

#+begin_src common-lisp :tangle (expand-file-name "tailor.lisp" nyxt-config)
(define-configuration tailor:tailor-mode
  ((tailor:auto-p :time)
   (tailor:light-theme-threshold (* 8 60 60))
   (tailor:dark-theme-threshold (* 21.5 60 60))
   (tailor:main '(modus-operandi . modus-vivendi))
   (tailor:themes
    (list
     (make-instance 'tailor:user-theme
                    :name 'modus-operandi
                    :background-color "white"
                    :on-background-color "black"
                    :primary-color "#093060"
                    :secondary-color "#dfdfdf"
                    :on-secondary-color "#f0f0f0"
                    :accent-color "#8f0075"
                    :on-accent-color "#005a5f"
                    :font-family "Iosevka")
     (make-instance 'tailor:user-theme
                    :name 'modus-vivendi
                    :dark-p t
                    :background-color "black"
                    :on-background-color "white"
                    :primary-color "#c6eaff"
                    :secondary-color "#323232"
                    :on-secondary-color "#a8a8a8"
                    :accent-color "#afafef"
                    :on-accent-color "#a8a8a8"
                    :font-family "Iosevka")))))
#+end_src

Some other code is needed in =config.lisp= in order to add =tailor-mode= to
=web-buffers=. Once =tailor-mode= is active in a buffer, run =M-x load-theme=.
