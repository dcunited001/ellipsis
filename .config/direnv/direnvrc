# =============================================
# Python UV
# ---------------------------------------------

# while pyenv is active, it's "activate" function trumps the path search, so
# source .venv/bin/activate is still needed.
#
#
# uv sets prompt name to $(basename $venv/) (with slash) if there's an
# argument (see below)
#
# if [ "x$dirname" != x ] ; then
#     VIRTUAL_ENV_PROMPT="() "
# else
#     VIRTUAL_ENV_PROMPT="($(basename "$VIRTUAL_ENV")) "
# fi
# export VIRTUAL_ENV_PROMPT

layout_uv() {
  local venv
  [[ $# -eq 0 ]] && venv="$(pwd)/.venv" && echo "venv $venv"
  [[ $# -eq 1 ]] && venv="$1" && shift 1
  [[ -d "$(dirname $venv)" ]] || (log_status "parent directory for $venv doesn't exist" && return 1)

  if [[ -d "$venv" ]]; then
    VIRTUAL_ENV="$venv"
  fi

  if [[ -z $venv || ! -d $venv ]]; then
    log_status "No virtual environment exists. Executing \`uv venv\` to create one."
    if [[ "$venv" -eq "$(pwd)/.venv" ]]; then
      # uv generates .venv/bin/activate script setting generic prompt name
      uv venv
    else
      uv venv $venv
    fi
    VIRTUAL_ENV="$venv"
  fi

  PATH_add "$VIRTUAL_ENV/bin"
  export UV_ACTIVE=1  # or VENV_ACTIVE=1
  export VIRTUAL_ENV
}

# =============================================
# Julia
# ---------------------------------------------

# The guix package for julia creates ./bin/julia,
# which is a wrapper for ./bin/.julia-real
use_julia_system() {
    # These auto-expand empty entries, but =JULIA_LOAD_PATH= can't be set if empty.
    export JULIA_DEPOT_PATH="$_LANG/.julia:"
    export JULIA_LOAD_PATH="$_LANG/.julia:"
    export JULIA_PATH="$_LANG/julia"
    export JULIA_VERSION="1.7.3"

    export JULIA_BIN="$JULIA_PATH/bin/julia-$JULIA_VERSION/bin/julia"
    export JULIA_LIB="$JULIA_PATH/bin/julia-$JULIA_VERSION/lib/julia"

    PATH_add "$JULIA_PATH/bin"

    alias pluto='julia --project=nb --threads=auto -e "using Pluto; Pluto.run(port=4321)"'
}


# =============================================
# Guix
# ---------------------------------------------
#
# when using guix environment in a project, the downloaded environment
# will be cached in ./.guix-profile. delete it to update the profile
#
# https://github.com/direnv/direnv/wiki/GNU-Guix
use_guix() {
  local cache_dir="$(direnv_layout_dir)/.guix-profile"
  if [[ -e "$cache_dir/etc/profile" ]]; then
    # shellcheck disable=SC1091
    source "$cache_dir/etc/profile"
  else
    mkdir -p "$(direnv_layout_dir)"
    eval "$(guix environment --root="$cache_dir" "$@" --search-paths)"
  fi
}

# NOTE: if arguments like -L need to be passed to guix shell,
#   just use this one
use_guixs() {
  LOCK_FILE=channels-lock.scm
  if [ -f $LOCK_FILE ]; then
    eval "$(guix time-machine -C $LOCK_FILE -- shell "$@" --search-paths)"
  else
    eval "$(guix shell "$@" --search-paths)"
  fi
}

use_guix_profile() {
  [[ $# -lt 1 ]] && echo "use_guix_profile requires argument" && return 1;
  local profile_path=$1
  shift 1
  [[ ! -e $profile_path ]] && echo "use_guix_profile requires extant profile path" && return 1;

  eval "$(guix shell -p "$profile_path" --search-paths)"
}

use_guix_manifest() {
  [[ $# -lt 1 ]] && echo "use_guix_manifest requires argument" && return 1;

  local manifest_file=$1
  shift 1

  [[ ! -e $manifest_file ]] && echo "use_guix_manifest requires extant manifest file" && return 1;

  eval "$(guix shell -m "$manifest_file" --search-paths)"
}

# NOTE need to install the profile with `guix environment --root`
# - then it's available to use with guix shell?
use_guixs_cached() {
  echo "$(direnv_layout_dir)"
  local cache_dir="$(direnv_layout_dir)/.guix-profile"
  if [[ -e "$cache_dir/etc/profile" ]]; then
    # shellcheck disable=SC1091
    source "$cache_dir/etc/profile"
  else
    mkdir -p "$(direnv_layout_dir)"
    eval "$(guix shell --root="$cache_dir" "$@" --search-paths)"
  fi
}
# Guix Direnv:1 ends here
