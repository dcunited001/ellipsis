#!/bin/sh

query='.'
wsQuery='"Workspace "\(.workspace.id) (\(.workspace.name))\n';
wsQuery+='On Monitor \(.monitor)\n"';
wsQuery+='(\(.size | @text)) @ (\(.at | @text))\n"';

case $1 in
    title) query='"Title: \(.title) (\(.initialTitle))"';;
    class) query='"Class: "\(.class) (\(.initialClass))"';;
    workspace,monitor) query=$wsQuery;;
    state) query='.';;
    *) query='.';;
esac

# exec {jk}>/dev/nope # ... that's a mess

# jk="$(jq "$query" </dev/fd/1)" # /dev/stdin must close or DoS
# ... and it's a subshell anyways...

# TL;DR bash scripts are best left as simple as possible:
#
# - as few commands (for deps and for piping)
# - and thus only accepting/outputting streamed text/bin ...

# ... so the caller can decide what to do with my fucking JQ template.
# notify-send "Winspect" "$jk"
#
# SMH ... dammit

# ---------------------------------------------
# exec {aa}>/dev/null
# echo foob >&"$aa"
# cat </dev/fd/$aa
# echo $aa
# exec {aa}>&-    # woops /dev/null is closed
# echo $aa

# cat </dev/fd/$aa # ... nope (didn't think so)

# t=$(mktemp)
# exec {bb}>$t
# echo $bb
# echo 'sometext' >&"$bb"
# cat </dev/fd/$bb
#
# => 'sometext'
#
# cat <{bb} # nope
# cat <&{bb} # nope

# kernel derefs repeated $t into a singular FD
