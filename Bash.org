:PROPERTIES:
:ID:       db35e2a9-9fd2-41b9-9c5f-81431fdb8860
:END:
#+title: Bash Configuration
#+description:
#+startup: content
#+property: header-args        :tangle-mode (identity #o444) :mkdirp yes
#+property: header-args:sh     :tangle-mode (identity #o555) :mkdirp yes
#+property: header-args:bash   :tangle-mode (identity #o555) :mkdirp yes
#+property: header-args:scheme :tangle-mode (identity #o644) :mkdirp yes :comments link
#+options: toc:nil

* Table Of Contents :TOC_2_gh:
  - [[#profile-hooks][Profile Hooks]]
  - [[#guix][Guix]]
  - [[#podman][Podman]]
  - [[#docker][Docker]]
- [[#hardware][Hardware]]
- [[#languages][Languages]]
  - [[#java][Java]]
  - [[#graphql][GraphQL]]
  - [[#python][Python]]
  - [[#julia][Julia]]
- [[#profile][Profile]]
  - [[#profile-1][=.profile=]]
- [[#shells][Shells]]
  - [[#rc][RC]]
- [[#environment][Environment]]
  - [[#devtools][devtools]]
  - [[#xdg][XDG]]

** Profile Hooks

**** Default Scripts

#+begin_src sh :tangle .config/sh/_load_profile.eg.sh :shebang #!/bin/sh
# This is the default _load_profile.d.sh script

__scripts=(
    "guix.sh"
    "emacs.sh"
    "java.sh"
    "julia.sh"
    "graphviz.sh"
    "flatpak.sh"
)
for __script in ${__scripts[@]}; do
    [[ -f $DOTS_PROFILE_D/$__script ]] && source $DOTS_PROFILE_D/$__script || echo "couldn't load $__script"
done
unset $__script
# unset $__scripts
#+end_src

***** RC

#+begin_src sh :tangle .config/sh/_load_rc.eg.sh :shebang #!/bin/sh
# This is the default _load_rc.d.sh script

__scripts=(
    "aliases.sh"
    "functions.sh"
    "colors.sh"
    "git-prompt.sh"
    "prompt.sh"
)
for __script in ${__scripts[@]}; do
    [[ -f $DOTS_RC_D/$__script ]] && source $DOTS_RC_D/$__script || echo "couldn't load $__script"
done
unset $__script
# unset $__scripts
#+end_src


** Guix

=GUIX_AUTOLOAD_PROFILES=(desktop i3)= should be set in the script run
by the login/display manager, but not exported.

#+begin_src sh :tangle .config/sh/profile.d/guix.sh :shebang #!/bin/sh
# TODO fix for non-guix-systems
# GUIX_PROFILE="$HOME/.guix-profile"
# . "$GUIX_PROFILE/etc/profile"

export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale

# -c cores -m jobs
export GUIX_BUILD_OPTIONS="-c$NCPU"
export GUIX_EXTRA=$HOME/.guix-extra-profiles

#+end_src

#+begin_src sh :tangle .config/sh/profile.d/guix-profiles.sh
# GUIX_AUTOLOAD_PROFILES=(desktop i3)
if [[ -z $GUIX_AUTOLOAD_PROFILES ]]; then
    GUIX_AUTOLOAD_PROFILES=(i3 desktop fonts browsers xkb pipewire \
                               mon devtools academic office cad kicad \
                               pythondev k8s)
fi

for i in ${GUIX_AUTOLOAD_PROFILES[@]}; do
  echo $i
  profile=$GUIX_EXTRA/$i/$i
  if [ -f "$profile"/etc/profile ]; then
    GUIX_PROFILE="$profile"
    . "$GUIX_PROFILE"/etc/profile
  fi
  unset $profile
done
#+end_src

*** On Arch
**** Load Guix Profiles

#+begin_src sh :tangle .config/sh/profile.d/guix-arch-support.sh :shebang #!/bin/bash
export GUIX_EXTRA=$HOME/.guix-extra-profiles

guix_arch_load() {
    local profiles=""

    while [ "$1" != "" ]; do
        case $1 in
            -*|--*=) # unsupported flags
            echo "Error: Unsupported flags $1" >&2
            return 1
            ;;
            ,*)
                profiles="$profiles $1"
                shift
                ;;
        esac
    done

    if [ -z "$profiles" ]; then
        # NOTE: this glob behaves strangely when $GUIX_EXTRA is empty
        # profiles="$GUIX_EXTRA/*";
        echo "Error: no profiles specified"
    fi

    local profilePath=""
    for p in $profiles; do
        profile=$(basename $p)
        echo $profile
        profilePath=$GUIX_EXTRA/$profile
        if [ -f "$profilePath/$profile/etc/profile" ]; then
            GUIX_PROFILE="$profilePath/$profile"
            source "$GUIX_PROFILE/etc/profile"
        fi
    done

    return 0
}

export -f guix_arch_load
#+end_src

The default is -c0, which uses as many cores as possible for each build agent,
so no need to set =-c= in $GUIX_BUILD_OPTIONS

#+begin_src sh :tangle .config/sh/profile.d/guix-arch.sh :shebang #!/bin/bash
# export GUIX_BUILD_OPTIONS="-c6"

# never again, wxPython ... never again
GUIX_AUTOLOAD_PROFILES=(academic arch-devtools nyxt k8s)
if [ -z "$GUIX_ARCH_LOADED" ]; then
    guix_arch_load ${GUIX_AUTOLOAD_PROFILES[@]}
    export GUIX_ARCH_LOADED=${GUIX_AUTOLOAD_PROFILES[@]}
fi

GUIX_PROFILE="$HOME/.config/guix/current"
source "$GUIX_PROFILE/etc/profile"
#+end_src

Add to =~/.config/sh/_load_profile.d.sh= _in this order_

+ guile-arch.sh
+ guix-arch-support.sh
+ guix-arch.sh

** Podman

Ensure that Podman stores images on the correct mount.

#+begin_example conf :tangle .config/containers/storage.conf
[storage]

driver = "overlay"
rootless_storage_path = "/storage/location"
#+end_example

Rootful images must be stored in a root-owned folder directory with correct
permissions AFAIK.

** Docker

Ensure that Docker is configured to store images on the correct mount.

#+begin_example json :tangle /etc/docker/daemon.json
{
  "data-root": "/storage/location"
}
#+end_example

The docker systemd services must have been run at least once for many of its
paths to exist.

Test with =docker pull docker.io/netbootxyz/netbootxyz=

* Hardware

#+begin_src sh :tangle .profile :shebang #!/bin/sh
export PATH=$HOME/.local/bin:$HOME/bin:$PATH
export DISTRO="$(grep -e '^ID=' /etc/os-release | sed -e 's/^ID=//g')"

# can't add functions to .bash_profile: only .bashrc
export NTHREADS="$(ncpu-threads)"
if [[ -n "$NTHREADS" ]]; then
    NCPU="$((NTHREADS / 2))"
else
    NCPU="4"
fi
export NCPU
#+end_src

* Languages

** Java

#+begin_src sh :tangle .config/sh/profile.d/java.sh :shebang #!/bin/sh
export _JAVA_AWT_WM_NONREPARENTING=1

# This sets Java Swing UI -> GTK
#export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel $_JAVA_OPTIONS"

# multiple java versions
# https://docs.doomemacs.org/v21.12/modules/lang/java/#/prerequisites/multiple-java-versions

# TODO: set differently for arch/guix
#export JAVA_HOME=/usr/local/jdk-11.0.2
#export PATH=$PATH:$JAVA_HOME/bin

export ECLIPSE_HOME=${_LANG}/.eclipse/eclipse
#+end_src

*** Eclipse

For Guix, eclipse should basically just require an OpenJDK

#+begin_src sh :tangle bin/eclipse.sh :shebang #!/bin/sh
export ECLIPSE_HOME=${_LANG}/.eclipse/eclipse

# TODO: provide JAVA_PATH/etc and exec eclipse 
#+end_src


** GraphQL

On Guix, ensure =nodejs= profile is installed.

#+begin_src :eval no
npm install -g graphql-language-service-cli
#+end_src

Graphql-language-service-cli depends on:

+ graphql-language-service
+ graphql-language-service-server

Other tools include:

+ graphiql
+ codemirror-graphql
+ graphiql

*** GraphQL Project Setup

On Guix Systems, add the =nodejs= profile to the project or ensure that it's in
=$PATH=. Most actual projects will have their own =manifest.scm= anyways. This
will be a separate node build, but its =npm install -g= binaries will still go
in =.node_modules=

#+begin_src sh
#or use_guix_manifest -m $XDG_CONFIG_HOME/guix/manifests/nodejs.scm
use_guix_profile -m $GUIX_EXTRA/nodejs/nodejs
#+end_src

***** TODO finalize on =use_guixs=
***** TODO how to designate the default graphql schema file for the above?

** Python

This should end up in =$HOME= to fix an issue where =jupyter.el= uses =$HOME=
as its default directory. This main python should have =pip= set up with the
=jupyter-lab= environment, which can load kernels can be built from other
=venvs= ... (this might conflict with other information on jupyter herein)

#+begin_src sh :tangle .python-version
3.12.1
#+end_src

*** Python on Arch

**** Pyenv

Ensure pyenv is installed with =yay -Syu pyenv= and add this to
=.config/sh/_load_profile.d.sh=. This should be loaded after all the guix
profiles, in case one contains a python.

#+begin_src sh :tangle .config/sh/profile.d/python-pyenv.sh :shebang #!/bin/sh
export PYENV_POETRY_VENV=poetry
export PYENV_ROOT="$_LANG/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
source "${PYENV_ROOT}/completions/pyenv.bash"
#+end_src

+ Install new pythons with =pyenv install 3.11.3= and see below for optimizations.
+ List versions with =pyenv install -l=
+ Switch with =pyenv (shell|local|global) $python_version=. This is currently
  not working, since I only have =eval $(pyenv init -)= sourced in =.profile=,
  which forgets the =pyenv()= function. To get the shell integration to work, it
  needs to be added to =.bashrc=.

See direnv integration below.

****** TODO evaluate whether I should add =pyenv= to both =.profile= and =.bashrc=

***** Switching

Caveat scriptor: running =pyenv local $pyversion= will create a
=$PWD/.python-version= file. Use =pyenv shell $pyversion= instead.

***** Custom Pyenv builds

See pyenv's =python-build= plugin to customize the build

+ [[https://github.com/pyenv/pyenv/tree/master/plugins/python-build#special-environment-variables][Environment vars]] for pyenv's python-build plugin.
+ The spec for [[https://github.com/pyenv/pyenv/blob/master/plugins/python-build/share/python-build/3.11.3][Python 3.11.3]] is in =./plugins/python-build/share/3.11.3/=
+ The installations will source functions in
  =./plugins/python-build/bin/python-build=, including =install_package= which
  fetches source for python.
+ It also fetches packages like =readline= or =openssl-1.1.1s= if your Mac's is
  broken. I guess OpenSSL3 is [[https://peps.python.org/pep-0644/][taking its sweet time]], but convenience comes at a
  cost -- mostly, you'll run into issues with the [[https://cryptography.io/en/latest/installation/#building-cryptography-on-macos][cryptography package]].

****** Optimizations

To build with optimizations:

#+begin_src sh
PYTHON_CONFIGURE_OPTS='--enable-optimizations --with-lto' PYTHON_CFLAGS='-march=native -mtune=native'
#+end_src

To build in parallel (doesn't seem to help)

#+begin_src sh
MAKE_OPTS="-j14" PYTHON_MAKE_OPTS="-j14"
#+end_src

Full command

#+begin_src sh :tangle bin/pynv-install-py
[[ -z "$1" ]] && echo "Requires semantic version" && exit 1;

version=$1

mjobs=$((NTHREADS - 2))

env PYTHON_CONFIGURE_OPTS='--enable-optimizations --with-lto' \
    PYTHON_CFLAGS='-march=native -mtune=native' \
    PYTHON_MAKE_OPTS="-j$mjobs" \
    MAKE_OPTS="-j$mjobs" \
    pyenv install $version 2>&1 > ~/src/log/python-build-$version.log
#+end_src

Then =pip install --upgrade pip= and set up =jupyter-lab= from within that new
python's main env.

#+begin_example sh
pip install --upgrade
pip install jupyter-lab # etc...
#+end_example

**** Poetry

Basically poetry projects (& their venv's) will need to be handled
separately. From what I understand, each python that is installed will need to
have its own =poetry= installed. The =virtualenvs.prefer-active-python= will
accomplish that, as long as poetry runs after =direnv= sets the =pyenv= and as
long as there isn't an active =venv= for that =pyenv= in the shell -- these have
a separate =pip=.

There is also [[https://github.com/tjquillan/poetry-plugin-pyenv][tjquillan/poetry-plugin-pyenv]].

***** Keyring

In KDE, unless there's a reason for pip to cache in keyring, then maybe
disable it: =`pyenv which python3` -m keyring --disable=

See [[https://stackoverflow.com/a/68760190]]

***** Poetry Config

See [[id:][configuration]] docs. The shared poetry configuration, which will use the
=poetry= shim in the python selected by =pyenv= selects. In any python project,
the version should be set by =.python-version=.

#+begin_src conf-toml :tangle .config/pypoetry/config.toml
[virtualenvs]
prefer-active-python = true
#+end_src

****** Defaults

Without any other config, once =poetry= is installed for =$pyversion=, then
=poetry config --list= should show:

#+begin_src conf
cache-dir = "$HOME/.cache/pypoetry"
experimental.new-installer = true
experimental.system-git-client = false
installer.max-workers = null
installer.modern-installation = true
installer.no-binary = null
installer.parallel = true
virtualenvs.create = true
virtualenvs.in-project = null
virtualenvs.options.always-copy = false
virtualenvs.options.no-pip = false
virtualenvs.options.no-setuptools = false
virtualenvs.options.system-site-packages = false
virtualenvs.path = "{cache-dir}/virtualenvs"  # $HOME/.cache/pypoetry/virtualenvs
virtualenvs.prefer-active-python = false
virtualenvs.prompt = "{project_name}-py{python_version}"
#+end_src

**** Python Direnv

This method is compatible with the others, so a project on one laptop with
=pyenv= and lacking the =pyenv-virtualenv= plugin will simply need to change
=.envrc=. Both should be able to use =layout python=.

*Generally*

+ Use =layout poetry= where practical/possible (... test?)
+ Use the =pyenv-virtualenv= for one-off environments or things to don't fit
  neatly into dependency specs

***** Direnv: [[https://github.com/direnv/direnv/wiki/Python#venv-stdlib-module][layout python3]]

Specify with =layout python3=, which uses venv stdlib module

This directive causes a virtualenv to be created at
=$PWD/.direnv/python-$python_version=.

#+begin_quote
Commenting out the =layout= will cause this directory to appear.
#+end_quote

***** Direnv: [[https://github.com/direnv/direnv/wiki/Python#poetry][layout pyenv]]

Requires [[github:pyenv/pyenv][pyenv/pyenv]]

Specify with =layout pyenv $python_version=

This directive still installs python packages in the virtualenv at
=$PWD/.direnv/python-$python_version=.

#+begin_quote
Commenting out the =${pyenv}= will cause this directory to appear.
#+end_quote

***** Direnv: =layout pyenv $python_version=

Requires [[github:pyenv/pyenv-virtualenv][pyenv-virtualenv]]

Specify with =layout virtualenv= and =layout activate= in a project's
=.envrc=. This template can easily be changed/managed locally for more granular
specification, but allows for some defaults

#+begin_src sh :tangle .config/direnv/eg/pyenv :tangle-mode (identity #o644)
# -*- mode: sh; -*-
[[ -f ".python-version" ]] && pyversion=$(head .python-version) || pyversion="3.10.11"
[[ -f ".python-virtualenv" ]] && pvenv=$(head .python-virtualenv) || pvenv=$(basename $PWD)

#use python ${pyversion}

# Create the virtualenv if not yet done (just depend on .python-version for this)
layout virtualenv ${pyversion} ${pvenv}
layout activate ${pvenv}-${pyversion}
#+end_src

This method requires adding the following to =.config/direnv/direnvrc=

#+begin_src sh :tangle .config/direnv/direnvrc :shebang #!/bin/sh
# use a certain pyenv version
use_python() {
    if [ -n "$(which pyenv)" ]; then
        local pyversion=$1
        pyenv local ${pyversion}
    fi
}

layout_virtualenv() {
    local pyversion=$1
    local pvenv=$2
    if [ -n "$(which pyenv virtualenv)" ]; then
        pyenv virtualenv --force --quiet ${pyversion} ${pvenv}-${pyversion}
    fi
    pyenv local --unset
}

layout_activate() {
    if [ -n "$(which pyenv)" ]; then
        source $(pyenv root)/versions/$1/bin/activate
    fi
}
#+end_src

Adding this to =.direnvrc= will cause new environments to be created in:

=$(pyenv root)/versions/$python_version/$virtualenv_name=.

These environments can be shared ... potentially leaded to some isolated
dependency/build concerns (e.g. tensorflow with/out GPU or installing a set of
dependencies not satisfied by what's already installed). It doesn't share
installation roots.

However, since =direnv= use of functions named =use_.*= is special, I'm not
quite sure how well these methods mix.

***** Direnv: [[https://github.com/direnv/direnv/wiki/Python#poetry][layout poetry]]

Requires [[github:python-poetry/poetry][python-poetry/poetry]] to be [[https://python-poetry.org/docs/#installing-with-the-official-installer][installed]]. This method is helpful when
working on a python lib, since it isolates the installation into =.venv=.

#+begin_src sh :tangle .config/direnv/eg/poetry :tangle-mode (identity #o644)
layout poetry

local venvname=$(echo "$VIRTUAL_ENV" | rev | cut -d'/' -f2- | rev)
PS_INFO="${PS_INFO} <${GREEN}$(pyenv version-name) ${WHITE}poetry: ${YELLOW}${venvname}${WHITE}> ::${RESTORE}"

# TODO setting the prompt doesn't quite work
export PS1="${PS_INFO}\n${PS_PROMPT}"
#+end_src

Just use the =.venv= environment. There should not be a =.python-virtualenv=
file. The =poetry.toml= may look something like:

#+begin_example conf-toml
[virtualenvs]
#create = false
in-project = true
#+end_example

Specify with =layout poetry=

#+begin_src sh :tangle .config/direnv/direnvrc :shebang #!/bin/sh
# TODO: either use_poetry() or....
# ensure pyenv version

layout_poetry() {
    PYPROJECT_TOML="${PYPROJECT_TOML:-pyproject.toml}"
    if [[ ! -f "$PYPROJECT_TOML" ]]; then
        log_status "No pyproject.toml found. Executing \`poetry init\` to create a \`$PYPROJECT_TOML\` first."
        poetry init
    fi

    if [[ -d ".venv" ]]; then
        log_status "Setting VIRTUAL_ENV=\$(pwd)/.venv"
        VIRTUAL_ENV="$(pwd)/.venv"
    else
        log_status "Setting VIRTUAL_ENV=\$(poetry env info --path 2)/.venv"
        VIRTUAL_ENV=$(poetry env info --path 2>/dev/null ; true)
    fi

    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
        log_status "No virtual environment exists. Executing \`poetry install\` to create one."
        poetry install
        VIRTUAL_ENV=$(poetry env info --path)
    fi

    PATH_add "$VIRTUAL_ENV/bin"
    export POETRY_ACTIVE=1
    export VIRTUAL_ENV
}

#layout_vpoetry() {
#    echo foo
#}
#+end_src

*Compatibility with pyenv:* Poetry will use the python it encounters first in
your path if =virtualenvs.prefer-active-python= is set, so it should use the one
that =pyenv= hands it via its shims.

+ It will install this virtualenv into =${cache-dir}= which is
  =$HOME/.cache/pypoetry/virtualenvs=
+ See [[https://python-poetry.org/docs/configuration#configuration][Configuration]] and [[https://python-poetry.org/docs/managing-environments/][Managing Environments]].

***** TODO direnv show branch name

This won't work since the =.envrc= is only evaluated once (which is what I'd
prefer vs. a highly dynamic shell)

#+begin_src sh
if [ -d ".git" ]; then
    local gbranch="$(git branch --show-current)"
    local ghash="$(git log -n1 --pretty=%H)"

    PS_INFO="${PS_INFO} ::"
fi
#+end_src


*** Python on Guix

I'm just going to use the Guix python packages and setup pip to support
virtualenvs.

#+begin_src scheme :tangle .config/guix/manifests/pythondev.scm
(specifications->manifest
 '(
   "python"
   "python-pip"

   "docker-compose"
   ))
#+end_src

The description of Direnv's =layout python= directive is a bit confusing. I
didn't understand that I could simply set the virtualenv with the following:

#+begin_example shell
export VIRTUALENV=~/.my-persistent-venvs/jupyter-with-tensorflow-venv
layout python
#+end_example

**** Just going to use docker when I need to

** Julia

Julia [[https://docs.julialang.org/en/v1/manual/environment-variables/][Environment Variables]]

#+begin_src sh :tangle .config/sh/profile.d/julia.sh :shebang #!/bin/sh
export JULIA_SHELL=/bin/sh
export JULIA_EDITOR='emacsclient -nw'

export JULIA_DEPOT_PATH="$_LANG/.julia:"
export JULIA_LOAD_PATH="$_LANG/.julia:"
#+end_src

This configuration is intended to be used on archlinux.

#+begin_src sh :tangle .config/direnv/direnvrc :shebang #!/bin/sh



# The guix package for julia creates ./bin/julia,
# which is a wrapper for ./bin/.julia-real
use_julia_system() {
    export JULIA_SHELL=/bin/sh
    export JULIA_EDITOR="$EDITOR"

    # These auto-expand empty entries, but =JULIA_LOAD_PATH= can't be set if empty.
    export JULIA_DEPOT_PATH="$_LANG/.julia:"
    export JULIA_LOAD_PATH="$_LANG/.julia:"
    export JULIA_PATH="$_LANG/julia"
    export JULIA_VERSION="1.7.3"

    export JULIA_BIN="$JULIA_PATH/bin/julia-$JULIA_VERSION/bin/julia"
    export JULIA_LIB="$JULIA_PATH/bin/julia-$JULIA_VERSION/lib/julia"

    PATH_add "$JULIA_PATH/bin"

    alias pluto='julia --project=nb --threads=auto -e "using Pluto; Pluto.run(port=4321)"'
}
#+end_src

* Profile
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** =.profile=

If =.bash_profile= does not exist, =.profile= will be sourced instead. When bash
is invoked as =sh=, then it will source =.profile= anyways.

*** Before Profile.d

#+begin_src sh :tangle .profile :shebang #!/bin/sh
export DOTS_CFG_SHELL=$XDG_CONFIG_HOME/sh
export DOTS_PROFILE_D=$DOTS_CFG_SHELL/profile.d

# Profile
[[ -f $DOTS_CFG_SHELL/_load_profile.d.sh ]] && source $DOTS_CFG_SHELL/_load_profile.d.sh
#+end_src

* Shells
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** RC


#+begin_src sh :tangle .config/sh/rc.d/aliases.sh :shebang #!/bin/sh
#* alias @ALIAS

#** color @ALIAS

if [ "$TERM" != "dumb" ]; then
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias egrep='egrep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias diff='diff --color=auto'
    alias grep='grep --color=auto'
    alias vdir='vdir --color=auto'
    alias screen='screen -h 2000'
fi

#* docs @ALIAS
alias imacs='emacs -f info-standalone --eval="(load-theme (intern \"wombat\"))"'
manhtml() {
    [[ -z "$1" ]] && echo "Requires man page name" && return 1
    man -Thtml "$1" \
        | sed -e 's/margin-top: 1em//g' \
        | sed -E 's/(<br>|<hr>)//g' \
        | sed -E 's/<a href="#.*>//g'
}

#* ps @ALIAS

# pgrep -u $UID
pskill() {
    [[ -z "$1" ]] && echo "Requires command name" && return 1
    pkill -u $UID -x "$1"
}
alias psid='ps -opid,uid,command h'
# h sorts
alias pspri='ps -eo pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm k pri'
alias ps_pri='ps -eo pri k +pri h | uniq -c'

# emacs stays at -4: https://github.com/Nefelim4ag/Ananicy
alias ps_nice='ps axo pid,comm,nice,cls --sort=-nice'
alias psnice='ps -o pid,comm,nice' # $pid

alias ptrgb="pstree -C age -pT"

#* renice @alias
# alias renoice="renice --priority 15 $(pgrep emacs-29)"

#* shell @ALIAS

#** redirect @ALIAS
alias wordcat="tee >(xargs -n1 cat) | wc -w"

#** curl @ALIAS

# use with parameter expansion: echo -e https://fdsa.com/path/to/{0,1,2,3,4,5}.jpg | curlist -o

# curl --remote-name-all --output-dir /data/xdg/Documents/cheatsheets/lisp/folding/ -K <( ... )
# <(echo -e https://page.com/path/to/{4,5,6,7,8,9,10,11}.jpg | sed -e 's/ /\n/g' | sed -E 's/^(.*)$/url="\1"/g')

#* data
alias tyxy="tidy --quiet yes --tidy-mark no --vertical-space yes -indent -xml"

#** jqyq @ALIAS

#** grep @ALIAS
alias grepnobin="grep -I"

#* system @ALIAS

#** updates @ALIAS
alias grubup="sudo update-grub"
alias upd='/usr/bin/update'

#* hardware @ALIAS
alias hw='hwinfo --short'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
alias psmem='ps auxf | sort -nr -k 4'

#** disk @ALIAS
alias iotopa='iotop -oa'
# atop

#* archive @ALIAS
alias tarnow='tar -acf '
alias untar='tar -zxvf '
alias wget='wget -c '

#* services @ALIAS
#** systemd @ALIAS
alias jctl="journalctl -p 3 -xb"
alias jctlu="journalctl --user -u"
alias sysu='systemctl --user'
# also: systemd-search-shared
alias sysupath='systemd-path user-shared'
alias sysdpath='systemd-path system-shared'
# sysu cat doom
# sysu show -p Type $doom
# sysu show -vp Type $doom # only values
# alias sysed='systemctl --user edit --drop-in=$overridename $svc'

#* pkg
#** guix @ALIAS
alias guix_all_profiles='find /gnu/store -maxdepth 1 -type d -name "*profile" -exec ls -al \{\} +'
alias guix_main="$HOME/.config/guix/current/bin/guix"

#** pacman @ALIAS
alias fixpacman="sudo rm /var/lib/pacman/db.lck"
alias rmpkg="sudo pacman -Rdd"
alias cleanup='sudo pacman -Rns `pacman -Qtdq`'
alias rip="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -200 | nl"

#* shelltools @ALIAS
alias pathtr="tr ':' '\n'"
alias shitbin='echo -e "\033c"'

#* crypto @ALIAS

#** ssh @ALIAS

alias sshddump='sudo sshd -T'
#alias sship='ssh -i $

#* gpg @ALIAS
alias gpga='gpg --armor'
alias gpguptty='gpg-connect-agent updatestartuptty /bye'
alias gpgrel='gpg-connect-agent reloadagent /bye'
alias gpgk='gpg-connect-agent killagent /bye'

#* git @ALIAS

# passes NUL byte to xargs, needs to be function
# alias gitls_bydate='git ls-tree -r --name-only HEAD -z | TZ=UTC xargs -0n1 -I_ git --no-pager log -1 --date=iso-local --format="%ad _" -- _ | sort'

#** git-stack @ALIAS
alias gkg='git stack'
alias gksy='git stack sync'
alias gkcfg='git stack --dump-config -'

# TODO: ascii git tree
# git log --graph --pretty=format:'%Cred%h%Creset%n %d' --abbrev-commit --decorate -n32 --all HEAD~

# Advanced command-not-found hook
# source /usr/share/doc/find-the-command/ftc.bash

#* git-stack @ALIAS
alias emacs-debug-wayland='WAYLAND_DEBUG=1 emacs --fg-daemon > $HOME/.cache/log/emacs.wayland.`date +%Y-%m%d-%H%M`.log 2>&1'

alias nodenpm_lsparse="npm ls -g --parseable | grep node_modules | sed -e 's/.*node_modules\///g'"
#+end_src

*** Shell Prompt

Update PS1 according to [[https://github.com/direnv/direnv/wiki/PS1][direnv wiki]]

To check capabilities, see =man terminfo= and =infocmp=

#+begin_src sh :tangle .config/sh/rc.d/prompt.sh :shebang #!/bin/sh
export PS_INFO=""
export PS_PROMPT=""

PS_GIT=""
GIT_PS1_SHOWCOLORHINTS=1
GIT_PS1_DESCRIBE_STYLE=branch
GIT_PS1_SHOWUPSTREAM=name

PS_PROMPT="${LYELLOW}\A ${LGREEN}\u${RED}@${LCYAN}\h ${RED}:: ${YELLOW}\w"
if [ -n "$GUIX_ENVIRONMENT" ]; then
    PS_INFO="${LMAGENTA}g${RESTORE}"
fi

if [ "$TERM" = "dumb" ]; then
    PS1='$ '
else
    PS_GIT='$(__git_ps1 "«%s»") '
    PS_INFO="$PS_GIT $PS_INFO"
    PS1="$PS_INFO \n$PS_PROMPT"

    # calc number of cols with $((COLUMNS -n ))
    if [ -n "$PS_GIT" ]; then
       PS1="$PS1"
    fi
    PS1="$PS1${RED}$ ${RESTORE}"
fi

#+end_src

**** Ok, nevermind then

TFW trying to avoid side effects in function (... but then realizing you in bash)

#+begin_src sh :tangle .config/sh/prompt.sh :shebang #!/bin/sh

ps_update() {
    # $1: PS_PROMPT $2: PS_INFO (optional)
    if [ "$TERM" = "dumb" ]; then
        # || [ $# -ge 1 ]
        # || [ -z "${RESTORE}" ] # well that's unfortunate
        return # fail silently
    fi

    if [ -z "$PS_PROMPT" ]; then
       PS_PROMPT="<=> ${RESTORE}"
    fi

    local ps_new="$PS_PROMPT"
    if [ -n "$PS_INFO" ]; then
        psnew="$PS_INFO\n$psnew$"
    fi
    psnew="$psnew ${RED}$ ${RESTORE}"
    echo $psnew

    # using in .envrc makes and it becomes specific to my system.
}

# PS1="$(ps_update \"$PS_INFO\")"
# TERM=dumb
#+end_src

To use in direnv (untested....)

#+begin_example sh
PS_INFO="${PS_INFO}${LGREEN}[ foo ]${RESTORE} "
[[ -n "$(declare -F ps_update)" ]] && psnew="$(ps_update $PS_INFO)"
#+end_example

Reload =direnvrc= with =direnv reload=

**** Guix Direnv

Add =use guixs= to direnv capabilities in =.envrc=. Thanks [[https://sr.ht/~abcdw/rde/][abcdw/RDE]].

#+begin_src sh :tangle .config/direnv/direnvrc :shebang #!/bin/sh
# when using guix environment in a project, the downloaded environment
# will be cached in ./.guix-profile. delete it to update the profile
#
# https://github.com/direnv/direnv/wiki/GNU-Guix
use_guix() {
  local cache_dir="$(direnv_layout_dir)/.guix-profile"
  if [[ -e "$cache_dir/etc/profile" ]]; then
    # shellcheck disable=SC1091
    source "$cache_dir/etc/profile"
  else
    mkdir -p "$(direnv_layout_dir)"
    eval "$(guix environment --root="$cache_dir" "$@" --search-paths)"
  fi
}

# NOTE: if arguments like -L need to be passed to guix shell,
#   just use this one
use_guixs() {
  eval "$(guix shell "$@" --search-paths)"
}

use_guix_profile() {
  [[ $# -lt 1 ]] && echo "use_guix_profile requires argument" && return 1;
  local profile_path=$1
  shift 1
  [[ ! -e $profile_path ]] && echo "use_guix_profile requires extant profile path" && return 1;

  eval "$(guix shell -p "$profile_path" --search-paths)"
}

use_guix_manifest() {
  [[ $# -lt 1 ]] && echo "use_guix_manifest requires argument" && return 1;

  local manifest_file=$1
  shift 1

  [[ ! -e $manifest_file ]] && echo "use_guix_manifest requires extant manifest file" && return 1;

  eval "$(guix shell -m "$manifest_file" --search-paths)"
}

# NOTE need to install the profile with `guix environment --root`
# - then it's available to use with guix shell?
use_guixs_cached() {
  echo "$(direnv_layout_dir)"
  local cache_dir="$(direnv_layout_dir)/.guix-profile"
  if [[ -e "$cache_dir/etc/profile" ]]; then
    # shellcheck disable=SC1091
    source "$cache_dir/etc/profile"
  else
    mkdir -p "$(direnv_layout_dir)"
    eval "$(guix shell --root="$cache_dir" "$@" --search-paths)"
  fi
}
#+end_src

* Environment

** devtools

#+begin_src scheme :tangle ".config/guix/manifests/devtools.scm"
(specifications->manifest
;;** git
 '("git"
  "git-lfs"
  "git-repo"
  "git-stack-bin"

;;** fetch
  "curl"

  ;; for emacs pdf-tools
  ;; "cairo"
  ;; "libpng"
  ;; "poppler"

;;** for pyenv builds

;; I thought some of these were already brought in
  "zlib"
  "libffi"
  "xz"
  "expat"
  "libxml2"
  "bzip2"
  "gdbm"

;; I want to learn TCL anyways, but maybe this should be in
;; another profile
  "tk"
  "ncurses"

;;  "poetry"

;;** pkg metadata
  "pkg-config"

;;** build essential
  "gettext"
  "autoconf"
  "automake"
  "glibc"
  "gcc-toolchain"
  "cmake"
  "make"
  "perl"

;;** lib
  "libtool"

;;** tty
  "libvterm"
  "screen"

;;** crypt/hash
  "libxcrypt"

;;** environment
  "direnv"
  "stow"

;;** log
  "rsyslog"

;;** search
  "fd"
  "ripgrep"
  "the-silver-searcher"

;;** media
  ;; TODO consider moving to a media profile
  "ffmpeg"

;;** compute
  ;; TODO move openblas to a data science profile?
  "openblas"
  "lapack"

;;** data
  "jq"
  "python-yq"
  "sqlite"

;;** file
  "tree"
  "file"
  "perl-image-exiftool"
  "lsof"
  "lsofgraph"

;;** disk
  "btrfs-progs"

;;** data vis
  "plantuml"
  "graphviz"
  "d2-bin"

;;** ssh
  "openssh"
  "openssl"
  "rsync"

;;** pass
  "password-store"
  "age"
  "pass-age"
  "age-plugin-yubikey-bin"
  "sops"

;;** compression
  "zip"
  "unzip"
  "p7zip"

  ;; MIME problems when building. TLDR: i should've migrated to guix home earlier
  ;;
  ;; E   AssertionError: 'application/gzip' != 'application/x-tar'
  ;; E   - application/gzip
  ;; E   + application/x-tar
  ;; E    : MIME type for archive `t.tar.gz.foo' should be application/x-tar, but
  ;; "patool"

;;** vm

  ;; should fix a gdx-pixbuf issue for virt-manager
  "gdk-pixbuf"
  "virt-manager"

;;** node
  "node"

;;** network
  "bind:utils"

;;** octave
  "octave"
  ))
#+end_src

** XDG

I can't really imagine a desktop/terminal context where I wouldn't want XDG
utils in the environment, but this is split out anyways...

+ compton :: an alternative compositor for X
  - incompatible in Wayland, since it doesn't offer modular compositors
+ redshift :: control color temperature according to surroundings.
  - requires =libxcb= X11 client lib
  - for wayland: =gammastep= or =wlsunset=
+ gucharmap :: unicode character map (GTK)
+ fontmanager :: provides GTK tools to aid configuration of fonts
+ brightnessctl :: lightweight brightness control tool
