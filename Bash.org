:PROPERTIES:
:ID:       db35e2a9-9fd2-41b9-9c5f-81431fdb8860
:END:
#+title: Bash Configuration
#+description:
#+startup: content
#+property: header-args        :tangle-mode (identity #o444) :mkdirp yes
#+property: header-args:sh     :tangle-mode (identity #o555) :mkdirp yes
#+property: header-args:bash   :tangle-mode (identity #o555) :mkdirp yes
#+property: header-args:scheme :tangle-mode (identity #o644) :mkdirp yes :comments link
#+options: toc:nil

* Table Of Contents :TOC_2_gh:
- [[#environment][Environment]]
  - [[#org-variables][Org Variables]]
  - [[#xdg-shim][XDG Shim]]
  - [[#xdg-user-dirs][XDG User Dirs]]
  - [[#profile-hooks][Profile Hooks]]
  - [[#rc-hooks][RC Hooks]]
  - [[#apps][Apps]]
  - [[#xdg][XDG]]
  - [[#arch][Arch]]
  - [[#flatpak][Flatpak]]
  - [[#steam--proton][Steam & Proton]]
  - [[#guix][Guix]]
  - [[#fcitx5][FCITX5]]
  - [[#gtk][GTK]]
  - [[#qt][QT]]
  - [[#emacs][Emacs]]
- [[#languages][Languages]]
  - [[#java][Java]]
  - [[#node][Node]]
  - [[#graphviz][Graphviz]]
  - [[#python][Python]]
  - [[#julia][Julia]]
  - [[#matlab][Matlab]]
- [[#profile][Profile]]
  - [[#profile-1][=.profile=]]
- [[#alacritty][Alacritty]]
- [[#tools][Tools]]
  - [[#screen][Screen]]
- [[#shells][Shells]]
  - [[#rc][RC]]
  - [[#bash][Bash]]
  - [[#zsh][Zsh]]
- [[#environment-1][Environment]]
  - [[#main][main]]
  - [[#devtools][devtools]]
  - [[#devdebug][devdebug]]
  - [[#netdebug][netdebug]]
  - [[#yubikey][Yubikey]]
  - [[#xdg-1][XDG]]
  - [[#xkb][XKB]]
  - [[#languages-1][Languages]]
- [[#tui][TUI]]
  - [[#env][Env]]
  - [[#apps-1][Apps]]
  - [[#guix-1][Guix]]

* Environment
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** Org Variables

These are intended to be a list of system-specific variables that enable some
portability: for me, across systems or networks. The idea is to containerize
this as much as possible, at least for myself, so the paths/etc work like
[[https://12factor.net/config][12Factor config vars]] or Helm values.

*** Paths

+ _DF :: path to dotfiles
+ _DATA :: path to data mount

#+begin_quote
Note: getting this to tangle properly requires =C-c C-v C-t=.

Changing the variables above requires evaluating the block below.
#+end_quote

#+name: bash-env-bindings
| _DF         | $HOME/.dotfiles            |
| _DATA       | /data                      |
| _LANG       | /data/lang                 |
| _ECTO       | /data/ecto                 |
| _REPO       | /data/repo                 |
| _STEAM      | /flatpak/steam             |
| _AGENDA     | /flatpak/agenda            |
| _GUIX       | /gnu                       |
| _WALLPAPERS | /data/xdg/Wallpapers/anime |
| _FLATPAK    | /flatpak                   |
| DOOMDIR     | $HOME/.doom.d              |

#+name: bash-env-bindings_GEN
#+begin_src emacs-lisp :tangle no :var bindings=bash-env-bindings :results output :exports none
(mapcar #'(lambda (row)
           (princ (format "export %s=%s\n" (cl-first row) (cl-second row)))) bindings)
#+end_src

#+RESULTS: bash-env-bindings_GEN
#+begin_example
export _DF=$HOME/.dotfiles
export _DATA=/data
export _LANG=/data/lang
export _ECTO=/data/ecto
export _REPO=/data/repo
export _STEAM=/flatpak/steam
export _GUIX=/gnu
export _WALLPAPERS=/data/xdg/Wallpapers/anime
export _FLATPAK=/flatpak
export DOOMDIR=$HOME/.doom.d
#+end_example

#+name: bash-env-bindings_CALL
#+call: bash-env-bindings_GEN()

#+RESULTS: bash-env-bindings_CALL
#+begin_example
export _DF=$HOME/.dotfiles
export _DATA=/data
export _ECTO=/data/ecto
export _REPO=/data/repo
export _STEAM=/steam
export _GUIX=/gnu
export _WALLPAPERS=/data/xdg/Wallpapers/anime
export _FLATPAK=/flatpak
export _FLATPAK_NAME=flexpak
export DOOMDIR=$HOME/.doom.d
#+end_example

#+begin_src sh :tangle .profile :noweb yes :comments none :results none :exports none :shebang #!/bin/sh
<<bash-env-bindings_CALL()>>
#+end_src

#+RESULTS:

*** Create Paths

Once paths are set in your profile, you will need to do something like:



** XDG Shim


+ =.xdg_shim.sh=
  - This file ensures XDG can be modified by user before the rest of =.profile= runs. It's necessary because =.config/sh= relies on XDG.
  - This script is not managed by =git= or =stow=

#+begin_src sh :tangle .xdg_shim.eg.sh :shebang #!/bin/sh
export XDG_CONFIG_HOME=$HOME/.config
#export XDG_CONFIG_DIRS=/etc/xdg
#export XDG_DATA_HOME=$HOME/.local/share
#export XDG_DATA_DIRS=/usr/local/share/:/usr/share/
#export XDG_STATE_HOME=$HOME/.local/state
#export XDG_CACHE_HOME=$HOME/.cache
#+end_src

***** TODO fix the above example script. these are XDG spec defaults, but sway will not startup...

** XDG User Dirs

This requires the =xdg-user-dirs= tool

See [[https://wiki.archlinux.org/title/XDG_user_directories][XDG User Directories]] for more info. This file allows directories like
=$HOME/Documents= to survive reinstallation of systems & home directories in a
sane way.

#+begin_src sh :result none :eval no
dirsfile=$XDG_CONFIG_HOME/user-dirs.dirs

# overwrite (requires stow .)
echo > $dirsfile
echo "XDG_DOCUMENTS_DIR=\"$_DATA/xdg/Documents\"" >> $dirsfile
echo "XDG_MUSIC_DIR=\"$_DATA/xdg/Music\"" >> $dirsfile
echo "XDG_PICTURES_DIR=\"$_DATA/xdg/Pictures\"" >> $dirsfile
echo "XDG_VIDEOS_DIR=\"$_DATA/xdg/Videos\"" >> $dirsfile
echo "XDG_TEMPLATES_DIR=\"$_DATA/xdg/Templates\"" >> $dirsfile

# and ignore these
#XDG_DESKTOP_DIR="$_DATA/xdg/Desktop"
#XDG_DOWNLOADS_DIR="$_DATA/xdg/Downloads"
#XDG_PUBLICSHARE_DIR="$_DATA/xdg/Public"
#+end_src

*** Note

+ xdg-user-dirs-update will replace everything if anything is invalid (only =$HOME/yyy= or =/path/to/yyy= is valid)
+ it will autoupdate everything if any dirs don't exist


** Profile Hooks

+ =.config/sh/=
  - These scripts are not managed by =git= or =stow=
  - _before_profile.d.sh :: remaps values before =profile.d/*.sh= scripts run
  - _load_profile.d.sh :: a list of scripts loaded by =*profile=
  - _after_profile.d.sh :: remaps values after =_load_profile.d.sh= has run
+ =.config/sh/profile.d/=
  - These scripts are managed by =git= and =stow=.

**** Default Scripts

Manually copy. Stow deploys, but to no effect (no need to mess with =.stowrc= etc.)

#+begin_src sh :tangle .config/sh/_before_profile.eg.sh :shebang #!/bin/sh
# This is the default _before_profile.d.sh script
#+end_src

Note: Guix extra profiles should be loaded first in this list of
scripts. Running them with a wildcard or in any order is possible, but
it is assumed that the sequence is structured.

+ Using this approach with Guix profiles where the WM dependencies are
  loaded separeately should enable a user to choose between multiple
  window managers, as long as the login manager or display manager can
  set the list of =extra_guix_profiles= before loading the profile.
  - these scripts and the Guix Profiles would need to be tweaked to do
    so, as well as how wayland/x11-related packages are grouped.
  - In this way, a user can configure both X11 and Wayland-based window
    managers on the same system without having the package dependencies
    affect one another.

#+begin_src sh :tangle .config/sh/_load_profile.eg.sh :shebang #!/bin/sh
# This is the default _load_profile.d.sh script

__scripts=(
"guix.sh"
"mail.sh"
"email.sh"
"apps.sh"
"xdg.sh"
"gtk.sh"
"qt.sh"
"emacs.sh"
"java.sh"
"julia.sh"
"graphviz.sh"
"flatpak.sh"
    )
for __script in ${__scripts[@]}; do
    [[ -f $DOTS_PROFILE_D/$__script ]] && source $DOTS_PROFILE_D/$__script || echo "couldn't load $__script"
done
unset $__script

#+end_src

** RC Hooks

These scripts are intentionally left blank.

+ =.config/sh/=
  - _before_rc.d.sh :: remaps values before =rc.d/*.sh= scripts run
  - _load_rc.d.sh :: a list of scripts loaded by =*rc=
  - _after_rc.d.sh :: remaps values after =_load_rc.d.sh= has run
+ =.config/sh/rc.d/=

** Apps

#+begin_src sh :tangle .config/sh/profile.d/apps.sh :shebang #!/bin/sh
export MAIL=geary
export BROWSER=firefox

# TODO: update to use terminal emacsclient
export VISUAL="emacsclient -c"
export EDITOR="emacsclient"
export ALTERNATE_EDITOR=vim
#+end_src

** XDG

#+begin_src sh :tangle .config/sh/profile.d/xdg.sh :shebang #!/bin/sh
#export XDG_SESSION_TYPE=wayland
#export XDG_SESSION_DESKTOP=sway
#export XDG_CURRENT_DESKTOP=sway

# TODO set in login manager script
#export XDG_CURRENT_DESKTOP=i3

# NOTE this fixes alacritty HiDPI
export WINIT_X11_SCALE_FACTOR=1
#+end_src

** Arch

#+begin_src sh :tangle .config/sh/profile.d/arch.sh :shebang #!/bin/sh
alias octopi=/usr/bin/octopi
#+end_src

**** TODO autostart applications
+ qpwgraph

**** TODO collect list of pacman packages installed explicitly
+

** Flatpak

Here, flatpak will be configured to use a custom installation on another
partition at =/flatpak/$USER=. To keep the flatpak app state on the same
partition, link =$HOME/.var= to =$FLATPAK_USER_VAR=.

#+begin_src sh :tangle .config/sh/profile.d/flatpak.sh :shebang #!/bin/sh
alias flatagenda="flatpak --installation=agenda"
alias flatsteam="flatpak --installation=steam"

export XDG_DATA_DIRS="/flatpak/dc/.local/share/flatpak/exports/share:${XDG_DATA_DIRS}"
# TODO move this to the guix package?
export XDG_DATA_DIRS="/flatpak/steam/.local/flatpak/exports/share:${XDG_DATA_DIRS}"
export XDG_DATA_DIRS="/flatpak/agenda/.local/flatpak/exports/share:${XDG_DATA_DIRS}"

export FLATPAK_USER_DIR=/flatpak/$(id -un)/.local/share/flatpak

# this is another variable for convenience (this var isn't used by flatpak)
export FLATPAK_USER_VAR=/flatpak/$(id -un)/.var

# Custom installations need to be configured here
# - /flatpak/steam :: $FLATPAK_CONFIG_DIR/installations.d/steam.conf
# export FLATPAK_CONFIG_DIR=/flatpak/.config/flatpak
export FLATPAK_CONFIG_DIR=/etc/flatpak

#+end_src

***** TODO figure out how to call xdg-open for flatpak apps


*** The Goal

After creating & mounting a =/flatpak= disk, syncthing can push centrally
updates to new flatpak installations to =/flatpak/syncpak123=:

+ Here they can be managed via =flatpak --installation /flatpak/syncpak123= on
  the server where flatpak is hosted
  - or, more carefully, managed from some of the local servers, assuming a consistent flatpak environment on the syncthing clients.
  - these clients (or the client disk permissions) should set some of the
    syncthing permissions to read only.
  - on the client, =XDG_CONFIG_DIR= is always read after =XDG_CONFIG_HOME=, so
    for any app, its configs can be transparently overridden, without affecting the synced flatpak installations.
+ Then the custom flatpak installations can be linked into the local system via
  =stow=, where a few modifications to =XDG= vars will pick them up.

  This method has not been tested yet. However, since they are plain binaries, then they should be syncable.

** Steam & Proton

+ [[See ][PC Gaming Wiki]] describes Steam Library & Game Data locations

#+begin_src sh :tangle .config/sh/profile.d/steam.sh :shebang #!/bin/sh
export STEAM_DIR=$_STEAM/.var/app/com.valvesoftware.Steam/.steam
export FLATPAK_STEAM_VAR=/flatpak/steam/.var

# log with PROTON_LOG=1
export PROTON_LOG_DIR=$_STEAM/log/proton
export PROTON_CRASH_REPORT_DIR=$_STEAM/log/proton-crash

alias run_steam="flatpak --installation=steam run com.valvesoftware.Steam"
#+end_src

Run with =FLATPAK_CONFIG_DIR=/etc/flatpak flatpak --installation=steam run com.valvesoftware.Steam=

Or simply =flatpak --installation=steam run com.valvesoftware.Steam=

*** Setup

+ Add =steam.sh= to =~/.config/sh/_load_profile.sh=

#+begin_src shell :tangle no :eval no
mkdir -p $_STEAM $FLATPAK_STEAM_VAR/com.valvesoftware.Steam

# because flatpak steam will try to symlink /flatpak/dc/.var/com.valvesoftware.Steam/.var to ~/.var (which is very confusing)
ln -s /flatpak/steam/.var/app/com.valvesoftware.Steam /flatpak/dc/.var/com.valvesoftware.Steam

# ensure that FLATPAK_CONFIG_DIR is defined and that the steam flatpak install exists
flatpak --installations

flatpak --installation=steam remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak --installation=steam remote-add --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo

flatpak --installation=steam install flathub com.valvesoftware.Steam
flatpak --installation=steam install flathub com.valvesoftware.Steam.CompatibilityTool.Proton
#+end_src


**** Issues

+ After invoking for the first time, if this link shows up, remove it
  - =rm /flatpak/steam/.var/app/com.valvesoftware.Steam/.var=
+ Flatpak steam will ignore =STEAM_DIR= anyways...
  - it will put the steam library within the steam install under
    =/flatpak/steam/.var/app/com.valvesoftware.Steam/.var=


***** TODO consider creating ./flatpak/installations.d/steam.conf

***** TODO simplyfy config

** Guix

=GUIX_AUTOLOAD_PROFILES=(desktop i3)= should be set in the script run
by the login/display manager, but not exported.

#+begin_src sh :tangle .config/sh/profile.d/guix.sh :shebang #!/bin/sh
alias guix-all-profiles='find /gnu/store -maxdepth 1 -type d -name "*profile" -exec ls -al \{\} +'
alias guix-main="$HOME/.config/guix/current/bin/guix"

# TODO fix for non-guix-systems
# GUIX_PROFILE="$HOME/.guix-profile"
# . "$GUIX_PROFILE/etc/profile"

# GUIX_AUTOLOAD_PROFILES=(desktop i3)
export GUIX_EXTRA=$HOME/.guix-extra-profiles
for i in ${GUIX_AUTOLOAD_PROFILES[@]}; do
  echo $i
  profile=$GUIX_EXTRA/$i/$i
  if [ -f "$profile"/etc/profile ]; then
    GUIX_PROFILE="$profile"
    . "$GUIX_PROFILE"/etc/profile
  fi
  unset $profile
done

export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale

# -c cores -m jobs
export GUIX_BUILD_OPTIONS="-c6"

export GUIX_DEVTOOLS=$GUIX_EXTRA/devtools/devtools
export GUIX_DEVDEBUG=$GUIX_EXTRA/devdebug/devdebug
#+end_src

*** On Arch
**** Load Guile for Emacs-Guix

Emacs guix needs a consistent guile environment (See [[https://github.com/alezost/guix.el#important-note-for-non-guix-system-users][this note]]).

+ =GUILE_LOAD_PATH= should be defined properly and should include guix modules.
+ So, =guix package -i guix guile= to install guix and guile into the user
  profile but reload the current profile afterwards.
+ And finally, =emacs-guix= should work as expected on a foreign distro
  - also, running =doom purge= when moving emacs packages between guix and
    doom's straight is essential. any shared dependencies will likely be brought
    in from doom (not guix)
  - in other words ... you kinda must pick a team (or micromanage your
    =EMACSLOADPATH=)

#+begin_src sh :tangle .config/sh/profile.d/guile-arch.sh :shebang #!/bin/bash
export GUIX_EXTRA=$HOME/.guix-extra-profiles
# source "$HOME/.guix-profile/etc/profile"
# source "$HOME/.config/guix/current/etc/profile"
# export GUILE_LOAD_PATH=$HOME/.guix-profile/share/guile/site/3.0:$GUILE_LOAD_PATH
# export GUILE_LOAD_COMPILED_PATH=$HOME/.guix-profile/lib/guile/3.0/site-ccache:$HOME/.guix-profile/share/guile/site/3.0:$GUILE_LOAD_COMPILED_PATH
#+end_src

***** Note on =/etc/profile.d/guix.sh= from AUR

AUR guix-install sets this up in /etc/profile.d/guix.sh.

#+begin_example sh :eval no
if [ -z "$GUIX_LOCPATH" ]; then
    GUIX_PROFILE=$HOME/.guix-profile
    source "$GUIX_PROFILE/etc/profile"
    export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale
fi
#+end_example

+ It will load =_GUIX_PROFILE= first (the current profile), then load
  =.guix-profile/etc/profile=, if it exists.
+ If you haven't installed anything that requires setting =PATH=, no path
  modifications will be visible (confusing!)

**** Load Guix Profiles

#+begin_src sh :tangle .config/sh/profile.d/guix-arch-support.sh :shebang #!/bin/bash
guix_arch_load() {
    local profiles=""

    while [ "$1" != "" ]; do
        case $1 in
            -*|--*=) # unsupported flags
            echo "Error: Unsupported flags $1" >&2
            return 1
            ;;
            ,*)
                profiles="$profiles $1"
                shift
                ;;
        esac
    done

    if [ -z "$profiles" ]; then
        # NOTE: this glob behaves strangely when $GUIX_EXTRA is empty
        # profiles="$GUIX_EXTRA/*";
        echo "Error: no profiles specified"
    fi

    local profilePath=""
    for p in $profiles; do
        profile=$(basename $p)
        echo $profile
        profilePath=$GUIX_EXTRA/$profile
        if [ -f "$profilePath/$profile/etc/profile" ]; then
            GUIX_PROFILE="$profilePath/$profile"
            source "$GUIX_PROFILE/etc/profile"
        fi
    done

    return 0
}

export -f guix_arch_load

#+end_src

The default is -c0, which uses as many cores as possible for each build agent,
so no need to set =-c= in $GUIX_BUILD_OPTIONS

#+begin_src sh :tangle .config/sh/profile.d/guix-arch.sh :shebang #!/bin/bash
# export GUIX_BUILD_OPTIONS="-c6"

# never again, wxPython ... never again
GUIX_AUTOLOAD_PROFILES=(arch-pwsafe academic gpgagent)
if [ -z "$GUIX_ARCH_LOADED" ]; then
    guix_arch_load ${GUIX_AUTOLOAD_PROFILES[@]}
    export GUIX_ARCH_LOADED=${GUIX_AUTOLOAD_PROFILES[@]}
fi

GUIX_PROFILE="$HOME/.config/guix/current"
source "$GUIX_PROFILE/etc/profile"
#+end_src

Add to =~/.config/sh/_load_profile.d.sh= _in this order_

+ guile-arch.sh
+ guix-arch-support.sh
+ guix-arch.sh

** Nix

It seems I'm more likely to encounter this on programming projects/teams.

#+begin_src shell :tangle .config/sh/profile.d/nix-arch.sh :shebang #!/bin/bash
# add your main nix-profile to paths
export PATH=$HOME/.nix-profile/bin:$PATH
export XDG_DATA_DIRS=$HOME/.nix-profile/share:$XDG_DATA_DIRS

# TODO add potential for other Nix profiles
#+end_src

Then add =nix-arch.sh= to =~/.config/sh/profile.d= preferably before =guix-arch.sh=.

After setup, happily build the free [[https://github.com/hmemcpy/milewski-ctfp-pdf][Category Theory For Programmers PDF]]. This
requires adding the following.

#+begin_src nix :tangle .config/nix/nix.conf :mkdirp yes :comments none
extra-experimental-features = nix-command flakes
#+end_src

*** On Arch

Install Nix and setup the groups. Configure =~/.config/nix/nix.conf= if necessary.

#+begin_example shell
yay -Syu nix

# to allow user access to the nix build daemon
sudo usermod -G nix-build

echo "max-jobs = auto" | sudo tee -a /etc/nix/nix.conf
#+end_example

Ensure that the =nix-ademon= service is running or just enable it.

#+begin_example shell
# to make fedora a tolerable daily driver. run with sudo to add channel to root
nix-channel --add https://nixos.org/channels/nixpkgs-unstable

# requires sudo to create /nix/store
nix-channel --update
#+end_example

Now nix should build and =direnv allow= should run flakes right.

*** On Guix

*** On RPM

** FCITX5

According to =fcitx5-diagnose= these need to be set to =fcitx= NOT =fcitx5=.

#+begin_src shell :tangle .config/sh/profile.d/fcitx5.sh :shebang #!/bin/sh
export QT_IM_MODULE=fcitx
export GTK_IM_MODULE=fcitx
export SDL_IM_MODULE=fcitx
export XMODIFIERS="@im=fcitx"
#+end_src

If fcitx5 is being loaded by a guix profile that doesn't update =XDG_DATA_DIRS=, then that variable needs to be updated as well

#+begin_src shell :tangle .config/sh/profile.d/fcitx5-guix.sh :shebang #!/bin/sh
export FCITX_ADDON_DIRS=$GUIX_EXTRA/fcitx5/fcitx5/lib:$FCITX_ADDON_DIRS
#export FCITX_CONFIG_HOME=
#export FCITX_DATA_DIRS=
#export XDG_DATA_DIRS=$GUIX_EXTRA/fcitx5/fcitx5/share:$XDG_DATA_DIRS
#+end_src

** GTK

#+begin_src sh :tangle .config/sh/profile.d/gtk.sh :shebang #!/bin/sh
# GTK
export GTK2_RC_FILES="$HOME/.gtkrc-2.0"

#export GDK_BACKEND=wayland             # this can prevent programs from starting (e.g. chromium and electron apps). therefore, this should be set per app instead of globally.
#+end_src

** QT

#+begin_src sh :tangle .config/sh/profile.d/qt.sh :shebang #!/bin/sh

# Qt
#export QT_QPA_PLATFORMTHEME="qt5ct"
#export QT_QPA_PLATFORM=wayland
#export QT_WAYLAND_FORCE_DPI=physical
#export QT_WAYLAND_DISABLE_WINDOWDECORATION=1

alias qutebrowser='QTWEBENGINE_CHROMIUM_FLAGS=\"--disable-seccomp-filter-sandbox\" qutebrowser'
alias anki='QTWEBENGINE_CHROMIUM_FLAGS=\"--disable-seccomp-filter-sandbox\" anki'

#+end_src

**** TODO remove aliases aboves after fix for [[https://issues.guix.gnu.org/52993][Guix #52993]] is fixed

** Emacs


#+begin_src sh :tangle .config/sh/profile.d/emacs.sh :shebang #!/bin/sh

export ORG_DIRECTORY=/data/org
#export ORG_AGENDA_ROOT=
#export ORG_ROAM_ROOT

#+end_src

** AMD ROCm


Ensure user is added to =video= and =render= groups. Probably just use the ROCm
docker images.

** Podman

Ensure that Podman stores images on the correct mount.

#+begin_example conf :tangle .config/containers/storage.conf
[storage]

driver = "overlay"
rootless_storage_path = "/storage/location"
#+end_example

Rootful images must be stored in a root-owned folder directory with correct
permissions AFAIK.

** Docker

Ensure that Docker is configured to store images on the correct mount.

#+begin_example json :tangle /etc/docker/daemon.json
{
  "data-root": "/storage/location"
}
#+end_example

The docker systemd services must have been run at least once for many of its
paths to exist.

Test with =docker pull docker.io/netbootxyz/netbootxyz=

** Kaggle

#+begin_src sh :tangle .config/sh/kaggle.sh
kacomp() {
    if [ $# = 0 ]; then
        echo Requires search parameter
        return 1
    else
        kaggle c list | grep $1 | cut -f1 -d' ' | rev | cut -f-1 -d'/' | rev
    fi
}

# doesn't work at the moment, but the discussion tabs sure take up 150 MB of RAM
# google owns kaggle and wants you to use TF Lite, but can't quite seem to
# return the favor
#
# (no offense, Kaggle, but i fucking hate javascript for the same reason that
#  google might want you to use TF Lite ... it's funny how that works)
kacomp_set() {
    kaggle_comp="$(kacomp $1)"
    [[ -z $kaggle_comp ]] && return 1
    kaggle config set -n competition -v $kaggle_comp
}
#+end_src

* Languages
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

#+begin_src sh :tangle no

#+end_src

** Java

#+begin_src sh :tangle .config/sh/profile.d/java.sh :shebang #!/bin/sh
export _JAVA_AWT_WM_NONREPARENTING=1

# This sets Java Swing UI -> GTK
#export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel $_JAVA_OPTIONS"

#+end_src

** Node

#+begin_src sh :tangle .config/sh/profile.d/node.sh :shebang #!/bin/sh
[[ -f /usr/share/nvm/init-nvm.sh ]] && source /usr/share/nvm/init-nvm.sh
#+end_src

** Graphviz

#+begin_src sh :tangle .config/sh/profile.d/graphviz.sh :shebang #!/bin/sh
export GRAPHVIZ_DOT=$HOME/.guix-extra-profiles/desktop/desktop/bin/dot
[[ -e $GRAPHVIZ_DOT ]] || GRAPHVIZ_DOT=/usr/bin/dot
#+end_src

** Python

I have a lot of concerns when configuring my systems: two main workstations, but
one with Garuda Arch and the other with Guix Systems, where some packages are
older. This has led to friction like:

- I've worked on a project on one or both laptops and now I can't get the
  runtime to load.
- I have to worry about what files/folders need to be added to =.gitignore=,
  =.stow-local-ignore= AND =.stignore= so syncthing don't fuck things up or
  transfer 40,000 files from a python install.

Examining all this stuff leads me to understand it more, yet it's one hell of a
"paradox of choice" problem.

+ VM's would be great: but they don't work for GPU/CUDA projects ... unless I
  have money for a external enclosure that supports multiple GPUs, I really
  cannot justify $500 for a deskweight.
+ Network storage would be great ... but doesn't work so well for IDE's (I
  think?)
+ The homelab (with or without kubernetes) would be great: but I'm not rich
  enough to afford manageable storage. That's a hard requirement for K3S for me,
  but working via Tramp may be possible.
+ The cloud would be great... but have I told you /exactly/ how poor I am?

*** Old Setup
+ Pipenv should be installed to =--user=, at least on guix
  - after =guix install python pip3=, then run =pip3 install --user pipenv=
  - or use a manifest to manage the base python and load it into the environment
  - pip3/pipenv will install its user packages to =~/.local/=
  - otherwise, see [[https://github.com/pjotrp/guix-notes/blob/master/PYTHON.org#isolated-module-installation][pjotr's notes]] on isolated module installation
    - should guix/python need the package's hashed path
+ With these environment variables, then pipenv should sync the packages in
  =Pipfile= to =./.venv=
  - this is easier than managing a dozen =virtualenv= instances like I did
    before the pipenv era
  - old projects should probably be cleaned up. small files eat many inodes. i'm
    looking at you NodeJS.

#+begin_src sh :tangle .config/sh/profile.d/python-old.sh :shebang #!/bin/sh
# to manually specify where venv's are set up
# export WORKON_HOME=~/.venvs
export PIPENV_VENV_IN_PROJECT=1

# to load an alternate .env file
#PIPENV_DOTENV_LOCATION=/path/to/.env pipenv shell

# to prevent loading of .env files (containing config secrets)
# PIPENV_DONT_LOAD_ENV=1

# to setup shell completion in bash
# eval "$(_PIPENV_COMPLETE=bash_source pipenv)"
#+end_src

**** Resources

+ [[https://medium.com/analytics-vidhya/install-tensorflow-2-for-amd-gpus-87e8d7aeb812][Setup Tensorflow for AMD GPU's]]
+ [[https://pipenv-fork.readthedocs.io/en/latest/advanced.html][Advanced Usage of Pipenv]]
  - includes reference to environment variables

**** Issues

***** Setup IPython for integration with Blender

***** TKinter errors with =pyenv=

Ensure tkinter is installed or run =pacman -Syu tk= and restart xorg to refresh
path. New pythons being installed will need it.

I swear TCL is like the "other Perl" -- a virtually unused language without
which most of our technology & internets would cease functioning.

What's amusing to me is that any program would really need an interface to TCL,
itself being the universal interface to any program ... but i guess it makes
sense. Why reinvent the wheel if some languages are just superior?

***** OpenSSL errors with =pyenv=

Ensure the python is building in OpenSSL support.

Ben Mezger installs python versions like so [[https://github.com/benmezger/dotfiles/blob/main/Makefile#L162-L177][in this Makefile]]

#+begin_example shell
PATH="$(HOME)/.pyenv/bin:${PATH}"; \
CFLAGS=-I/usr/include/openssl LDFLAGS=-L/usr/lib pyenv install -s 3.10.2; \
CFLAGS=-I/usr/include/openssl LDFLAGS=-L/usr/lib pyenv install -s 3.8.12; \
CFLAGS=-I/usr/include/openssl LDFLAGS=-L/usr/lib pyenv install -s 3.9.9; \
CFLAGS=-I/usr/include/openssl LDFLAGS=-L/usr/lib pyenv install -s 3.11.0; \

eval $(pyenv init -)
pip install --upgrade -r scripts/requirements.txt
#+end_example

From [[https://stackoverflow.com/questions/37055420/python-how-can-i-tell-if-my-python-has-ssl][s/o How can I tell if my python has SSL?]]

Test for openssl with =openssl rand -hex 20= and the installed python with:

#+begin_src shell
pyenv shell 3.11.3
python -c "import ssl; print(ssl.OPENSSL_VERSION)"
#+end_src

#+RESULTS:
: OpenSSL 3.0.8 7 Feb 2023


*** Python on Arch

Ensure pyenv is installed with =yay -Syu pyenv= and add this to
=.config/sh/_load_profile.sh=. This should be loaded after all the guix
profiles, in case one contains a python.

#+begin_src sh :tangle .config/sh/profile.d/python-pyenv.sh :shebang #!/bin/sh
# Define =PYENV_ROOT= or pyenv will install to =$HOME/.pyenv=
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
#+end_src

+ Install new pythons with =pyenv install 3.11.3= and see below for optimizations.
+ List versions with =pyenv install -l=
+ Switch with =pyenv (shell|local|global) $python_version=. This is currently
  not working, since I only have =eval $(pyenv init -)= sourced in =.profile=,
  which forgets the =pyenv()= function. To get the shell integration to work, it
  needs to be added to =.bashrc=.

See direnv integration below.

***** TODO evaluate whether I ls -ashould add =pyenv= to both =.profile= and =.bashrc=

*** Custom Pyenv builds

See pyenv's =python-build= plugin to customize the build

+ [[https://github.com/pyenv/pyenv/tree/master/plugins/python-build#special-environment-variables][Environment vars]] for pyenv's python-build plugin.
+ The spec for [[https://github.com/pyenv/pyenv/blob/master/plugins/python-build/share/python-build/3.11.3][Python 3.11.3]] is in =./plugins/python-build/share/3.11.3/=
+ The installations will source functions in
  =./plugins/python-build/bin/python-build=, including =install_package= which
  fetches source for python.
+ It also fetches packages like =readline= or =openssl-1.1.1s= if your Mac's is
  broken. I guess OpenSSL3 is [[https://peps.python.org/pep-0644/][taking its sweet time]], but convenience comes at a
  cost -- mostly, you'll run into issues with the [[https://cryptography.io/en/latest/installation/#building-cryptography-on-macos][cryptography package]].

**** Optimizations

To build with optimizations:

#+begin_src
PYTHON_CONFIGURE_OPTS='--enable-optimizations --with-lto' PYTHON_CFLAGS='-march=native -mtune=native'
#+end_src

To build in parallel (doesn't seem to help)

#+begin_src
MAKE_OPTS="-j14" PYTHON_MAKE_OPTS="-j14"
#+end_src

Full command

#+begin_src sh
env PYTHON_CONFIGURE_OPTS='--enable-optimizations --with-lto' \
    PYTHON_CFLAGS='-march=native -mtune=native' \
    PYTHON_MAKE_OPTS="-j14" \
    MAKE_OPTS="-j14" \
    pyenv install 3.11.3 2>&1 > ~/src/log/python-build-3.11.3.log
#+end_src

*** Python on Guix

I'm just going to use the Guix python packages and setup pip to support
virtualenvs.

#+begin_src scheme :tangle .config/guix/manifests/pythondev.scm
(specifications->manifest
 '(
   "python"
   "python-pip"
   )
 )
#+end_src

The description of Direnv's =layout python= directive is a bit confusing. I
didn't understand that I could simply set the virtualenv with the following:

#+begin_example shell
export VIRTUALENV=~/.my-persistent-venvs/jupyter-with-tensorflow-venv
layout python
#+end_example

**** Installing Pythons on Guix with Pyenv

#+begin_quote
Note: =pyenv= doesn't work well on Guix, so a different =direnv= workflow is
needed. I knew it was likely to be this way, but once I start running into
=LD_LIBRARY_PATH= issues, that's it. That will end up being brittle at best.

My channel is still too new to support essential custom packages. This is
another reason I was mad to discover I /could/ actually use GPG/SSH the way it
was initially described.
#+end_quote

Pyenv needs to be cloned:

#+begin_example shell
git clone https://github.com/pyenv/pyenv $HOME/.pyenv
#+end_example

And then [[github:pyenv/pyenv-virtualenv][pyenv/pyenv-virtualenv]] needs to be cloned into the plugins dir:

#+begin_example
git clone https://github.com/pyenv/pyenv-virtualenv.git "$(pyenv root)/plugins/pyenv-virtualenv"
#+end_example

Ensure the above =python-pyenv.sh= has been added to =.config/sh/_load_profile.sh=

These dependencies (and [[https://github.com/pyenv/pyenv/wiki#suggested-build-environment][probably more]]) need to be accessible on path.

|-----------------+--------------------------------------------------------------------|
| Role            | Guix Packages                                                      |
|-----------------+--------------------------------------------------------------------|
| C Interop       | libffi (or sad python)                                             |
| GUI/TUI         | tk, ncurses                                                 |
| Compression     | bzip2 (on system profile), zlib, zip, unzip and xz (includes lzma) |
| XML             | expat and libxml2 (python doesn't build in xmlsec)                 |
| Data            | sqlite                                                             |
| CA Certs        | nss-certs (should probably be [[https://docs.python.org/3/using/unix.html#custom-openssl][on your system]])                      |
| Hashing Library | gdbm (so python go vroom)                                          |
|-----------------+--------------------------------------------------------------------|

Since multiple profiles can source the same lib, for consistency, run =pyenv
install $version= within =guix shell -m ~/.config/guix/manifests/devtools.scm=.
Since these are shared libs, then the profile needs to be loaded wherever
pythons are run.

** Julia

Julia [[https://docs.julialang.org/en/v1/manual/environment-variables/][Environment Variables]]

#+begin_src sh :tangle .config/sh/profile.d/julia.sh :shebang #!/bin/sh
export JULIA_SHELL=/bin/sh
export JULIA_EDITOR='emacsclient -nw'

export JULIA_DEPOT_PATH="$_LANG/.julia:"
export JULIA_LOAD_PATH="$_LANG/.julia:"
#+end_src

This configuration is intended to be used on archlinux.


#+begin_src sh :tangle .config/direnv/direnvrc :shebang #!/bin/sh

# The guix package for julia creates ./bin/julia,
# which is a wrapper for ./bin/.julia-real
use_julia_system() {
    # These auto-expand empty entries, but =JULIA_LOAD_PATH= can't be set if empty.
    export JULIA_DEPOT_PATH="$_LANG/.julia:"
    export JULIA_LOAD_PATH="$_LANG/.julia:"
    export JULIA_PATH="$_LANG/julia"
    export JULIA_VERSION="1.7.3"

    export JULIA_BIN="$JULIA_PATH/.bin/julia-$JULIA_VERSION/bin/julia"
    export JULIA_LIB="$JULIA_PATH/.bin/julia-$JULIA_VERSION/lib/julia"

    PATH_add "$JULIA_PATH/.bin"

    alias pluto='julia --project=nb --threads=auto -e "using Pluto; Pluto.run(port=4321)"'
}
#+end_src

Julia .envrc template:

#+begin_src sh :tangle .config/direnv/.julia.envrc
use julia_system
#watch_file /home/dc/.config/direnv/direnvrc
#+end_src

** Matlab

Completing the Arch package install is only necessary if you want it installed
via Pacman. It requires =libxcrypt-compat= and =freetype=

#+begin_src sh :tangle .config/sh/profile.d/matlab.sh :shebang #!/bin/sh
#alias matlab=
export MATLAB_HOME=/flatpak/matlab
#export MATLAB_HOME=$_LANG/matlab
export MATLAB_VERSION=R2022a
export MATLAB_ARCH=glnxa64
export MATLAB_PATH=$MATLAB_HOME/$MATLAB_VERSION/bin

export PATH=$MATLAB_PATH:$PATH

function matlab_open() {
    if [ "${MATLAB_INTEL_OVERRIDE}" = "yes" ] ; then
        # exec env MESA_LOADER_DRIVER_OVERRIDE=i965 GTK_PATH=/usr/lib/gtk-2.0 matlab -desktop;
        env MESA_LOADER_DRIVER_OVERRIDE=i965 GTK_PATH=/usr/lib/gtk-2.0 progl matlab -desktop;
    else
        # exec env GTK_PATH=/usr/lib/gtk-2.0 matlab -desktop;
        env GTK_PATH=/usr/lib/gtk-2.0 progl matlab -desktop;
    fi
}

function matlab_open_mesa() {
    if [ "${MATLAB_INTEL_OVERRIDE}" = "yes" ] ; then
        # exec env MESA_LOADER_DRIVER_OVERRIDE=i965 GTK_PATH=/usr/lib/gtk-2.0 matlab -desktop;
        env MESA_LOADER_DRIVER_OVERRIDE=i965 GTK_PATH=/usr/lib/gtk-2.0 matlab -desktop;
    else
        # exec env GTK_PATH=/usr/lib/gtk-2.0 matlab -desktop;
        env GTK_PATH=/usr/lib/gtk-2.0 matlab -desktop;
    fi
}
#+end_src

* Profile
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** =.profile=

If =.bash_profile= does not exist, =.profile= will be sourced instead. When bash is invoked as =sh=, then it will source =.profile= anyways.

*** Load XDG Shim

#+begin_src sh :tangle .profile :shebang #!/bin/sh
# If XDG variables need to change from default, set them here.
[[ -f $HOME/.xdg_shim.sh ]] && source $HOME/.xdg_shim.sh

#[[ -z $XDG_CONFIG_HOME ]] && export XDG_CONFIG_HOME=$HOME/.config
#[[ -z $XDG_CONFIG_DIRS ]] && export XDG_CONFIG_DIRS=/etc/xdg
#[[ -z $XDG_DATA_HOME ]]   && export XDG_DATA_HOME=$HOME/.local/share
#[[ -z $XDG_DATA_DIRS ]]   && export XDG_DATA_DIRS=/usr/local/share/:/usr/share/
#[[ -z $XDG_STATE_HOME ]]  && export XDG_STATE_HOME=$HOME/.local/state
#[[ -z $XDG_CACHE_HOME ]]  && export XDG_CACHE_HOME=$HOME/.cache

export PATH=$HOME/.local/bin:$HOME/.bin:$PATH
#+end_src

#+RESULTS:

***** NOTA BIG BENE:

If there is no =.xdg_shim.sh=, none of the =$GUIX_AUTOLOAD_PROFILES= will be
loaded into =$PATH= and =.xsession= will fail. Several scripts are dependent on
=$XDG_CONFIG_HOME= at least.


*** Before Profile.d

#+begin_src sh :tangle .profile :shebang #!/bin/sh
export DOTS_CFG_SHELL=$XDG_CONFIG_HOME/sh
export DOTS_PROFILE_D=$DOTS_CFG_SHELL/profile.d

[[ -f $DOTS_CFG_SHELL/_before_profile.d.sh ]] && source $DOTS_CFG_SHELL/_before_profile.d.sh

[[ -f $DOTS_CFG_SHELL/_load_profile.d.sh ]] && source $DOTS_CFG_SHELL/_load_profile.d.sh
#+end_src

#+RESULTS:

#+begin_src sh :tangle .profile :shebang #!/bin/sh
# Browser
#export MOZ_ENABLE_WAYLAND=1             # only start firefox in wayland mode and no other GTK apps
export MOZ_DBUS_REMOTE=1                # fixes firefox is already running, but is not responding

# clutter
#export CLUTTER_BACKEND=wayland          # this can prevent programs from starting. therefore, this should be set per app instead of globally.


# elementary
#export ECORE_EVAS_ENGINE=wayland-egl
#export ELM_ENGINE=wayland_egl
#export ELM_DISPLAY=wl
#export ELM_ACCEL=gl

# TODO: Accessibility
# http://library.gnome.org/devel/accessibility-devel-guide/stable/gad-how-it-works.html.en

# disables accessibility
export NO_AT_BRIDGE=1

# Bemenu (not configured in sway)
#export BEMENU_BACKEND=wayland

# sdl
#export SDL_VIDEODRIVER=wayland        # this can prevent programs from starting old sdl games. therefore, this should be set per app instead of globally.

#+end_src

*** After Profile.d

#+begin_src sh :tangle .profile :shebang #!/bin/sh
[[ -f $DOTS_CFG_SHELL/_after_profile.d.sh ]] && source $DOTS_CFG_SHELL/_after_profile.d.sh
#+end_src

*** Source =.bashrc=

Try to source =.bashrc=. If the shell is non-interactive, =.bashrc= will return

**** TODO properly sort this out

#+begin_src sh :tangle .profile :shebang #!/bin/sh
[[ -f $HOME/.bashrc ]] && source $HOME/.bashrc
#+end_src

* Alacritty

**** TODO remove (doesn't work when alacritty calls /bin/sh)

#+begin_src sh :tangle .alacritty_bashrc :shebang #!/bin/sh
#GUIX_AUTOLOAD_PROFILES=(i3 desktop xdg devtools)

#[[ -f $HOME/.bashrc ]] && source $HOME/.bashrc
#+end_src



* Tools
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:


** Screen

+ GNU [[https://www.gnu.org/software/screen/manual/screen.html#toc-Regions-1][manual]]

#+begin_src sh :tangle .screenrc
startup_message off
defmousetrack on

term screen-256color
#term xterm-256color
#term rxvt-unicode-256color

# enable bold colors (shouldn't be req.)
# attrcolor b ".I"

# when available: use x-scrolling mechanism
# termcapinfo xterm*|rxvt*|kterm*|Eterm* ti@:te@

# remove window/proc number from name in windowlist (C-a ")
windowlist string "%4n %h%=%f"
# windowlist string "%4n %t%=%f" # default

# index windows starting at 1
bind c screen 1
bind ^c screen 1
bind 0 select 10
screen 1

# should fix issues where text editor's don't properly reset the window
altscreen on

hardstatus off
hardstatus alwayslastline
hardstatus string '%{= kG}[ %{G}%H %{g}][%= %{= kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{B} %m-%d %{W} %c %{g}]'

# TODO: dynamic titles for screen windows:
# https://www.gnu.org/software/screen/manual/screen.html#Dynamic-Titles
#+end_src

#+RESULTS:

*** Notes

+ Screen runs =C-a := commands in the context of the =env= that first started
  screen.
+ The =.screenrc= details should be shared in common for most systems, then you
  make changes and reload with =C-a :source ~/.screenrc= without spawning new
  processes.
+ Window customizations (splitting and assignment) do not survive detaching from
  a session, so window layout scripts ideally should avoid commands resulting in
  side-effects, so they are simple to re-source.
  - running =C-a :layout save $layout= will associate the current layout to the
    screen session, restoring it on reattach.
+ Archlinux [[https://bbs.archlinux.org/viewtopic.php?id=55618][discussion with user screenrc's]]

*** Scripts

+ These scripts can be included with =C-a :source /home/dc/.screen/layout.rc=.
+ Running =C-a :layout dump /home/dc/.screen/123.layout.screenrc= will save the
  current layout to a file.

**** Window arrangement for servers

Start =ssh-agent= before launching the screen session.

Then, source:

#+begin_src shell :tangle .screen/remote.layout.screenrc
split
split -h
#+end_src

Also, it may be possible to add =source ~/.screenrc= at the top, include the =ssh-agent= startup in the =.screenrc= and start with =screen -c .screen/remotelayout.screenrc=.

***** TODO complete after grokking GNU screen [[https://www.gnu.org/software/screen/manual/screen.html#Layout][regions/layouts]]

**** Start processes for web development

**** Setup SSH/GPG for a Yubikey

Useful to have a common =GPG_TTY= with more control over sharing ... though this
may cause problems with email clients or other programs. If it does, then some
issues could lead to pin lockouts.

So maybe it's only useful for controlling access to =ssh-agent=, though there's
probably a better way to set that up without problems (e.g. every
console/program has SSH/GPG agent vars/access)

* Shells
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** RC

If not running interactively, return

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
[[ $- != *i* ]] && return
shopt -s histappend

[[ "$TERM" == "dumb" ]] || export TERM="alacritty"
#+end_src

Aliases

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
# unless dumbterm

if [ "$TERM" != "dumb" ]; then
    # commandline color by default
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias egrep='egrep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias diff='diff --color=auto'
    alias grep='grep --color=auto'
    alias vdir='vdir --color=auto'
    alias screen='screen -h 2000'
# else
    # no color
fi

# updates
alias grubup="sudo update-grub"
alias upd='/usr/bin/update'

# hardware
alias hw='hwinfo --short'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
alias psmem='ps auxf | sort -nr -k 4'

# archive
alias tarnow='tar -acf '
alias untar='tar -zxvf '
alias wget='wget -c '

# systemd
alias jctl="journalctl -p 3 -xb"
alias jctlu="journalctl --user -u"
alias sysu='systemctl --user'

# pacman
alias fixpacman="sudo rm /var/lib/pacman/db.lck"
alias rmpkg="sudo pacman -Rdd"
alias cleanup='sudo pacman -Rns `pacman -Qtdq`'
alias rip="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -200 | nl"

# shell tools
alias pathtr="tr ':' '\n'"
alias shitbin='echo -e "\033c"'

# gpg
alias gpga='gpg --armor'
alias gpguptty='gpg-connect-agent updatestartuptty /bye'
alias gpgrel='gpg-connect-agent reloadagent /bye'
alias gpgk='gpg-connect-agent killagent /bye'

# Advanced command-not-found hook
# source /usr/share/doc/find-the-command/ftc.bash

alias emacs-debug-wayland='WAYLAND_DEBUG=1 emacs --fg-daemon > $HOME/.cache/log/emacs.wayland.`date +%Y-%m%d-%H%M`.log 2>&1'
#+end_src

*** Shell Prompt

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
if [ "$TERM" == "dumb" ]; then
    PS1='$ '
else
    if [ -n "$GUIX_ENVIRONMENT" ]
    then
        PS1='\[\033[1;33m\]\A'' \[\033[1;32m\]''\u''\[\033[31m\]''@''\[\033[1;36m\]''\h \[\033[31m\]::''\[\033[1;33m\] \w''\[\033[31m\] [''\[\033[1;00m\]env''\[\033[31m\]] :: \[\033[00m\]'
    else
        PS1='\[\033[1;33m\]\A'' \[\033[1;32m\]''\u''\[\033[31m\]''@''\[\033[1;36m\]''\h \[\033[31m\]::''\[\033[1;33m\] \w''\[\033[31m\] :: \[\033[00m\]'
    fi
fi

#+end_src

*** Color

+ Protesilaos: [[file:/data/ecto/x.files/protesilaos/dotfiles/shell/.bashrc::Colourise man pages][font & color config for man]]
+ =man termcap= for an explanation of codes
+ example dircolors output: [[file:/data/ecto/x.files/benmezger/dotfiles/dot_dircolors][benmezger dircolors]]

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[00;44;37m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'
#+end_src

*** GPG/SSH

#+begin_src sh :tangle .bashrc :shebang #!/bin/bash
unset SSH_AGENT_PID
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
  export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
fi
#+end_src

*** Direnv

Load at end of =.bashrc=

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
[[ -e "$(command -v direnv)" ]] && eval "$(direnv hook bash)"
#+end_src

Reload =direnvrc= with =direnv reload=

**** Python Direnv

This method is compatible with the others, so a project on one laptop with
=pyenv= and lacking the =pyenv-virtualenv= plugin will simply need to change
=.envrc=. Both should be able to use =layout python=.

***** Using [[https://github.com/direnv/direnv/wiki/Python#venv-stdlib-module][layout python3]] (uses venv stdlib module)

Specify with =layout python3=

This directive causes a virtualenv to be created at
=$PWD/.direnv/python-$python_version=.

***** Using [[https://github.com/direnv/direnv/wiki/Python#poetry][layout pyenv]]

Requires [[github:pyenv/pyenv][pyenv/pyenv]]

Specify with =layout pyenv $python_version=

This directive still installs python packages in the virtualenv at
=$PWD/.direnv/python-$python_version=.

***** Using =layout pyenv $python_version=

Requires [[github:pyenv/pyenv-virtualenv][pyenv-virtualenv]]

Specify with =layout virtualenv= and =layout activate= in a project's =.envrc=

#+begin_src shell
# -*- mode: sh; -*-
# (rootdir)/.envrc : direnv configuration file
# see https://direnv.net/
# pyversion=$(head .python-version)
# pvenv=$(head     .python-virtualenv)
pyversion=2.7.14
pvenv=myproject

use python ${pyversion}
# Create the virtualenv if not yet done
layout virtualenv ${pyversion} ${pvenv}
# activate it
layout activate ${pvenv}-${pyversion}
#+end_src

This method requires adding the following to =.config/direnv/direnvrc=

#+begin_src sh :tangle .config/direnv/direnvrc :shebang #!/bin/sh
# use a certain pyenv version
use_python() {
    if [ -n "$(which pyenv)" ]; then
        local pyversion=$1
        pyenv local ${pyversion}
    fi
}

layout_virtualenv() {
    local pyversion=$1
    local pvenv=$2
    if [ -n "$(which pyenv virtualenv)" ]; then
        pyenv virtualenv --force --quiet ${pyversion} ${pvenv}-${pyversion}
    fi
    pyenv local --unset
}

layout_activate() {
    if [ -n "$(which pyenv)" ]; then
        source $(pyenv root)/versions/$1/bin/activate
    fi
}
#+end_src

Adding this to =.direnvrc= will cause new environments to be created in:

=$(pyenv root)/versions/$python_version/$virtualenv_name=.

These environments can be shared ... potentially leaded to some isolated
dependency/build concerns (e.g. tensorflow with/out GPU or installing a set of
dependencies not satisfied by what's already installed). It doesn't share
installation roots.

However, since =direnv= use of functions named =use_.*= is special, I'm not
quite sure how well these methods mix.

***** Using [[https://github.com/direnv/direnv/wiki/Python#poetry][layout poetry]]

Requires [[github:python-poetry/poetry][python-poetry/poetry]] to be [[https://python-poetry.org/docs/#installing-with-the-official-installer][installed]]. This method is helpful when
working on a python lib, since it isolates the installation into.

Specify with =layout poetry=

#+begin_src sh :tangle .config/direnv/direnvrc :shebang #!/bin/sh
layout_poetry() {
    PYPROJECT_TOML="${PYPROJECT_TOML:-pyproject.toml}"
    if [[ ! -f "$PYPROJECT_TOML" ]]; then
        log_status "No pyproject.toml found. Executing \`poetry init\` to create a \`$PYPROJECT_TOML\` first."
        poetry init
    fi

    if [[ -d ".venv" ]]; then
        VIRTUAL_ENV="$(pwd)/.venv"
    else
        VIRTUAL_ENV=$(poetry env info --path 2>/dev/null ; true)
    fi

    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
        log_status "No virtual environment exists. Executing \`poetry install\` to create one."
        poetry install
        VIRTUAL_ENV=$(poetry env info --path)
    fi

    PATH_add "$VIRTUAL_ENV/bin"
    export POETRY_ACTIVE=1
    export VIRTUAL_ENV
}
#+end_src

*Compatibility with pyenv:* Poetry will use the python it encounters first in
your path if =virtualenvs.prefer-active-python= is set, so it should use the one
that =pyenv= hands it via its shims.

See [[https://python-poetry.org/docs/configuration#configuration][Configuration]] and [[https://python-poetry.org/docs/managing-environments/][Managing Environments]].

**** Guix Direnv


Add =use guixs= to direnv capabilities in =.envrc=. Thanks [[https://sr.ht/~abcdw/rde/][abcdw/RDE]].

#+begin_src sh :tangle .config/direnv/direnvrc :shebang #!/bin/sh
# when using guix environment in a project, the downloaded environment
# will be cached in ./.guix-profile. delete it to update the profile
#
# https://github.com/direnv/direnv/wiki/GNU-Guix
use_guix() {
  local cache_dir="$(direnv_layout_dir)/.guix-profile"
  if [[ -e "$cache_dir/etc/profile" ]]; then
    # shellcheck disable=SC1091
    source "$cache_dir/etc/profile"
  else
    mkdir -p "$(direnv_layout_dir)"
    eval "$(guix environment --root="$cache_dir" "$@" --search-paths)"
  fi
}

# guix environment is being deprecated
use_guixs() {
  eval \"$(guix shell \"$@\" --search-paths)\"
}

# NOTE need to install the profile with `guix environment --root`
# - then it's available to use with guix shell?
use_guixs_cached() {
  echo "$(direnv_layout_dir)"
  local cache_dir="$(direnv_layout_dir)/.guix-profile"
  if [[ -e "$cache_dir/etc/profile" ]]; then
    # shellcheck disable=SC1091
    source "$cache_dir/etc/profile"
  else
    mkdir -p "$(direnv_layout_dir)"
    eval "$(guix shell --root="$cache_dir" "$@" --search-paths)"
  fi
}
#+end_src



** Bash

+ GNU [[https://www.gnu.org/software/bash/manual/bash.html][manual]]

*** =.bash_profile=

In case an installation automatically creates =.bash_profile=

#+begin_src sh :tangle .bash_profile :shebang #!/bin/sh
if [ -f $HOME/.profile ]; then . $HOME/.profile; fi
#+end_src

** Zsh

* Environment

** main

#+begin_src shell

#+end_src

** devtools

#+begin_src scheme :tangle ".config/guix/manifests/devtools.scm"
(specifications->manifest
;;** git
 '("git"
  "git-lfs"
  "git-repo"

;;** fetch
  "curl"

  ;; for emacs pdf-tools
  ;; "cairo"
  ;; "libpng"
  ;; "poppler"

;;** for pyenv builds

;; I thought some of these were already brought in
  "zlib"
  "libffi"
  "xz"
  "expat"
  "libxml2"
  "bzip2"
  "gdbm"

;; I want to learn TCL anyways, but maybe this should be in
;; another profile
  "tk"
  "ncurses"

;;** pkg metadata
  "pkg-config"

;;** build essential
  "gettext"
  "autoconf"
  "automake"
  "glibc"
  "gcc-toolchain"
  "cmake"
  "make"
  "perl"

;;** lib
  "libtool"

;;** tty
  "libvterm"
  "screen"

;;** crypt/hash
  "libxcrypt"

;;** environment
  "direnv"
  "stow"

;;** log
  "rsyslog"

;;** search
  "fd"
  "ripgrep"
  "the-silver-searcher"

;;** media
  ;; TODO consider moving to a media profile
  "ffmpeg"

;;** compute
  ;; TODO move openblas to a data science profile?
  "openblas"
  "lapack"

;;** data
  "jq"
  "sqlite"

;;** file
  "tree"
  "file"
  "perl-image-exiftool"
  "lsof"
  "lsofgraph"

;;** disk
  "btrfs-progs"

;;** data vis
  "plantuml"
  "graphviz"

;;** ssh
  "openssh"
  "openssl"
  "rsync"

;;** compression
  "zip"
  "unzip"
  "patool"
  "p7zip"

;;** vm
  "virt-manager"

;;** network
  "bind:utils"

  ;; matlab installer is broken if /bin/pwd doesn't exist
  ;; - it accounts for legacy_unix and BSD and 8 levels of links
  ;;   (for continuous integration?)
  ;; - ... and i think it checks for modifications
  ;; - i tried strace and gdb/disassembly ... nothing
  ;; - the zip file also doesn't unpack correctly

;;** octave
  "octave"
  ))
#+end_src

** devdebug

#+begin_src scheme :tangle ".config/guix/manifests/devdebug.scm"
(specifications->manifest
    '(
      "gdb"
      "patchelf"
      "ltrace"
      "strace"
      ;; "ftrace"
      ;; "uftrace"
      "traceroute"
      "sysprof"
      ;; "perf"
      ;; "bpftrace"
      ;; "elfutils"

      ;; "kernelshark"
      ;; "traceshark"
      ;; "babeltrace"
      ;; "tracecompass"

      ;; "hddtemp"
      ;; "lmsensors"

      "gparted"
      "mmc-utils"
      "f3"

      ;; i2c needs a guix service, which requires a kernel module
      ;; - see guix system OS declarations
      "i2c-tools"
      "ddcutil"
      "ddcui"

      "tcpdump"
      ))
#+end_src

** netdebug

#+begin_src scheme :tangle ".config/guix/manifests/netdebug.scm"
(specifications->manifest
 '(
   "arp-scan"
   ))
#+end_src

** Yubikey

#+begin_src scheme :tangle ".config/guix/manifests/yubikey.scm"
(specifications->manifest
 '("yubikey-personalization"
   "python-yubikey-manager"
   ;; "libyubikey"
   "yubico-piv-tool"
   ;; "yubico-pam"
   ;; "pam-u2f"
   "libu2f-host"
   "pinentry-tty"
   ;; "opensc" ;;?
   )
 )
#+end_src

** XDG

I can't really imagine a desktop/terminal context where I wouldn't want XDG
utils in the environment, but this is split out anyways...

#+begin_src scheme :tangle .config/guix/manifests/xdg.scm

(specifications->manifest
    '(
      "xdg-utils"
      "xdg-user-dirs"

      "libinput"
      "xinput"

      "xset"
      "xrdb"
      "xhost"
      "xss-lock"
      "xscreensaver"

      "xrandr"
      "arandr"
      "autorandr"

      "trash-cli"

      "xwallpaper"

      ;; notifications
      ;; sounds: .guix-extra-profiles/xdg/xdg/share/sounds
      "libnotify"  ; For notify-send
      "libcanberra"
      "sound-theme-freedesktop"

      "flatpak-custom"     ;; flatpak with custom installations
      "xdg-desktop-portal"
      "xdg-desktop-portal-gtk"

      "xdg-dbus-proxy"     ;; for Flatpak
      "gtk+:bin"           ;; for gtk-launch
      "glib:bin"           ;; for gio-launch-desktop
      "shared-mime-info"   ;; for mimes

      "compton"
      ;;"redshift"
      "gucharmap"
      "fontmanager"
      "brightnessctl"

      ;; audio device control
      "alsa-utils"
      "pavucontrol"

      ;; chat
      "weechat"

      "fcitx5"
      "anthy"
      "fcitx5-anthy"
      "fcitx5-configtool"
      "fcitx5-chinese-addons"
      "fcitx5-material-color-theme"
      "fcitx5-gtk"
      "fcitx5-gtk4"
      "fcitx5-qt"
    ))

#+end_src

+ compton :: an alternative compositor for X
  - incompatible in Wayland, since it doesn't offer modular compositors
+ redshift :: control color temperature according to surroundings.
  - requires =libxcb= X11 client lib
  - for wayland: =gammastep= or =wlsunset=
+ gucharmap :: unicode character map (GTK)
+ fontmanager :: provides GTK tools to aid configuration of fonts
+ brightnessctl :: lightweight brightness control tool

** XKB

#+begin_src scheme :tangle .config/guix/manifests/xkb.scm
(specifications->manifest
 '(
   "xkb"
   "xkbcomp"
   "xkeyboard-config"
   "setxkbmap"

   "xev"
   "xkb-switch"
   "xkblayout"
   "xkbutils"
   "xkbprint"

   ;; "xkbevd"
   ))
#+end_src

** Languages

Manifests for language environments

* TUI

** Env

This section should configure scripts and a guix profile intended to be loaded
in a terminal-only interface.

#+begin_src scheme :tangle .config/guix/manifests/tui-env.scm
(specifications->manifest
 '(
   ;"htop"
   ;"lnav"
   ))
#+end_src

** Apps

#+begin_src scheme :tangle .config/guix/manifests/tui-apps.scm
(specifications->manifest
 '(
   ;"lnav"
   ))
#+end_src

*** Htop

*** LNAV

+ [[https://docs.lnav.org/en/latest/formats.html][Docs]]
  - The =$HOME/.config/lnav/= directory should exist before =.dotfiles= is stowed.
  - It contains state, history, views and usage data.
  - Only the configs/formats should be added to git.
+ [[https://docs.lnav.org/en/latest/formats.html][New Formats]] can be installed into =$HOME/.config/lnav/formats/installed=
  - from files: =lnav -i myformat.json=
  - from a repository
  - from the [[https://github.com/tstack/lnav-config][extra]] repository: =lnav -i extra=
+ Custom formats can be added into =$HOME/.dotfiles/.config/lnav/formats/=
+ New Configs can be installed into =$HOME/.config/lnav/configs/installed/=
+ Custom configs can be added into =$HOME/.dotfiles/.config/lnav/configs/=

#+begin_src sh :results output :exports none
lnav -i extra
#+end_src
