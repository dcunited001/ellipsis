:PROPERTIES:
:ID:       db35e2a9-9fd2-41b9-9c5f-81431fdb8860
:END:
#+title: Bash Configuration
#+description:
#+startup: content
#+property: header-args        :tangle-mode (identity #o444) :mkdirp yes
#+property: header-args:sh     :tangle-mode (identity #o555) :mkdirp yes
#+property: header-args:bash   :tangle-mode (identity #o555) :mkdirp yes
#+property: header-args:scheme :tangle-mode (identity #o644) :mkdirp yes :comments link
#+options: toc:nil

* Table Of Contents :TOC_2_gh:
- [[#environment][Environment]]
  - [[#org-variables][Org Variables]]
  - [[#xdg-shim][XDG Shim]]
  - [[#xdg-user-dirs][XDG User Dirs]]
  - [[#profile-hooks][Profile Hooks]]
  - [[#rc-hooks][RC Hooks]]
  - [[#apps][Apps]]
  - [[#xdg][XDG]]
  - [[#flatpak][Flatpak]]
  - [[#steam--proton][Steam & Proton]]
  - [[#guix][Guix]]
  - [[#fcitx][FCITX]]
  - [[#gtk][GTK]]
  - [[#qt][QT]]
  - [[#emacs][Emacs]]
- [[#languages][Languages]]
  - [[#java][Java]]
  - [[#julia][Julia]]
  - [[#node][Node]]
  - [[#graphviz][Graphviz]]
- [[#profile][Profile]]
  - [[#profile-1][=.profile=]]
- [[#alacritty][Alacritty]]
- [[#shells][Shells]]
  - [[#rc][RC]]
  - [[#bash][Bash]]
  - [[#zsh][Zsh]]
- [[#environment-1][Environment]]
  - [[#main][Main]]
  - [[#xdg-1][XDG]]
  - [[#direnv][Direnv]]
  - [[#languages-1][Languages]]
- [[#tui][TUI]]
  - [[#env][Env]]
  - [[#apps-1][Apps]]
  - [[#guix-1][Guix]]

**** TODO double check =.bash*= permissions
**** TODO figure out how to circumvent saving readonly files
- this is needed to easily detangle files

* Environment
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** Org Variables

These are intended to be a list of system-specific variables that enable some
portability: for me, across systems or networks. The idea is to containerize
this as much as possible, at least for myself, so the paths/etc work like
[[https://12factor.net/config][12Factor config vars]] or Helm values.

*** Paths

+ _DF :: path to dotfiles
+ _DATA :: path to data mount
  - not final
+ _XS :: path to "excess" mount
  - stored outside of home/root partitions
    * my hard disk is small and i has not enough disks to rice good
  - will become modeled on XDG-style or posix style paths
  - this will migrate to replace references to =$_DATA= (at least partially)

#+begin_quote
Note: getting this to tangle properly requires =C-c C-v C-t=
#+end_quote

#+name: bash-env-bindings
| _DF     | $HOME/.dotfiles |
| _DATA   | /data           |
| _XS     | /data           |
| _ECTO   | /data/ecto      |
| _REPO   | /data/repo      |
| _STEAM  | /steam          |
| _GUIX   | /gnu            |
| DOOMDIR | $HOME/.doom.d   |

#+name: bash-env-bindings_GEN
#+begin_src emacs-lisp :tangle no :var bindings=bash-env-bindings :results output :exports none
(mapcar #'(lambda (row)
           (princ (format "export %s=%s\n" (cl-first row) (cl-second row)))) bindings)
#+end_src

**** TODO move =$_ECTO= and =$_REPO= variables into their own scripts :dotfiles:bash:
+ these need to be set differently on various machines, as not all of them may
  have =/data/ecto= or =/data/repo= mounted in the same place
  - for now, this will probably be true (syncthing will push data around)
  - but if these paths change, the links _from_ org-roam docs will break
  - there are options for this, including an automated task for replacing
    absolute links with relative links.
  - for most projects in =/data/repo= XML's, =/data/org= is expected to share a
    common parent directory, so relative links should always work.

#+RESULTS: bash-env-bindings_GEN
: export _DF=$HOME/.dotfiles
: export _DATA=/data
: export _XS=/data
: export _ECTO=/data/ecto
: export _REPO=/data/repo
: export _STEAM=/steam
: export _GUIX=/gnu

#+name: bash-env-bindings_CALL
#+call: bash-env-bindings_GEN()

#+RESULTS: bash-env-bindings_CALL
: export _DF=$HOME/.dotfiles
: export _DATA=/data
: export _XS=/data
: export _ECTO=/data/ecto
: export _REPO=/data/repo
: export _STEAM=/steam
: export _GUIX=/gnu

#+begin_src sh :tangle .profile :noweb yes :comments none :results none :exports none :shebang #!/bin/sh
<<bash-env-bindings_CALL()>>
#+end_src

#+RESULTS:

**** TODO set up =<<noweb>>= style templates?

** XDG Shim


+ =.xdg_shim.sh=
  - This file ensures XDG can be modified by user before the rest of =.profile= runs. It's necessary because =.config/sh= relies on XDG.
  - This script is not managed by =git= or =stow=

#+begin_src sh :tangle .xdg_shim.eg.sh :shebang #!/bin/sh
export XDG_CONFIG_HOME=$HOME/.config
#export XDG_CONFIG_DIRS=/etc/xdg
#export XDG_DATA_HOME=$HOME/.local/share
#export XDG_DATA_DIRS=/usr/local/share/:/usr/share/
#export XDG_STATE_HOME=$HOME/.local/state
#export XDG_CACHE_HOME=$HOME/.cache
#+end_src

***** TODO fix the above example script. these are XDG spec defaults, but sway will not startup...

** XDG User Dirs

This requires the =xdg-user-dirs= tool

See [[https://wiki.archlinux.org/title/XDG_user_directories][XDG User Directories]] for more info. This file allows directories like
=$HOME/Documents= to survive reinstallation of systems & home directories in a
sane way.



#+begin_src shell :tangle .config/user-dirs.dirs

#XDG_DESKTOP_DIR="$HOME/Desktop"
#XDG_DOWNLOAD_DIR="$_DATA/Downloads"
XDG_DOCUMENTS_DIR="$_DATA/xdg/Documents"
XDG_MUSIC_DIR="$_DATA/xdg/Music"
XDG_PICTURES_DIR="$_DATA/xdg/Pictures"
XDG_VIDEOS_DIR="$_DATA/Videos"
XDG_TEMPLATES_DIR="$_DATA/Templates"
#XDG_PUBLICSHARE_DIR="$_DATA/Public"

#+end_src

**** TODO run =xdg-user-dirs= tool on startup


** Profile Hooks

+ =.config/sh/=
  - These scripts are not managed by =git= or =stow=
  - _before_profile.d.sh :: remaps values before =profile.d/*.sh= scripts run
  - _load_profile.d.sh :: a list of scripts loaded by =*profile=
  - _after_profile.d.sh :: remaps values after =_load_profile.d.sh= has run
+ =.config/sh/profile.d/=
  - These scripts are managed by =git= and =stow=.

**** Default Scripts

Manually copy. Stow deploys, but to no effect (no need to mess with =.stowrc= etc.)

#+begin_src sh :tangle .config/sh/_before_profile.eg.sh :shebang #!/bin/sh
# This is the default _before_profile.d.sh script
#+end_src

Note: Guix extra profiles should be loaded first in this list of
scripts. Running them with a wildcard or in any order is possible, but
it is assumed that the sequence is structured.

+ Using this approach with Guix profiles where the WM dependencies are
  loaded separeately should enable a user to choose between multiple
  window managers, as long as the login manager or display manager can
  set the list of =extra_guix_profiles= before loading the profile.
  - these scripts and the Guix Profiles would need to be tweaked to do
    so, as well as how wayland/x11-related packages are grouped.
  - In this way, a user can configure both X11 and Wayland-based window
    managers on the same system without having the package dependencies
    affect one another.

#+begin_src sh :tangle .config/sh/_load_profile.eg.sh :shebang #!/bin/sh
# This is the default _load_profile.d.sh script

__scripts=(
"guix.sh"   
"apps.sh"
"xdg.sh"
"gtk.sh"
"qt.sh"
"emacs.sh"
"java.sh"
"julia.sh"
"graphviz.sh"
    )

for __script in ${__scripts[@]}; do
    [[ -f $DOTS_PROFILE_D/$__script ]] && . $DOTS_PROFILE_D/$__script
done

unset $__script

#+end_src

** RC Hooks

These scripts are intentionally left blank.

+ =.config/sh/=
  - _before_rc.d.sh :: remaps values before =rc.d/*.sh= scripts run
  - _load_rc.d.sh :: a list of scripts loaded by =*rc=
  - _after_rc.d.sh :: remaps values after =_load_rc.d.sh= has run
+ =.config/sh/rc.d/=

** Apps

#+begin_src sh :tangle .config/sh/profile.d/apps.sh :shebang #!/bin/sh
export MAIL=geary
export BROWSER=firefox
export TERM=alacritty

# TODO: update to use terminal emacsclient
export VISUAL=emacsclient
export EDITOR=/usr/bin/vim
#+end_src

** XDG

#+begin_src sh :tangle .config/sh/profile.d/xdg.sh :shebang #!/bin/sh
#export XDG_SESSION_TYPE=wayland
#export XDG_SESSION_DESKTOP=sway
#export XDG_CURRENT_DESKTOP=sway

# TODO set in login manager script
#export XDG_CURRENT_DESKTOP=i3
#+end_src

** Flatpak

#+begin_src sh :tangle .config/sh/profile.d/xdg.sh :shebang #!/bin/sh
export XDG_DATA_DIRS="/flatpak/.local/share/flexpak/exports/share:${XDG_DATA_DIRS}"
#+end_src

*** Setting the User Install to a Custom Install

Flatpak docs imply that =FLATPAK_USER_DIR= can be used to set a custom location for the user's flatpak installtion, but i have not tested it. (this approach is separate from the above)

#+begin_src sh :tangle .config/sh/profile.d/xdg.sh :shebang #!/bin/sh

# Installation should be linked to
#export FLATPAK_CONFIG_DIR=/flatpak/.config/flatpak
#export FLATPAK_UESR_DIR=/flatpak/.local/share/flatpak

#+end_src

*** The Goal

After creating & mounting a =/flatpak= disk, syncthing can push centrally
updates to new flatpak installations to =/flatpak/syncpak123=:

+ Here they can be managed via =flatpak --installation /flatpak/syncpak123= on
  the server where flatpak is hosted
  - or, more carefully, managed from some of the local servers, assuming a consistent flatpak environment on the syncthing clients.
  - these clients (or the client disk permissions) should set some of the
    syncthing permissions to read only.
  - on the client, =XDG_CONFIG_DIR= is always read after =XDG_CONFIG_HOME=, so
    for any app, its configs can be transparently overridden, without affecting the synced flatpak installations.
+ Then the custom flatpak installations can be linked into the local system via
  =stow=, where a few modifications to =XDG= vars will pick them up.

  This method has not been tested yet. However, since they are plain binaries, then they should be syncable.

** Steam & Proton

#+begin_src sh :tangle .config/sh/profile.d/steam.sh :shebang #!/bin/sh

#+end_src

** Guix

=GUIX_AUTOLOAD_PROFILES=(desktop i3)= should be set in the script run
by the login/display manager, but not exported.

#+begin_src sh :tangle .config/sh/profile.d/guix.sh :shebang #!/bin/sh
alias guix-all-profiles='find /gnu/store -maxdepth 1 -type d -name "*profile" -exec ls -al \{\} +'
alias guix-main="$HOME/.config/guix/current/bin/guix"

GUIX_PROFILE="$HOME/.guix-profile"
. "$GUIX_PROFILE/etc/profile"

# GUIX_AUTOLOAD_PROFILES=(desktop i3)
for i in ${GUIX_AUTOLOAD_PROFILES[@]}; do
  echo $i
  profile=$HOME/.guix-extra-profiles/$i/$i
  if [ -f "$profile"/etc/profile ]; then
    GUIX_PROFILE="$profile"
    . "$GUIX_PROFILE"/etc/profile
  fi
  unset $profile
done

export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale
#+end_src

**** TODO move loading some guix profiles to =.bashrc=

**** TODO create =.bashrc= scripts that load =$PATH= for specific applications that might share dependencies.
+ e.g. custom builds of OBS and VLC (common dep. ffmpeg)
+ can start bash with =--rcfile= ... but how to do this in GUI?
+ for gui apps, the best way to handle this is with =x11-docker=
+ is there a better way to avoid cross-environment contamination? (not a problem if the environments are isolated into different users)


** FCITX

#+begin_src sh :tangle .local/share/applications/fcitx5-launch-debug.sh :shebang #!/bin/sh
fcitx5 --verbose default=5 -D > $HOME/.cache/log/fcitx5.$(date +%s).log 2>&1
#+end_src

** GTK

#+begin_src sh :tangle .config/sh/profile.d/gtk.sh :shebang #!/bin/sh
# GTK
export GTK2_RC_FILES="$HOME/.gtkrc-2.0"

#export GDK_BACKEND=wayland             # this can prevent programs from starting (e.g. chromium and electron apps). therefore, this should be set per app instead of globally.
#+end_src

** QT

#+begin_src sh :tangle .config/sh/profile.d/qt.sh :shebang #!/bin/sh

# Qt
#export QT_QPA_PLATFORMTHEME="qt5ct"
#export QT_QPA_PLATFORM=wayland
#export QT_WAYLAND_FORCE_DPI=physical
#export QT_WAYLAND_DISABLE_WINDOWDECORATION=1

#+end_src

** Emacs

#+begin_src sh :tangle .config/sh/profile.d/emacs.sh :shebang #!/bin/sh

export ORG_DIRECTORY=/data/org
#export ORG_AGENDA_ROOT=
#export ORG_ROAM_ROOT

#+end_src

* Languages
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

#+begin_src sh :tangle no

#+end_src

** Java

#+begin_src sh :tangle .config/sh/profile.d/java.sh :shebang #!/bin/sh
export _JAVA_AWT_WM_NONREPARENTING=1

# This sets Java Swing UI -> GTK
#export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel $_JAVA_OPTIONS"

#+end_src

** Julia

Julia [[https://docs.julialang.org/en/v1/manual/environment-variables/][Environment Variables]]

#+begin_src sh :tangle .config/sh/profile.d/julia.sh :shebang #!/bin/sh
export JULIA_SHELL=/bin/sh
export JULIA_EDITOR=vim
#+end_src

These auto-expand empty entries, but =JULIA_LOAD_PATH= can't be set if empty.

#+begin_src sh :tangle .config/sh/profile.d/julia.sh :shebang #!/bin/sh
#export JULIA_LOAD_PATH="$JULIA_LOAD_PATH"
export JULIA_DEPOT_PATH="$_DATA/lang/.julia:$JULIA_DEPOT_PATH"
#+end_src

** Node

#+begin_src sh :tangle .config/sh/profile.d/node.sh :shebang #!/bin/sh
[[ -f /usr/share/nvm/init-nvm.sh ]] && source /usr/share/nvm/init-nvm.sh
#+end_src

** Graphviz

#+begin_src sh :tangle .config/sh/profile.d/graphviz.sh :shebang #!/bin/sh
export GRAPHVIZ_DOT=~/.guix-extra-profiles/desktop/desktop/bin/dot
#+end_src

* Profile
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** =.profile=

If =.bash_profile= does not exist, =.profile= will be sourced instead. When bash is invoked as =sh=, then it will source =.profile= anyways.

*** XDG Shim

#+begin_src sh :tangle .profile :shebang #!/bin/sh
# If XDG variables need to change from default, set them here.
[[ -f ~/.xdg_shim.sh ]] && source $HOME/.xdg_shim.sh

#[[ -z $XDG_CONFIG_HOME ]] && export XDG_CONFIG_HOME=$HOME/.config
#[[ -z $XDG_CONFIG_DIRS ]] && export XDG_CONFIG_DIRS=/etc/xdg
#[[ -z $XDG_DATA_HOME ]] && export XDG_DATA_HOME=$HOME/.local/share
#[[ -z $XDG_DATA_DIRS ]] export XDG_DATA_DIRS=/usr/local/share/:/usr/share/
#[[ -z $XDG_STATE_HOME ]] && export XDG_STATE_HOME=$HOME/.local/state
#[[ -z $XDG_CACHE_HOME ]] && export XDG_CACHE_HOME=$HOME/.cache

export PATH=$HOME/.local/bin:$HOME/.bin:$PATH
#+end_src

#+RESULTS:

*** Before Profile.d

#+begin_src sh :tangle .profile :shebang #!/bin/sh
export DOTS_CFG_SHELL=$XDG_CONFIG_HOME/sh
export DOTS_PROFILE_D=$DOTS_CFG_SHELL/profile.d

[[ -f $DOTS_CFG_SHELL/_before_profile.d.sh ]] && source $DOTS_CFG_SHELL/_before_profile.d.sh

[[ -f $DOTS_CFG_SHELL/_load_profile.d.sh ]] && source $DOTS_CFG_SHELL/_load_profile.d.sh
#+end_src

#+RESULTS:

*** TODO Process

#+begin_src sh :tangle .profile :shebang #!/bin/sh
# Browser
#export MOZ_ENABLE_WAYLAND=1             # only start firefox in wayland mode and no other GTK apps
export MOZ_DBUS_REMOTE=1                # fixes firefox is already running, but is not responding

# clutter
#export CLUTTER_BACKEND=wayland          # this can prevent programs from starting. therefore, this should be set per app instead of globally.


# elementary
#export ECORE_EVAS_ENGINE=wayland-egl
#export ELM_ENGINE=wayland_egl
#export ELM_DISPLAY=wl
#export ELM_ACCEL=gl

# TODO: Accessibility
# http://library.gnome.org/devel/accessibility-devel-guide/stable/gad-how-it-works.html.en

# disables accessibility
export NO_AT_BRIDGE=1

# Bemenu (not configured in sway)
#export BEMENU_BACKEND=wayland

# sdl
#export SDL_VIDEODRIVER=wayland        # this can prevent programs from starting old sdl games. therefore, this should be set per app instead of globally.

#+end_src

*** After Profile.d

#+begin_src sh :tangle .profile :shebang #!/bin/sh
[[ -f $DOTS_CFG_SHELL/_after_profile.d.sh ]] && source $DOTS_CFG_SHELL/_after_profile.d.sh
#+end_src

*** Source =.bashrc=

Try to source =.bashrc=. If the shell is non-interactive, =.bashrc= will return

#+begin_src sh :tangle .profile :shebang #!/bin/sh
[[ -f $HOME/.bashrc ]] && . $HOME/.bashrc
#+end_src

* Alacritty

***** TODO trying to load =/bin/sh= with alacritty has a few problems

- either it inherits the =i3= process's environment (and thus exactly the
  =GUIX_AUTOLOAD_PROFILES= set there)
  - or =--login= is specified and it dumps this process's environment and has NO
    loaded guix profiles. this latter is preferable, but requires:
    - either re-sourcing =.config/sh/profile.d/guix.sh= after setting
      =GUIX_AUTOLOAD_PROFILES=
      - this results in the user's =$HOME/.guix-profile= being sourced twice
    - or loading/unloading the =GUIX_AUTOLOAD_PROFILES= via =direnv=
- for now, alacritty is set to avoid the =--login= flag

#+begin_src sh :tangle .alacritty_profile :shebang #!/bin/sh
GUIX_AUTOLOAD_PROFILES=(i3 desktop xdg devtools)

[[ -f $HOME/.profile ]] && source $HOME/.profile
#+end_src

***** TODO move direnv into the user profile

* Shells
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** RC

If not running interactively, return

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
[[ $- != *i* ]] && return
#+end_src


#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias diff='diff --color=auto'
alias sysu='systemctl --user'

alias emacs-debug-wayland='WAYLAND_DEBUG=1 emacs --fg-daemon > ~/.cache/log/emacs.wayland.`date +%Y-%m%d-%H%M`.log 2>&1'

PS1='[\u@\h \W]\$ '

# TODO: source ~/.config/sh/rc.d files here
#+end_src

#+RESULTS:

**** TODO alias =rg= for grep

*** Color

+ Protesilaos: [[file:/data/ecto/x.files/protesilaos/dotfiles/shell/.bashrc::Colourise man pages][font & color config for man]]
+ =man termcap= for an explanation of codes
+ example dircolors output: [[file:/data/ecto/x.files/benmezger/dotfiles/dot_dircolors][benmezger dircolors]]

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[00;44;37m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'
#+end_src

** Bash

*** =.bash_profile=

In case an installation automatically creates =.bash_profile=

#+begin_src sh :tangle .bash_profile :shebang #!/bin/sh
if [ -f ~/.profile ]; then . ~/.profile; fi
#+end_src

** Zsh

**** TODO introduce hooks that integrate with the RC
+ [ ] =_before_zprofile= and =_after_zprofile=
+ [ ] =_before_zshrc= and =_after_zshrc=


[[file:/data/ecto/x.files/protesilaos/dotfiles/shell/.bashrc::Colourise man pages][orgit-test]]

* Environment

** Main

#+begin_src scheme :tangle ".config/guix/manifests/devtools.scm"

(specifications->manifest
'("git"
  "gcc-toolchain"
  "git-repo"
  "direnv"

  "fd"
  "ripgrep"

  "plantuml"
  "graphviz"

  "htop"
  "stow"
  ))

#+end_src

**** TODO perhaps move gcc-toolchain to a separate profile



** XDG

I can't really imagine a desktop/terminal context where I wouldn't want XDG
utils in the environment, but this is split out anyways...

#+begin_src scheme :tangle .config/guix/manifests/xdg.scm

(specifications->manifest
    '(
      "xdg-utils"
      "xdg-user-dirs"
    ))

#+end_src


** Direnv

** Languages

*** Casual Python

Return a casual python environment

#+begin_src scheme :tangle .config/guix/manifests/casual-python.scm
(specifications->manifest '("python"))
#+end_src


* TUI

** Env

This section should configure scripts and a guix profile intended to be loaded
in a terminal-only interface.

#+begin_src scheme :tangle .config/guix/manifests/tui-env.scm
(specifications->manifest
 '(
   ;"htop"
   ;"lnav"
   ))
#+end_src

** Apps

#+begin_src scheme :tangle .config/guix/manifests/tui-apps.scm
(specifications->manifest
 '(
   ;"lnav"
   ))
#+end_src

*** HTop

*** LNAV

+ [[https://docs.lnav.org/en/latest/formats.html][Docs]]
  - The =$HOME/.config/lnav/= directory should exist before =.dotfiles= is stowed.
  - It contains state, history, views and usage data.
  - Only the configs/formats should be added to git.
+ [[https://docs.lnav.org/en/latest/formats.html][New Formats]] can be installed into =$HOME/.config/lnav/formats/installed=
  - from files: =lnav -i myformat.json=
  - from a repository
  - from the [[https://github.com/tstack/lnav-config][extra]] repository: =lnav -i extra=
+ Custom formats can be added into =$HOME/.dotfiles/.config/lnav/formats/=
+ New Configs can be installed into =$HOME/.config/lnav/configs/installed/=
+ Custom configs can be added into =$HOME/.dotfiles/.config/lnav/configs/=

#+begin_src sh :results output :exports none
lnav -i extra
#+end_src

** Guix
