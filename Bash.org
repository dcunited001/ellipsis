:PROPERTIES:
:ID:       db35e2a9-9fd2-41b9-9c5f-81431fdb8860
:END:
#+title: Bash Configuration
#+description:
#+startup: content
#+property: header-args        :tangle-mode (identity #o444) :mkdirp yes
#+property: header-args:sh     :tangle-mode (identity #o555) :mkdirp yes
#+property: header-args:bash   :tangle-mode (identity #o555) :mkdirp yes
#+property: header-args:scheme :tangle-mode (identity #o644) :mkdirp yes :comments link
#+options: toc:nil

* Table Of Contents :TOC_2_gh:
- [[#environment][Environment]]
  - [[#org-variables][Org Variables]]
  - [[#xdg-shim][XDG Shim]]
  - [[#xdg-user-dirs][XDG User Dirs]]
  - [[#profile-hooks][Profile Hooks]]
  - [[#rc-hooks][RC Hooks]]
  - [[#apps][Apps]]
  - [[#xdg][XDG]]
  - [[#flatpak][Flatpak]]
  - [[#steam--proton][Steam & Proton]]
  - [[#guix][Guix]]
  - [[#fcitx5][FCITX5]]
  - [[#gtk][GTK]]
  - [[#qt][QT]]
  - [[#emacs][Emacs]]
- [[#languages][Languages]]
  - [[#java][Java]]
  - [[#node][Node]]
  - [[#graphviz][Graphviz]]
  - [[#python][Python]]
  - [[#julia][Julia]]
  - [[#matlab][Matlab]]
- [[#profile][Profile]]
  - [[#profile-1][=.profile=]]
- [[#alacritty][Alacritty]]
- [[#tools][Tools]]
  - [[#screen][Screen]]
- [[#shells][Shells]]
  - [[#rc][RC]]
  - [[#bash][Bash]]
  - [[#zsh][Zsh]]
- [[#environment-1][Environment]]
  - [[#main][main]]
  - [[#devtools][devtools]]
  - [[#devdebug][devdebug]]
  - [[#yubikey][Yubikey]]
  - [[#xdg-1][XDG]]
  - [[#languages-1][Languages]]
- [[#tui][TUI]]
  - [[#env][Env]]
  - [[#apps-1][Apps]]
  - [[#guix-1][Guix]]

* Environment
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** Org Variables

These are intended to be a list of system-specific variables that enable some
portability: for me, across systems or networks. The idea is to containerize
this as much as possible, at least for myself, so the paths/etc work like
[[https://12factor.net/config][12Factor config vars]] or Helm values.

*** Paths

+ _DF :: path to dotfiles
+ _DATA :: path to data mount
  - not final
+ _XS :: path to "excess" mount
  - stored outside of home/root partitions
    * my hard disk is small and i has not enough disks to rice good
  - will become modeled on XDG-style or posix style paths
  - this will migrate to replace references to =$_DATA= (at least partially)

#+begin_quote
Note: getting this to tangle properly requires =C-c C-v C-t=.

Changing the variables above requires evaluating the block below.
#+end_quote

#+name: bash-env-bindings
| _DF         | $HOME/.dotfiles            |
| _DATA       | /data                      |
| _XS         | /data                      |
| _LANG       | /data/lang                 |
| _ECTO       | /data/ecto                 |
| _REPO       | /data/repo                 |
| _STEAM      | /flatpak/steam             |
| _AGENDA     | /flatpak/agenda            |
| _GUIX       | /gnu                       |
| _WALLPAPERS | /data/xdg/wallpapers/anime |
| _FLATPAK    | /flatpak                   |
| DOOMDIR     | $HOME/.doom.d              |

#+name: bash-env-bindings_GEN
#+begin_src emacs-lisp :tangle no :var bindings=bash-env-bindings :results output :exports none
(mapcar #'(lambda (row)
           (princ (format "export %s=%s\n" (cl-first row) (cl-second row)))) bindings)
#+end_src

#+RESULTS: bash-env-bindings_GEN
#+begin_example
export _DF=$HOME/.dotfiles
export _DATA=/data
export _XS=/data
export _LANG=/data/lang
export _ECTO=/data/ecto
export _REPO=/data/repo
export _STEAM=/flatpak/steam
export _GUIX=/gnu
export _WALLPAPERS=/data/xdg/wallpapers/anime
export _FLATPAK=/flatpak
export DOOMDIR=$HOME/.doom.d
#+end_example

#+name: bash-env-bindings_CALL
#+call: bash-env-bindings_GEN()

#+RESULTS: bash-env-bindings_CALL
#+begin_example
export _DF=$HOME/.dotfiles
export _DATA=/data
export _XS=/data
export _ECTO=/data/ecto
export _REPO=/data/repo
export _STEAM=/steam
export _GUIX=/gnu
export _WALLPAPERS=/data/xdg/wallpapers/anime
export _FLATPAK=/flatpak
export _FLATPAK_NAME=flexpak
export DOOMDIR=$HOME/.doom.d
#+end_example

#+begin_src sh :tangle .profile :noweb yes :comments none :results none :exports none :shebang #!/bin/sh
<<bash-env-bindings_CALL()>>
#+end_src

#+RESULTS:

*** Create Paths

Once paths are set in your profile, you will need to do something like:



** XDG Shim


+ =.xdg_shim.sh=
  - This file ensures XDG can be modified by user before the rest of =.profile= runs. It's necessary because =.config/sh= relies on XDG.
  - This script is not managed by =git= or =stow=

#+begin_src sh :tangle .xdg_shim.eg.sh :shebang #!/bin/sh
export XDG_CONFIG_HOME=$HOME/.config
#export XDG_CONFIG_DIRS=/etc/xdg
#export XDG_DATA_HOME=$HOME/.local/share
#export XDG_DATA_DIRS=/usr/local/share/:/usr/share/
#export XDG_STATE_HOME=$HOME/.local/state
#export XDG_CACHE_HOME=$HOME/.cache
#+end_src

***** TODO fix the above example script. these are XDG spec defaults, but sway will not startup...

** XDG User Dirs

This requires the =xdg-user-dirs= tool

See [[https://wiki.archlinux.org/title/XDG_user_directories][XDG User Directories]] for more info. This file allows directories like
=$HOME/Documents= to survive reinstallation of systems & home directories in a
sane way.

#+begin_src sh :result none :eval no
dirsfile=$XDG_CONFIG_HOME/user-dirs.dirs

# overwrite (requires stow .)
echo > $dirsfile
echo "XDG_DOCUMENTS_DIR=\"$_DATA/xdg/Documents\"" >> $dirsfile
echo "XDG_MUSIC_DIR=\"$_DATA/xdg/Music\"" >> $dirsfile
echo "XDG_PICTURES_DIR=\"$_DATA/xdg/Pictures\"" >> $dirsfile
echo "XDG_VIDEOS_DIR=\"$_DATA/xdg/Videos\"" >> $dirsfile
echo "XDG_TEMPLATES_DIR=\"$_DATA/xdg/Templates\"" >> $dirsfile

# and ignore these
#XDG_DESKTOP_DIR="$_DATA/xdg/Desktop"
#XDG_DOWNLOADS_DIR="$_DATA/xdg/Downloads"
#XDG_PUBLICSHARE_DIR="$_DATA/xdg/Public"
#+end_src

*** Note

+ xdg-user-dirs-update will replace everything if anything is invalid (only =$HOME/yyy= or =/path/to/yyy= is valid)
+ it will autoupdate everything if any dirs don't exist


** Profile Hooks

+ =.config/sh/=
  - These scripts are not managed by =git= or =stow=
  - _before_profile.d.sh :: remaps values before =profile.d/*.sh= scripts run
  - _load_profile.d.sh :: a list of scripts loaded by =*profile=
  - _after_profile.d.sh :: remaps values after =_load_profile.d.sh= has run
+ =.config/sh/profile.d/=
  - These scripts are managed by =git= and =stow=.

**** Default Scripts

Manually copy. Stow deploys, but to no effect (no need to mess with =.stowrc= etc.)

#+begin_src sh :tangle .config/sh/_before_profile.eg.sh :shebang #!/bin/sh
# This is the default _before_profile.d.sh script
#+end_src

Note: Guix extra profiles should be loaded first in this list of
scripts. Running them with a wildcard or in any order is possible, but
it is assumed that the sequence is structured.

+ Using this approach with Guix profiles where the WM dependencies are
  loaded separeately should enable a user to choose between multiple
  window managers, as long as the login manager or display manager can
  set the list of =extra_guix_profiles= before loading the profile.
  - these scripts and the Guix Profiles would need to be tweaked to do
    so, as well as how wayland/x11-related packages are grouped.
  - In this way, a user can configure both X11 and Wayland-based window
    managers on the same system without having the package dependencies
    affect one another.

#+begin_src sh :tangle .config/sh/_load_profile.eg.sh :shebang #!/bin/sh
# This is the default _load_profile.d.sh script

__scripts=(
"guix.sh"   
"apps.sh"
"xdg.sh"
"gtk.sh"
"qt.sh"
"emacs.sh"
"java.sh"
"julia.sh"
"graphviz.sh"
"flatpak.sh"
    )

for __script in ${__scripts[@]}; do
    [[ -f $DOTS_PROFILE_D/$__script ]] && . $DOTS_PROFILE_D/$__script
done

unset $__script

#+end_src

** RC Hooks

These scripts are intentionally left blank.

+ =.config/sh/=
  - _before_rc.d.sh :: remaps values before =rc.d/*.sh= scripts run
  - _load_rc.d.sh :: a list of scripts loaded by =*rc=
  - _after_rc.d.sh :: remaps values after =_load_rc.d.sh= has run
+ =.config/sh/rc.d/=

** Apps

#+begin_src sh :tangle .config/sh/profile.d/apps.sh :shebang #!/bin/sh
export MAIL=geary
export BROWSER=firefox
export TERM=alacritty

# TODO: update to use terminal emacsclient
export VISUAL="emacsclient -c"
export EDITOR="emacsclient"
export ALTERNATE_EDITOR=vim
#+end_src

** XDG

#+begin_src sh :tangle .config/sh/profile.d/xdg.sh :shebang #!/bin/sh
#export XDG_SESSION_TYPE=wayland
#export XDG_SESSION_DESKTOP=sway
#export XDG_CURRENT_DESKTOP=sway

# TODO set in login manager script
#export XDG_CURRENT_DESKTOP=i3

# NOTE this fixes alacritty HiDPI
export WINIT_X11_SCALE_FACTOR=1
#+end_src

** Flatpak

Here, flatpak will be configured to use a custom installation on another
partition at =/flatpak/$USER=. To keep the flatpak app state on the same
partition, link =$HOME/.var= to =$FLATPAK_USER_VAR=.

#+begin_src sh :tangle .config/sh/profile.d/flatpak.sh :shebang #!/bin/sh
alias flatagenda="flatpak --installation=agenda"
alias flatsteam="flatpak --installation=steam"

export XDG_DATA_DIRS="/flatpak/dc/.local/share/flatpak/exports/share:${XDG_DATA_DIRS}"
# TODO move this to the guix package?
export XDG_DATA_DIRS="/flatpak/steam/.local/share/flatpak/exports/share:${XDG_DATA_DIRS}"
export XDG_DATA_DIRS="/flatpak/agenda/.local/share/flatpak/exports/share:${XDG_DATA_DIRS}"

export FLATPAK_USER_DIR=/flatpak/$(id -un)/.local/share/flatpak

# this is another variable for convenience (this var isn't used by flatpak)
export FLATPAK_USER_VAR=/flatpak/$(id -un)/.var

# Custom installations need to be configured here
# - /flatpak/steam :: $FLATPAK_CONFIG_DIR/installations.d/steam.conf
# export FLATPAK_CONFIG_DIR=/flatpak/.config/flatpak
export FLATPAK_CONFIG_DIR=/etc/flatpak

#+end_src

***** TODO figure out how to call xdg-open for flatpak apps


*** The Goal

After creating & mounting a =/flatpak= disk, syncthing can push centrally
updates to new flatpak installations to =/flatpak/syncpak123=:

+ Here they can be managed via =flatpak --installation /flatpak/syncpak123= on
  the server where flatpak is hosted
  - or, more carefully, managed from some of the local servers, assuming a consistent flatpak environment on the syncthing clients.
  - these clients (or the client disk permissions) should set some of the
    syncthing permissions to read only.
  - on the client, =XDG_CONFIG_DIR= is always read after =XDG_CONFIG_HOME=, so
    for any app, its configs can be transparently overridden, without affecting the synced flatpak installations.
+ Then the custom flatpak installations can be linked into the local system via
  =stow=, where a few modifications to =XDG= vars will pick them up.

  This method has not been tested yet. However, since they are plain binaries, then they should be syncable.

** Steam & Proton

+ [[See ][PC Gaming Wiki]] describes Steam Library & Game Data locations

#+begin_src sh :tangle .config/sh/profile.d/steam.sh :shebang #!/bin/sh
export STEAM_DIR=$_STEAM/.var/app/com.valvesoftware.Steam/.steam
export FLATPAK_STEAM_VAR=/flatpak/steam/.var

# log with PROTON_LOG=1
export PROTON_LOG_DIR=$_STEAM/log/proton
export PROTON_CRASH_REPORT_DIR=$_STEAM/log/proton-crash

alias run_steam="flatpak --installation=steam run com.valvesoftware.Steam"
#+end_src

Run with =FLATPAK_CONFIG_DIR=/etc/flatpak flatpak --installation=steam run com.valvesoftware.Steam=

Or simply =flatpak --installation=steam run com.valvesoftware.Steam=

*** Setup

+ Add =steam.sh= to =~/.config/sh/_load_profile.sh=

#+begin_src shell :tangle no :eval no
mkdir -p $_STEAM $FLATPAK_STEAM_VAR/com.valvesoftware.Steam

# because flatpak steam will try to symlink /flatpak/dc/.var/com.valvesoftware.Steam/.var to ~/.var (which is very confusing)
ln -s /flatpak/steam/.var/app/com.valvesoftware.Steam /flatpak/dc/.var/com.valvesoftware.Steam

# ensure that FLATPAK_CONFIG_DIR is defined and that the steam flatpak install exists
flatpak --installations

flatpak --installation=steam remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak --installation=steam remote-add --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo

flatpak --installation=steam install flathub com.valvesoftware.Steam
flatpak --installation=steam install flathub com.valvesoftware.Steam.CompatibilityTool.Proton
#+end_src


**** Issues

+ After invoking for the first time, if this link shows up, remove it
  - =rm /flatpak/steam/.var/app/com.valvesoftware.Steam/.var=
+ Flatpak steam will ignore =STEAM_DIR= anyways...
  - it will put the steam library within the steam install under
    =/flatpak/steam/.var/app/com.valvesoftware.Steam/.var=


***** TODO consider creating ./flatpak/installations.d/steam.conf

***** TODO simplyfy config

** Guix

=GUIX_AUTOLOAD_PROFILES=(desktop i3)= should be set in the script run
by the login/display manager, but not exported.

#+begin_src sh :tangle .config/sh/profile.d/guix.sh :shebang #!/bin/sh
alias guix-all-profiles='find /gnu/store -maxdepth 1 -type d -name "*profile" -exec ls -al \{\} +'
alias guix-main="$HOME/.config/guix/current/bin/guix"

# TODO fix for non-guix-systems
# GUIX_PROFILE="$HOME/.guix-profile"
# . "$GUIX_PROFILE/etc/profile"

# GUIX_AUTOLOAD_PROFILES=(desktop i3)

for i in ${GUIX_AUTOLOAD_PROFILES[@]}; do
  echo $i
  profile=$HOME/.guix-extra-profiles/$i/$i
  if [ -f "$profile"/etc/profile ]; then
    GUIX_PROFILE="$profile"
    . "$GUIX_PROFILE"/etc/profile
  fi
  unset $profile
done

export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale

# -c cores -m jobs
export GUIX_BUILD_OPTIONS="-c6"

export GUIX_DEVTOOLS=$HOME/.guix-extra-profiles/devtools/devtools
export GUIX_DEVDEBUG=$HOME/.guix-extra-profiles/devdebug/devdebug
#+end_src

** FCITX5

#+begin_src shell :tangle .config/sh/profile.d/fcitx5.sh :shebang #!/bin/sh
export QT_IM_MODULE=fcitx
export GTK_IM_MODULE=fcitx
export SDL_IM_MODULE=fcitx
export XMODIFIERS="@im=fcitx"
#+end_src

** GTK

#+begin_src sh :tangle .config/sh/profile.d/gtk.sh :shebang #!/bin/sh
# GTK
export GTK2_RC_FILES="$HOME/.gtkrc-2.0"

#export GDK_BACKEND=wayland             # this can prevent programs from starting (e.g. chromium and electron apps). therefore, this should be set per app instead of globally.
#+end_src

** QT

#+begin_src sh :tangle .config/sh/profile.d/qt.sh :shebang #!/bin/sh

# Qt
#export QT_QPA_PLATFORMTHEME="qt5ct"
#export QT_QPA_PLATFORM=wayland
#export QT_WAYLAND_FORCE_DPI=physical
#export QT_WAYLAND_DISABLE_WINDOWDECORATION=1

alias qutebrowser='QTWEBENGINE_CHROMIUM_FLAGS=\"--disable-seccomp-filter-sandbox\" qutebrowser'
alias anki='QTWEBENGINE_CHROMIUM_FLAGS=\"--disable-seccomp-filter-sandbox\" anki'

#+end_src

**** TODO remove aliases aboves after fix for [[https://issues.guix.gnu.org/52993][Guix #52993]] is fixed

** Emacs

#+begin_src sh :tangle .config/sh/profile.d/emacs.sh :shebang #!/bin/sh

export ORG_DIRECTORY=/data/org
#export ORG_AGENDA_ROOT=
#export ORG_ROAM_ROOT

#+end_src

* Languages
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

#+begin_src sh :tangle no

#+end_src

** Java

#+begin_src sh :tangle .config/sh/profile.d/java.sh :shebang #!/bin/sh
export _JAVA_AWT_WM_NONREPARENTING=1

# This sets Java Swing UI -> GTK
#export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel $_JAVA_OPTIONS"

#+end_src

** Node

#+begin_src sh :tangle .config/sh/profile.d/node.sh :shebang #!/bin/sh
[[ -f /usr/share/nvm/init-nvm.sh ]] && source /usr/share/nvm/init-nvm.sh
#+end_src

** Graphviz

#+begin_src sh :tangle .config/sh/profile.d/graphviz.sh :shebang #!/bin/sh
export GRAPHVIZ_DOT=$HOME/.guix-extra-profiles/desktop/desktop/bin/dot
#+end_src

** Python

#+begin_src sh :tangle .config/sh/profile.d/python.sh :shebang #!/bin/sh
# to manually specify where venv's are set up
# export WORKON_HOME=~/.venvs
export PIPENV_VENV_IN_PROJECT=1

# to load an alternate .env file
#PIPENV_DOTENV_LOCATION=/path/to/.env pipenv shell

# to prevent loading of .env files (containing config secrets)
# PIPENV_DONT_LOAD_ENV=1

# to setup shell completion in bash
# eval "$(_PIPENV_COMPLETE=bash_source pipenv)"
#+end_src

** Julia

Julia [[https://docs.julialang.org/en/v1/manual/environment-variables/][Environment Variables]]

#+begin_src sh :tangle .config/sh/profile.d/julia.sh :shebang #!/bin/sh
export JULIA_SHELL=/bin/sh
export JULIA_EDITOR='emacsclient -nw'

export JULIA_DEPOT_PATH="$_LANG/.julia:"
export JULIA_LOAD_PATH="$_LANG/.julia:"
#+end_src

This configuration is intended to be used on archlinux.


#+begin_src sh :tangle .config/direnv/direnvrc :shebang #!/bin/sh

# The guix package for julia creates ./bin/julia,
# which is a wrapper for ./bin/.julia-real
use_julia_system() {
    # These auto-expand empty entries, but =JULIA_LOAD_PATH= can't be set if empty.
    export JULIA_DEPOT_PATH="$_LANG/.julia:"
    export JULIA_LOAD_PATH="$_LANG/.julia:"
    export JULIA_PATH="$_LANG/julia"
    export JULIA_VERSION="1.7.3"

    export JULIA_BIN="$JULIA_PATH/.bin/julia-$JULIA_VERSION/bin/julia"
    export JULIA_LIB="$JULIA_PATH/.bin/julia-$JULIA_VERSION/lib/julia"

    PATH_add "$JULIA_PATH/.bin"

    alias pluto='julia --project=nb --threads=auto -e "using Pluto; Pluto.run(port=4321)"'
}
#+end_src

Julia .envrc template:

#+begin_src sh :tangle .config/direnv/.julia.envrc
use julia_system
#watch_file /home/dc/.config/direnv/direnvrc
#+end_src

** Matlab

Completing the Arch package install is only necessary if you want it installed
via Pacman. It requires =libxcrypt-compat= and =freetype=

#+begin_src sh :tangle .config/sh/profile.d/matlab.sh :shebang #!/bin/sh
#alias matlab=
export MATLAB_HOME=/flatpak/matlab
#export MATLAB_HOME=$_LANG/matlab
export MATLAB_VERSION=R2022a
export MATLAB_ARCH=glnxa64
export MATLAB_PATH=$MATLAB_HOME/$MATLAB_VERSION/bin

export PATH=$MATLAB_PATH:$PATH

function matlab_open() {
    if [ "${MATLAB_INTEL_OVERRIDE}" = "yes" ] ; then
        # exec env MESA_LOADER_DRIVER_OVERRIDE=i965 GTK_PATH=/usr/lib/gtk-2.0 matlab -desktop;
        env MESA_LOADER_DRIVER_OVERRIDE=i965 GTK_PATH=/usr/lib/gtk-2.0 progl matlab -desktop;
    else
        # exec env GTK_PATH=/usr/lib/gtk-2.0 matlab -desktop;
        env GTK_PATH=/usr/lib/gtk-2.0 progl matlab -desktop;
    fi
}

function matlab_open_mesa() {
    if [ "${MATLAB_INTEL_OVERRIDE}" = "yes" ] ; then
        # exec env MESA_LOADER_DRIVER_OVERRIDE=i965 GTK_PATH=/usr/lib/gtk-2.0 matlab -desktop;
        env MESA_LOADER_DRIVER_OVERRIDE=i965 GTK_PATH=/usr/lib/gtk-2.0 matlab -desktop;
    else
        # exec env GTK_PATH=/usr/lib/gtk-2.0 matlab -desktop;
        env GTK_PATH=/usr/lib/gtk-2.0 matlab -desktop;
    fi
}
#+end_src

* Profile
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** =.profile=

If =.bash_profile= does not exist, =.profile= will be sourced instead. When bash is invoked as =sh=, then it will source =.profile= anyways.

*** Load XDG Shim

#+begin_src sh :tangle .profile :shebang #!/bin/sh
# If XDG variables need to change from default, set them here.
[[ -f $HOME/.xdg_shim.sh ]] && source $HOME/.xdg_shim.sh

#[[ -z $XDG_CONFIG_HOME ]] && export XDG_CONFIG_HOME=$HOME/.config
#[[ -z $XDG_CONFIG_DIRS ]] && export XDG_CONFIG_DIRS=/etc/xdg
#[[ -z $XDG_DATA_HOME ]] && export XDG_DATA_HOME=$HOME/.local/share
#[[ -z $XDG_DATA_DIRS ]] export XDG_DATA_DIRS=/usr/local/share/:/usr/share/
#[[ -z $XDG_STATE_HOME ]] && export XDG_STATE_HOME=$HOME/.local/state
#[[ -z $XDG_CACHE_HOME ]] && export XDG_CACHE_HOME=$HOME/.cache

export PATH=$HOME/.local/bin:$HOME/.bin:$PATH
#+end_src

#+RESULTS:

***** NOTA BIG BENE:

If there is no =.xdg_shim.sh=, none of the =$GUIX_AUTOLOAD_PROFILES= will be
loaded into =$PATH= and =.xsession= will fail. Several scripts are dependent on
=$XDG_CONFIG_HOME= at least.


*** Before Profile.d

#+begin_src sh :tangle .profile :shebang #!/bin/sh
export DOTS_CFG_SHELL=$XDG_CONFIG_HOME/sh
export DOTS_PROFILE_D=$DOTS_CFG_SHELL/profile.d

[[ -f $DOTS_CFG_SHELL/_before_profile.d.sh ]] && source $DOTS_CFG_SHELL/_before_profile.d.sh

[[ -f $DOTS_CFG_SHELL/_load_profile.d.sh ]] && source $DOTS_CFG_SHELL/_load_profile.d.sh
#+end_src

#+RESULTS:

#+begin_src sh :tangle .profile :shebang #!/bin/sh
# Browser
#export MOZ_ENABLE_WAYLAND=1             # only start firefox in wayland mode and no other GTK apps
export MOZ_DBUS_REMOTE=1                # fixes firefox is already running, but is not responding

# clutter
#export CLUTTER_BACKEND=wayland          # this can prevent programs from starting. therefore, this should be set per app instead of globally.


# elementary
#export ECORE_EVAS_ENGINE=wayland-egl
#export ELM_ENGINE=wayland_egl
#export ELM_DISPLAY=wl
#export ELM_ACCEL=gl

# TODO: Accessibility
# http://library.gnome.org/devel/accessibility-devel-guide/stable/gad-how-it-works.html.en

# disables accessibility
export NO_AT_BRIDGE=1

# Bemenu (not configured in sway)
#export BEMENU_BACKEND=wayland

# sdl
#export SDL_VIDEODRIVER=wayland        # this can prevent programs from starting old sdl games. therefore, this should be set per app instead of globally.

#+end_src

*** After Profile.d

#+begin_src sh :tangle .profile :shebang #!/bin/sh
[[ -f $DOTS_CFG_SHELL/_after_profile.d.sh ]] && source $DOTS_CFG_SHELL/_after_profile.d.sh
#+end_src

*** Source =.bashrc=

Try to source =.bashrc=. If the shell is non-interactive, =.bashrc= will return

#+begin_src sh :tangle .profile :shebang #!/bin/sh
[[ -f $HOME/.bashrc ]] && source $HOME/.bashrc
#+end_src

* Alacritty

**** TODO remove (doesn't work when alacritty calls /bin/sh)

#+begin_src sh :tangle .alacritty_bashrc :shebang #!/bin/sh
#GUIX_AUTOLOAD_PROFILES=(i3 desktop xdg devtools)

#[[ -f $HOME/.bashrc ]] && source $HOME/.bashrc
#+end_src



* Tools
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** Screen

*** TODO basic screenrc

#+begin_src sh :tangle .screenrc

#+end_src

*** Scripts

* Shells
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** RC

If not running interactively, return

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
[[ $- != *i* ]] && return
shopt -s histappend
#+end_src

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
# commandline color by default
alias ls='ls --color=auto'
alias dir='dir --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias diff='diff --color=auto'
alias grep='grep --color=auto'
alias grubup="sudo update-grub"
alias hw='hwinfo --short'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
alias psmem='ps auxf | sort -nr -k 4'
alias tarnow='tar -acf '
alias untar='tar -zxvf '
alias upd='/usr/bin/update'
alias vdir='vdir --color=auto'
alias wget='wget -c '

# systemd
alias jctl="journalctl -p 3 -xb"
alias jctlu="journalctl --user -u"
alias sysu='systemctl --user'

# pacman
alias fixpacman="sudo rm /var/lib/pacman/db.lck"
alias rmpkg="sudo pacman -Rdd"
alias cleanup='sudo pacman -Rns `pacman -Qtdq`'
alias rip="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -200 | nl"

# Advanced command-not-found hook
# source /usr/share/doc/find-the-command/ftc.bash

alias emacs-debug-wayland='WAYLAND_DEBUG=1 emacs --fg-daemon > $HOME/.cache/log/emacs.wayland.`date +%Y-%m%d-%H%M`.log 2>&1'

if [ -n "$GUIX_ENVIRONMENT" ]
then
    PS1='\[\033[1;33m\]\A'' \[\033[1;32m\]''\u''\[\033[31m\]''@''\[\033[1;36m\]''\h \[\033[31m\]::''\[\033[1;33m\] \w''\[\033[31m\] [''\[\033[1;00m\]env''\[\033[31m\]] :: \[\033[00m\]'
else
    PS1='\[\033[1;33m\]\A'' \[\033[1;32m\]''\u''\[\033[31m\]''@''\[\033[1;36m\]''\h \[\033[31m\]::''\[\033[1;33m\] \w''\[\033[31m\] :: \[\033[00m\]'
fi

#+end_src

#+RESULTS:

*** Color

+ Protesilaos: [[file:/data/ecto/x.files/protesilaos/dotfiles/shell/.bashrc::Colourise man pages][font & color config for man]]
+ =man termcap= for an explanation of codes
+ example dircolors output: [[file:/data/ecto/x.files/benmezger/dotfiles/dot_dircolors][benmezger dircolors]]

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[00;44;37m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'
#+end_src

*** Direnv

Load at end of =.bashrc=

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
[[ -e "$(command -v direnv)" ]]&& eval "$(direnv hook bash)"
#+end_src

Reload =direnvrc= with =direnv reload=

**** Guix Direnv

Add =use guixs= to direnv capabilities in =.envrc=. Thanks [[https://sr.ht/~abcdw/rde/][abcdw/RDE]].

#+begin_src sh :tangle .config/direnv/direnvrc :shebang #!/bin/sh
# when using guix environment in a project, the downloaded environment
# will be cached in ./.guix-profile. delete it to update the profile
#
# https://github.com/direnv/direnv/wiki/GNU-Guix
use_guix() {
  local cache_dir="$(direnv_layout_dir)/.guix-profile"
  if [[ -e "$cache_dir/etc/profile" ]]; then
    # shellcheck disable=SC1091
    source "$cache_dir/etc/profile"
  else
    mkdir -p "$(direnv_layout_dir)"
    eval "$(guix environment --root="$cache_dir" "$@" --search-paths)"
  fi
}

# guix environment is being deprecated
use_guixs() {
  eval \"$(guix shell \"$@\" --search-paths)\"
}

# NOTE need to install the profile with `guix environment --root`
# - then it's available to use with guix shell?
use_guixs_cached() {
  echo "$(direnv_layout_dir)"
  local cache_dir="$(direnv_layout_dir)/.guix-profile"
  if [[ -e "$cache_dir/etc/profile" ]]; then
    # shellcheck disable=SC1091
    source "$cache_dir/etc/profile"
  else
    mkdir -p "$(direnv_layout_dir)"
    eval "$(guix shell --root="$cache_dir" "$@" --search-paths)"
  fi
}
#+end_src



** Bash

*** =.bash_profile=

In case an installation automatically creates =.bash_profile=

#+begin_src sh :tangle .bash_profile :shebang #!/bin/sh
if [ -f $HOME/.profile ]; then . $HOME/.profile; fi
#+end_src

** Zsh

* Environment

** Main

#+begin_src scheme :tangle ".config/guix/manifests/devtools.scm"
(specifications->manifest
'("git"
  "git-lfs"
  "git-repo"

  "curl"

  "glibc"
  "gcc-toolchain"
  "cmake"
  "make"
  "libtool"
  "libvterm"
  "screen"

  "libxcrypt"

  "perl"
  "cmake"
  "make"
  "libtool"
  "perl"

  "direnv"
  "stow"

  "fd"
  "ripgrep"

  ;; TODO consider moving to a media profile
  "ffmpeg"

  ;; TODO move openblas to a data science profile?
  "openblas"
  "lapack"

  "jq"
  "rsync"

  "tree"
  "file"
  "lsof"
  "lsofgraph"

  "btrfs-progs"

  "plantuml"
  "graphviz"

  "sqlite"

  "htop"

  "openssh"

  "zip"
  "unzip"
  "patool"
  "p7zip"

  "virt-manager"

  "bind:utils"

  ;; matlab installer is broken if /bin/pwd doesn't exist
  ;; - it accounts for legacy_unix and BSD and 8 levels of links
  ;;   (for continuous integration?)
  ;; - ... and i think it checks for modifications
  ;; - i tried strace and gdb/disassembly ... nothing
  ;; - the zip file also doesn't unpack correctly
  "octave"
  ))
#+end_src

** devdebug

#+begin_src scheme :tangle ".config/guix/manifests/devdebug.scm"
(specifications->manifest
    '(
      "gdb"
      "patchelf"
      "ltrace"
      "strace"
      ;; "ftrace"
      ;; "uftrace"
      "traceroute"
      "sysprof"
      ;; "perf"
      ;; "bpftrace"
      ;; "elfutils"

      ;; "kernelshark"
      ;; "traceshark"
      ;; "babeltrace"
      ;; "tracecompass"

      ;; "hddtemp"
      ;; "lmsensors"

      ;; i2c needs a guix service, which requires a kernel module
      ;; - see guix system OS declarations
      "i2c-tools"
      "ddcutil"
      "ddcui"

      "tcpdump"
      ))
#+end_src

** Yubikey

#+begin_src scheme :tangle ".config/guix/manifests/yubikey.scm"
(specifications->manifest
 '("yubikey-personalization"
   "python-yubikey-manager"
   ;; "libyubikey"
   "yubico-piv-tool"
   "yubico-pam"
   "pam-u2f")
 )
#+end_src

** XDG

I can't really imagine a desktop/terminal context where I wouldn't want XDG
utils in the environment, but this is split out anyways...

#+begin_src scheme :tangle .config/guix/manifests/xdg.scm

(specifications->manifest
    '(
      "xdg-utils"
      "xdg-user-dirs"

      "xev"
      "xkbcomp"
      "xkeyboard-config"
      "setxkbmap"

      "libinput"
      "xinput"

      "xset"
      "xrdb"
      "xhost"
      "xss-lock"
      "xscreensaver"

      "xrandr"
      "arandr"
      "autorandr"

      "trash-cli"

      "xwallpaper"

      ;; notifications
      ;; sounds: .guix-extra-profiles/xdg/xdg/share/sounds
      "libnotify"  ; For notify-send
      "libcanberra"
      "sound-theme-freedesktop"

      "flatpak-custom"     ;; flatpak with custom installations
      "xdg-desktop-portal"
      "xdg-desktop-portal-gtk"

      "xdg-dbus-proxy"     ;; for Flatpak
      "gtk+:bin"           ;; for gtk-launch
      "glib:bin"           ;; for gio-launch-desktop
      "shared-mime-info"   ;; for mimes

      "compton"
      ;;"redshift"
      "gucharmap"
      "fontmanager"
      "brightnessctl"

      ;; audio device control
      "alsa-utils"
      "pavucontrol"

      ;; chat
      "weechat"
    ))

#+end_src

+ compton :: an alternative compositor for X
  - incompatible in Wayland, since it doesn't offer modular compositors
+ redshift :: control color temperature according to surroundings.
  - requires =libxcb= X11 client lib
  - for wayland: =gammastep= or =wlsunset=
+ gucharmap :: unicode character map (GTK)
+ fontmanager :: provides GTK tools to aid configuration of fonts
+ brightnessctl :: lightweight brightness control tool

** Languages

Manifests for language environments

* TUI

** Env

This section should configure scripts and a guix profile intended to be loaded
in a terminal-only interface.

#+begin_src scheme :tangle .config/guix/manifests/tui-env.scm
(specifications->manifest
 '(
   ;"htop"
   ;"lnav"
   ))
#+end_src

** Apps

#+begin_src scheme :tangle .config/guix/manifests/tui-apps.scm
(specifications->manifest
 '(
   ;"lnav"
   ))
#+end_src

*** Htop

*** LNAV

+ [[https://docs.lnav.org/en/latest/formats.html][Docs]]
  - The =$HOME/.config/lnav/= directory should exist before =.dotfiles= is stowed.
  - It contains state, history, views and usage data.
  - Only the configs/formats should be added to git.
+ [[https://docs.lnav.org/en/latest/formats.html][New Formats]] can be installed into =$HOME/.config/lnav/formats/installed=
  - from files: =lnav -i myformat.json=
  - from a repository
  - from the [[https://github.com/tstack/lnav-config][extra]] repository: =lnav -i extra=
+ Custom formats can be added into =$HOME/.dotfiles/.config/lnav/formats/=
+ New Configs can be installed into =$HOME/.config/lnav/configs/installed/=
+ Custom configs can be added into =$HOME/.dotfiles/.config/lnav/configs/=

#+begin_src sh :results output :exports none
lnav -i extra
#+end_src

** Guix
