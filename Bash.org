:PROPERTIES:
:ID:       db35e2a9-9fd2-41b9-9c5f-81431fdb8860
:END:
#+title: Bash Configuration
#+description:
#+startup: content
#+options: toc:nil

* Table Of Contents :TOC_2_gh:
  - [[#profile-hooks][Profile Hooks]]
  - [[#guix][Guix]]
  - [[#podman][Podman]]
  - [[#docker][Docker]]
- [[#languages][Languages]]
  - [[#graphql][GraphQL]]
  - [[#python][Python]]
  - [[#julia][Julia]]
- [[#profile][Profile]]
  - [[#devtools][devtools]]
  - [[#xdg][XDG]]

** Profile Hooks

**** Default Scripts

#+begin_src sh
# This is the default _load_profile.d.sh script

__scripts=(
    "guix.sh"
    "emacs.sh"
    "java.sh"
    "julia.sh"
    "graphviz.sh"
    "flatpak.sh"
)
for __script in ${__scripts[@]}; do
    [[ -f $DOTS_PROFILE_D/$__script ]] && source $DOTS_PROFILE_D/$__script || echo "couldn't load $__script"
done
unset $__script
# unset $__scripts
#+end_src

***** RC

#+begin_src sh
# :tangle .config/sh/_load_rc.eg.sh

# This is the default _load_rc.d.sh script

__scripts=(
    "aliases.sh"
    "functions.sh"
    "colors.sh"
    "git-prompt.sh"
    "prompt.sh"
)
for __script in ${__scripts[@]}; do
    [[ -f $DOTS_RC_D/$__script ]] && source $DOTS_RC_D/$__script || echo "couldn't load $__script"
done
unset $__script
# unset $__scripts
#+end_src


** Guix

=GUIX_AUTOLOAD_PROFILES=(desktop i3)= should be set in the script run
by the login/display manager, but not exported.

#+begin_src sh :tangle .config/sh/profile.d/guix.sh :shebang #!/bin/sh
# TODO fix for non-guix-systems
# GUIX_PROFILE="$HOME/.guix-profile"
# . "$GUIX_PROFILE/etc/profile"

export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale

# -c cores -m jobs
export GUIX_BUILD_OPTIONS="-c$NCPU"
export GUIX_EXTRA=$HOME/.guix-extra-profiles

#+end_src

#+begin_src sh :tangle .config/sh/profile.d/guix-profiles.sh
# GUIX_AUTOLOAD_PROFILES=(desktop i3)
if [[ -z $GUIX_AUTOLOAD_PROFILES ]]; then
    GUIX_AUTOLOAD_PROFILES=(i3 desktop fonts browsers xkb pipewire \
                               mon devtools academic office cad kicad \
                               pythondev k8s)
fi

for i in ${GUIX_AUTOLOAD_PROFILES[@]}; do
  echo $i
  profile=$GUIX_EXTRA/$i/$i
  if [ -f "$profile"/etc/profile ]; then
    GUIX_PROFILE="$profile"
    . "$GUIX_PROFILE"/etc/profile
  fi
  unset $profile
done
#+end_src

*** On Arch
**** Load Guix Profiles

#+begin_src sh :tangle .config/sh/profile.d/guix-arch-support.sh :shebang #!/bin/bash
export GUIX_EXTRA=$HOME/.guix-extra-profiles

guix_arch_load() {
    local profiles=""

    while [ "$1" != "" ]; do
        case $1 in
            -*|--*=) # unsupported flags
            echo "Error: Unsupported flags $1" >&2
            return 1
            ;;
            ,*)
                profiles="$profiles $1"
                shift
                ;;
        esac
    done

    if [ -z "$profiles" ]; then
        # NOTE: this glob behaves strangely when $GUIX_EXTRA is empty
        # profiles="$GUIX_EXTRA/*";
        echo "Error: no profiles specified"
    fi

    local profilePath=""
    for p in $profiles; do
        profile=$(basename $p)
        echo $profile
        profilePath=$GUIX_EXTRA/$profile
        if [ -f "$profilePath/$profile/etc/profile" ]; then
            GUIX_PROFILE="$profilePath/$profile"
            source "$GUIX_PROFILE/etc/profile"
        fi
    done

    return 0
}

export -f guix_arch_load
#+end_src

The default is -c0, which uses as many cores as possible for each build agent,
so no need to set =-c= in $GUIX_BUILD_OPTIONS

#+begin_src sh :tangle .config/sh/profile.d/guix-arch.sh :shebang #!/bin/bash
# export GUIX_BUILD_OPTIONS="-c6"

# never again, wxPython ... never again
GUIX_AUTOLOAD_PROFILES=(academic arch-devtools nyxt k8s)
if [ -z "$GUIX_ARCH_LOADED" ]; then
    guix_arch_load ${GUIX_AUTOLOAD_PROFILES[@]}
    export GUIX_ARCH_LOADED=${GUIX_AUTOLOAD_PROFILES[@]}
fi

GUIX_PROFILE="$HOME/.config/guix/current"
source "$GUIX_PROFILE/etc/profile"
#+end_src

Add to =~/.config/sh/_load_profile.d.sh= _in this order_

+ guile-arch.sh
+ guix-arch-support.sh
+ guix-arch.sh

** Podman

Ensure that Podman stores images on the correct mount.

#+begin_example conf :tangle .config/containers/storage.conf
[storage]

driver = "overlay"
rootless_storage_path = "/storage/location"
#+end_example

Rootful images must be stored in a root-owned folder directory with correct
permissions AFAIK.

** Docker

Ensure that Docker is configured to store images on the correct mount.

#+begin_example json :tangle /etc/docker/daemon.json
{
  "data-root": "/storage/location"
}
#+end_example

The docker systemd services must have been run at least once for many of its
paths to exist.

Test with =docker pull docker.io/netbootxyz/netbootxyz=

* Languages

** GraphQL

On Guix, ensure =nodejs= profile is installed.

#+begin_src :eval no
npm install -g graphql-language-service-cli
#+end_src

Graphql-language-service-cli depends on:

+ graphql-language-service
+ graphql-language-service-server

Other tools include:

+ graphiql
+ codemirror-graphql
+ graphiql

*** GraphQL Project Setup

On Guix Systems, add the =nodejs= profile to the project or ensure that it's in
=$PATH=. Most actual projects will have their own =manifest.scm= anyways. This
will be a separate node build, but its =npm install -g= binaries will still go
in =.node_modules=

***** TODO finalize on =use_guixs=
***** TODO how to designate the default graphql schema file for the above?


** Python


*** Pyenv
Removed from arch.

Building for pyenv

#+begin_example sh
version=$1

mjobs=$((NTHREADS - 2))

env PYTHON_CONFIGURE_OPTS='--enable-optimizations --with-lto' \
PYTHON_CFLAGS='-march=native -mtune=native' \
PYTHON_MAKE_OPTS="-j$mjobs" \
MAKE_OPTS="-j$mjobs" \
pyenv install $version 2>&1 > ~/src/log/python-build-$version.log
#+end_example

** Julia

Julia [[https://docs.julialang.org/en/v1/manual/environment-variables/][Environment Variables]]

#+begin_src sh :tangle .config/sh/profile.d/julia.sh :shebang #!/bin/sh
export JULIA_SHELL=/bin/sh
export JULIA_EDITOR='emacsclient -nw'

export JULIA_DEPOT_PATH="$_LANG/.julia:"
export JULIA_LOAD_PATH="$_LANG/.julia:"
#+end_src

This configuration is intended to be used on archlinux.

#+begin_src sh :tangle .config/direnv/direnvrc :shebang #!/bin/sh
# The guix package for julia creates ./bin/julia,
# which is a wrapper for ./bin/.julia-real
use_julia_system() {
    export JULIA_SHELL=/bin/sh
    export JULIA_EDITOR="$EDITOR"

    # These auto-expand empty entries, but =JULIA_LOAD_PATH= can't be set if empty.
    export JULIA_DEPOT_PATH="$_LANG/.julia:"
    export JULIA_LOAD_PATH="$_LANG/.julia:"
    export JULIA_PATH="$_LANG/julia"
    export JULIA_VERSION="1.7.3"

    export JULIA_BIN="$JULIA_PATH/bin/julia-$JULIA_VERSION/bin/julia"
    export JULIA_LIB="$JULIA_PATH/bin/julia-$JULIA_VERSION/lib/julia"

    PATH_add "$JULIA_PATH/bin"

    alias pluto='julia --project=nb --threads=auto -e "using Pluto; Pluto.run(port=4321)"'
}
#+end_src

* Profile

** devtools

#+begin_src scheme :tangle ".config/guix/manifests/devtools.scm"
(specifications->manifest
;;** git
 '("git"
  "git-lfs"
  "git-repo"
  "git-stack-bin"

;;** fetch
  "curl"

  ;; for emacs pdf-tools
  ;; "cairo"
  ;; "libpng"
  ;; "poppler"

;;** for pyenv builds

;; I thought some of these were already brought in
  "zlib"
  "libffi"
  "xz"
  "expat"
  "libxml2"
  "bzip2"
  "gdbm"

;; I want to learn TCL anyways, but maybe this should be in
;; another profile
  "tk"
  "ncurses"

;;  "poetry"

;;** pkg metadata
  "pkg-config"

;;** build essential
  "gettext"
  "autoconf"
  "automake"
  "glibc"
  "gcc-toolchain"
  "cmake"
  "make"
  "perl"

;;** lib
  "libtool"

;;** tty
  "libvterm"
  "screen"

;;** crypt/hash
  "libxcrypt"

;;** environment
  "direnv"
  "stow"

;;** log
  "rsyslog"

;;** search
  "fd"
  "ripgrep"
  "the-silver-searcher"

;;** media
  ;; TODO consider moving to a media profile
  "ffmpeg"

;;** compute
  ;; TODO move openblas to a data science profile?
  "openblas"
  "lapack"

;;** data
  "jq"
  "python-yq"
  "sqlite"

;;** file
  "tree"
  "file"
  "perl-image-exiftool"
  "lsof"
  "lsofgraph"

;;** disk
  "btrfs-progs"

;;** data vis
  "plantuml"
  "graphviz"
  "d2-bin"

;;** ssh
  "openssh"
  "openssl"
  "rsync"

;;** pass
  "password-store"
  "age"
  "pass-age"
  "age-plugin-yubikey-bin"
  "sops"

;;** compression
  "zip"
  "unzip"
  "p7zip"

  ;; MIME problems when building. TLDR: i should've migrated to guix home earlier
  ;;
  ;; E   AssertionError: 'application/gzip' != 'application/x-tar'
  ;; E   - application/gzip
  ;; E   + application/x-tar
  ;; E    : MIME type for archive `t.tar.gz.foo' should be application/x-tar, but
  ;; "patool"

;;** vm

  ;; should fix a gdx-pixbuf issue for virt-manager
  "gdk-pixbuf"
  "virt-manager"

;;** node
  "node"

;;** network
  "bind:utils"

;;** octave
  "octave"
  ))
#+end_src

** XDG

I can't really imagine a desktop/terminal context where I wouldn't want XDG
utils in the environment, but this is split out anyways...

+ compton :: an alternative compositor for X
  - incompatible in Wayland, since it doesn't offer modular compositors
+ redshift :: control color temperature according to surroundings.
  - requires =libxcb= X11 client lib
  - for wayland: =gammastep= or =wlsunset=
+ gucharmap :: unicode character map (GTK)
+ fontmanager :: provides GTK tools to aid configuration of fonts
+ brightnessctl :: lightweight brightness control tool
