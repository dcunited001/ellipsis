:PROPERTIES:
:ID:       db35e2a9-9fd2-41b9-9c5f-81431fdb8860
:END:

#+title: Bash Configuration
#+description:
#+startup: content
#+property: header-args :tangle-mode (identity #o444)
#+property: header-args:sh :tangle-mode (identity #o555)
#+property: header-args:bash :tangle-mode (identity #o555)
#+options: toc:nil

* Table Of Contents :TOC_2_gh:
- [[#environment][Environment]]
  - [[#org-variables][Org Variables]]
  - [[#xdg-shim][XDG Shim]]
  - [[#profile-hooks][Profile Hooks]]
  - [[#rc-hooks][RC Hooks]]
  - [[#apps][Apps]]
  - [[#xdg][XDG]]
  - [[#steam--proton][Steam & Proton]]
  - [[#guix][Guix]]
  - [[#gtk][GTK]]
  - [[#qt][QT]]
  - [[#emacs][Emacs]]
- [[#languages][Languages]]
  - [[#java][Java]]
  - [[#julia][Julia]]
- [[#profile][Profile]]
  - [[#profile-1][=.profile=]]
- [[#shells][Shells]]
  - [[#rc][RC]]
  - [[#bash][Bash]]
  - [[#zsh][Zsh]]
- [[#environment-1][Environment]]
  - [[#direnv][Direnv]]
  - [[#languages-1][Languages]]

**** TODO double check =.bash*= permissions
**** TODO figure out how to circumvent saving readonly files
- this is needed to easily detangle files

* Environment
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** Org Variables

These are intended to be a list of system-specific variables that enable some
portability: for me, across systems or networks. The idea is to containerize
this as much as possible, at least for myself, so the paths/etc work like
[[https://12factor.net/config][12Factor config vars]] or Helm values.

*** Paths

+ _DF :: path to dotfiles
+ _DATA :: path to data mount
  - not final
+ _XS :: path to "excess" mount
  - stored outside of home/root partitions
    * my hard disk is small and i has not enough disks to rice good
  - will become modeled on XDG-style or posix style paths
  - this will migrate to replace references to =$_DATA= (at least partially)

#+begin_quote
Note: getting this to tangle properly requires =C-c C-v C-t=
#+end_quote

#+name: bash-env-bindings
| _DF   | $HOME/.dotfiles |
| _DATA | /data           |
| _XS   | /data           |

#+name: bash-env-bindings_GEN
#+begin_src emacs-lisp :tangle no :var bindings=bash-env-bindings :results output :exports none
(mapcar #'(lambda (row)
            (princ (format "export %s=%s\n" (first row) (second row)))) bindings)
#+end_src

#+RESULTS: bash-env-bindings_GEN
: export name=value
: export _DF=$HOME/.dotfiles
: export _DATA=/data
: export _XS=/data

#+name: bash-env-bindings_CALL
#+call: bash-env-bindings_GEN()

#+RESULTS: bash-env-bindings_CALL
: export name=value
: export _DF=$HOME/.dotfiles
: export _DATA=/data
: export _XS=/data

#+begin_src sh :tangle .profile :noweb yes :comments none :results none :exports none :shebang #!/bin/sh
<<bash-env-bindings_CALL()>>
#+end_src

#+RESULTS:

**** TODO set up =<<noweb>>= style templates?

** XDG Shim


+ =.xdg_shim.sh=
  - This file ensures XDG can be modified by user before the rest of =.profile= runs. It's necessary because =.config/sh= relies on XDG.
  - This script is not managed by =git= or =stow=

#+begin_src sh :tangle .xdg_shim.eg.sh :shebang #!/bin/sh
export XDG_CONFIG_HOME=$HOME/.config
#export XDG_CONFIG_DIRS=/etc/xdg
#export XDG_DATA_HOME=$HOME/.local/share
#export XDG_DATA_DIRS=/usr/local/share/:/usr/share/
#export XDG_STATE_HOME=$HOME/.local/state
#export XDG_CACHE_HOME=$HOME/.cache
#+end_src

***** TODO fix the above example script. these are XDG spec defaults, but sway will not startup...

** Profile Hooks

+ =.config/sh/=
  - These scripts are not managed by =git= or =stow=
  - _before_profile.d.sh :: remaps values before =profile.d/*.sh= scripts run
  - _load_profile.d.sh :: a list of scripts loaded by =*profile=
  - _after_profile.d.sh :: remaps values after =_load_profile.d.sh= has run
+ =.config/sh/profile.d/=
  - These scripts are managed by =git= and =stow=.

**** Default Scripts

Manually copy. Stow deploys, but to no effect (no need to mess with =.stowrc= etc.)

#+begin_src sh :tangle .config/sh/_before_profile.eg.sh :shebang #!/bin/sh
# This is the default _before_profile.d.sh script
#+end_src

#+begin_src sh :tangle .config/sh/_load_profile.eg.sh :shebang #!/bin/sh
# This is the default _load_profile.d.sh script

__scripts=(
"guix.sh"
"apps.sh"
"xdg.sh"
"gtk.sh"
"qt.sh"
"emacs.sh"
"java.sh"
"julia.sh"
    )

for __script in ${__scripts[@]}; do
    [[ -f $DOTS_PROFILE_D/$__script ]] && . $DOTS_PROFILE_D/$__script
done

unset $__script

#+end_src

** RC Hooks

These scripts are intentionally left blank.

+ =.config/sh/=
  - _before_rc.d.sh :: remaps values before =rc.d/*.sh= scripts run
  - _load_rc.d.sh :: a list of scripts loaded by =*rc=
  - _after_rc.d.sh :: remaps values after =_load_rc.d.sh= has run
+ =.config/sh/rc.d/=

** Apps

#+begin_src sh :tangle .config/sh/profile.d/apps.sh :shebang #!/bin/sh
export MAIL=geary
export BROWSER=firefox
export TERM=alacritty

# TODO: update to use terminal emacsclient
export VISUAL=emacsclient
export EDITOR=/usr/bin/vim
#+end_src

** XDG

#+begin_src sh :tangle .config/sh/profile.d/xdg.sh :shebang #!/bin/sh
export XDG_SESSION_TYPE=wayland
export XDG_SESSION_DESKTOP=sway
export XDG_CURRENT_DESKTOP=sway
#+end_src

** Steam & Proton

#+begin_src sh :tangle .config/sh/profile.d/steam.sh :shebang #!/bin/sh

#+end_src

** Guix

#+begin_src sh :tangle .config/sh/profile.d/guix.sh :shebang #!/bin/sh
alias guix-all-profiles='find /gnu/store -maxdepth 1 -type d -name "*profile" -exec ls -al \{\} +'
alias guix-main="$HOME/.config/guix/current/bin/guix"

GUIX_PROFILE="$HOME/.guix-profile"
. "$GUIX_PROFILE/etc/profile"

export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale
#+end_src

**** TODO how to handle resetting $PATH when I need a guixless $PATH
**** TODO create =.bashrc= scripts that load =$PATH= for specific applications that might share dependencies.
+ e.g. custom builds of OBS and VLC (common dep. ffmpeg)
+ can start bash with =--rcfile= ... but how to do this in GUI?
+ for gui apps, the best way to handle this is with =x11-docker=
+ is there a better way to avoid cross-environment contamination? (not a problem if the environments are isolated into different users)

** GTK

#+begin_src sh :tangle .config/sh/profile.d/gtk.sh :shebang #!/bin/sh
# GTK
export GTK2_RC_FILES="$HOME/.gtkrc-2.0"

#export GDK_BACKEND=wayland             # this can prevent programs from starting (e.g. chromium and electron apps). therefore, this should be set per app instead of globally.
#+end_src

** QT

#+begin_src sh :tangle .config/sh/profile.d/qt.sh :shebang #!/bin/sh

# Qt
export QT_QPA_PLATFORMTHEME="qt5ct"
export QT_QPA_PLATFORM=wayland
#export QT_WAYLAND_FORCE_DPI=physical
#export QT_WAYLAND_DISABLE_WINDOWDECORATION=1

#+end_src

** Emacs

#+begin_src sh :tangle .config/sh/profile.d/emacs.sh :shebang #!/bin/sh
export ORG_DIRECTORY=/data/org
#export ORG_AGENDA_ROOT=
#export ORG_ROAM_ROOT
#+end_src

* Languages
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

#+begin_src sh :tangle no

#+end_src

** Java

#+begin_src sh :tangle .config/sh/profile.d/java.sh :shebang #!/bin/sh
export _JAVA_AWT_WM_NONREPARENTING=1

# This sets Java Swing UI -> GTK
#export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel $_JAVA_OPTIONS"

#+end_src

** Julia

Julia [[https://docs.julialang.org/en/v1/manual/environment-variables/][Environment Variables]]

#+begin_src sh :tangle .config/sh/profile.d/julia.sh :shebang #!/bin/sh
export JULIA_SHELL=/bin/sh
export JULIA_EDITOR=vim
#+end_src

These two will auto-expand empty enties

#+begin_src sh :tangle .config/sh/profile.d/julia.sh :shebang #!/bin/sh
export JULIA_LOAD_PATH="$JULIA_LOAD_PATH"
export JULIA_DEPOT_PATH="$_DATA/lang/.julia:$JULIA_DEPOT_PATH"
#+end_src

* Profile
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** =.profile=

If =.bash_profile= does not exist, =.profile= will be sourced instead. When bash is invoked as =sh=, then it will source =.profile= anyways.

*** XDG Shim

#+begin_src sh :tangle .profile :shebang #!/bin/sh
# If XDG variables need to change from default, set them here.
[[ -f ~/.xdg_shim ]] && . ~/.xdg_shim.sh

#[[ -z $XDG_CONFIG_HOME ]] && export XDG_CONFIG_HOME=$HOME/.config
#[[ -z $XDG_CONFIG_DIRS ]] && export XDG_CONFIG_DIRS=/etc/xdg
#[[ -z $XDG_DATA_HOME ]] && export XDG_DATA_HOME=$HOME/.local/share
#[[ -z $XDG_DATA_DIRS ]] export XDG_DATA_DIRS=/usr/local/share/:/usr/share/
#[[ -z $XDG_STATE_HOME ]] && export XDG_STATE_HOME=$HOME/.local/state
#[[ -z $XDG_CACHE_HOME ]] && export XDG_CACHE_HOME=$HOME/.cache

#+end_src

*** Before Profile.d

#+begin_src sh :tangle .profile :shebang #!/bin/sh
export DOTS_CFG_SHELL=$XDG_CONFIG_HOME/sh
export DOTS_PROFILE_D=$DOTS_CFG_SHELL/profile.d

[[ -f $DOTS_CFG_SHELL/_before_profile.d.sh ]] && source $DOTS_CFG_SHELL/_before_profile.d.sh

[[ -f $DOTS_CFG_SHELL/_load_profile.d.sh ]] && source $DOTS_CFG_SHELL/_load_profile.d.sh
#+end_src

*** TODO Process

#+begin_src sh :tangle .profile :shebang #!/bin/sh
# Browser
export MOZ_ENABLE_WAYLAND=1             # only start firefox in wayland mode and no other GTK apps
export MOZ_DBUS_REMOTE=1                # fixes firefox is already running, but is not responding

# clutter
#export CLUTTER_BACKEND=wayland          # this can prevent programs from starting. therefore, this should be set per app instead of globally.


# elementary
export ECORE_EVAS_ENGINE=wayland-egl
export ELM_ENGINE=wayland_egl
#export ELM_DISPLAY=wl
#export ELM_ACCEL=gl

# TODO: Accessibility
# http://library.gnome.org/devel/accessibility-devel-guide/stable/gad-how-it-works.html.en

# disables accessibility
export NO_AT_BRIDGE=1

# Bemenu (not configured in sway)
export BEMENU_BACKEND=wayland

# sdl
#export SDL_VIDEODRIVER=wayland        # this can prevent programs from starting old sdl games. therefore, this should be set per app instead of globally.

# Graphviz
export GRAPHVIZ_DOT=/usr/bin/dot

#+end_src

*** After Profile.d

#+begin_src sh :tangle .profile :shebang #!/bin/sh
[[ -f $DOTS_CFG_SHELL/_after_profile.d.sh ]] && source $DOTS_CFG_SHELL/_after_profile.d.sh
#+end_src

* Shells
:PROPERTIES:
:header-args+: :comments link :mkdirp yes
:END:

** RC

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
# If not running interactively, don't do anything
#[[ $- != *i* ]] && return

alias ls='ls --color=auto'
PS1='[\u@\h \W]\$ '

# TODO: source ~/.config/sh/rc.d files here
#+end_src

*** Color

+ Protesilaos: [[file:/data/ecto/x.files/protesilaos/dotfiles/shell/.bashrc::Colourise man pages][font & color config for man]]

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh

#+end_src


** Bash

*** =.bash_profile=

In case an installation automatically creates =.bash_profile=

#+begin_src sh :tangle .bash_profile :shebang #!/bin/sh
if [ -f ~/.profile ]; then . ~/.profile; fi
#+end_src

** Zsh

**** TODO introduce hooks that integrate with the RC
+ [ ] =_before_zprofile= and =_after_zprofile=
+ [ ] =_before_zshrc= and =_after_zshrc=


[[file:/data/ecto/x.files/protesilaos/dotfiles/shell/.bashrc::Colourise man pages][orgit-test]]

* Environment

** Direnv

** Languages
