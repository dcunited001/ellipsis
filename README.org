#+TITLE: Dotfiles
#+DESCRIPTION: Based on daviwil's dotfiles

Based on [[https://github.com/daviwil/dotfiles][daviwil's dotfiles]]

* Why Guix

NOTE: this is just a brief overview of the methods available to you for
customizing precisely how an environment is loaded for an application run under
guix. You CANNOT replicate this functionality in debian, arch or flatpak ... not
without being an expert.

+ Debian :: you will make fairly heavy use of their package mgmt toolchain.
  - You will likely need a custom package repository.
  - You will need tooling to auto-upgrade the builds of your custom packages.
+ Arch :: you will need to ... ditto.
  - You will also need =aurutils= and, again, a custom package repo.
  - You will again need to automate upgraded packages
  - Running multiple pacman databases is complicated and it is difficult to make packages install to the correct endpoints, while ensuring shared library objects are available (of the proper version, etc)
  - It will break when you don't upgrade things or when you reinstall.
+ Guix :: you will also need to do similar things: you must run at least one channel (i.e. package repo on your local file system) and you will heavily interface with the package management tools.
  - if I said Guix too much easier than the above, i'd be lying. nothing is simpler than the domain. the difference with Guix is that, if you want a build farm, it's about as easy as it could possibly be.
    * See [[github:emacsmirror/build-farm][Hydra/Cuirass]]
    * [[https://guix.gnu.org/manual/en/guix.html#Continuous-Integration][Cuirass]] (Guix Manual)
    * [[https://guix.gnu.org/en/blog/2016/growing-our-build-farm/][Growing Our Build Farm]] (Guix Blog 2016)
  - with the alternative package managers above, good luck getting things like
    having consistent man pages or avoiding things like Gnome/GTK dependency
    issues.
  - additionally, working with Scheme is a requirement. it's hard. if you don't
    want want to use Scheme (or learn 2+ lisps), then _you can use Nix._ That is
    completely reasonable.

If anything like the above sounds unfamiliar, you're probably not using linux.
Additionally, your system is probably not robust to failure. If the big bad wolf
comes along and blows your shit over, GLHF. If you have a job where you use
linux and your system goes down in such a way, you may get fired. You must
automate.

+ Yes, you can have backups. This helps
+ But the technical debt you'll incur when having a polluted environment is
  something that backups cannot protect you from. If your environment is
  polluted, you're probably on stack overflow right now.

Precise control over a process's environment with /minimal effort/: this is what makes guix shine. It might seem like more work at first, but you should know about all these interfaces anyways.
