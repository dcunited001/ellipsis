#+TITLE:     Doom 2 Emacs
#+AUTHOR:    David Conner
#+EMAIL:     aionfork@gmail.com
#+DESCRIPTION: notes

I set this up in addition to my own emacs for mainly a few reasons:

+ Doom's codebase has a lot of examples of code, which is helpful when
  deciding how to advise your own code.
+ I need a baseline of functionality against which I can compare my own
  config, which I would still prefer. For example, I need to understand what
  using LSP should feel like. Also, there's no way to get =eglot= to run
  multiple LSPs on the same buffer, so for webapps =eglot= just doesn't
  work. I like eglot and would much prefer smaller & native integration, but I
  just need to have a UX-target for what LSP is supposed to do an editor.
+ Doom is essentially a wrapper around straight. That's what it literally
  *is*. I ran into some issues where =straight.el= needs you to prune/clean
  old =elc= that was bogging my own config down. I didn't /notice/ any errors
  from it, but it was just steadily accumulating this delta that wasn't going
  away. What I did notice (after 6 months?!) was that my 32-thread desktop was
  slower than my 12-thread laptop. This could be I/O overhead from too many
  tabs and Emacs is single threaded. It's more likely that the ELC/ELN
  bytecode being produced wasn't the greatest quality.

* Caveat


Please do not expect this to have current configuration. I will only
occasionally use it and /if/ it ever references modules in my other emacs
config... then it will drift. There be dragons and I plan to stay tf away from
them.

#+ATTR_HTML: width: 400px
[[file:img/nicol-bolas.jpg]]

I am not going to fight that guy.

Refactoring emacs configs to share modules without proper testing is a PITA,
unless you have wrapped your modules as packages. The use of =defgroup= and
=defcustom= to do so is smart for various reasons, but is likely not robust
for consumers. It's also quite a bit of overhead. [[https://github.com/protesilaos/dotfiles?tab=readme-ov-file#do-not-track-my-dotfiles-rolling-unstable-and-untested][Protesilaos has done this]]
and still warns against tracking packages included in configs.  In the end,
there's no particular guarantees about load order in package consumers
... without copious amounts of =declare-function=. See the widely used
[[https://github.com/magit/magit/blob/main/lisp/magit-base.el#L57-L64][magit/magit]]. In this case, I would be the package consumer... and if you're
moving fast, you're breaking things.

If you /were/ to decide to share end-user functionality between Emacs configs
and you built a robust system of doing so ... you'd be writing a Spacemacs or
Doom Emacs.

* Setup

The Guix manifest environment at =.config/guix/manifests/doomemacs.scm= mainly
just specifies =emacs-pgtk=, the basic Doom deps and =openjdk= so it's in the
path for my Guix System laptop.

#+begin_example scheme
(specifications->manifest
 '("openjdk"
   "emacs-pgtk"
   "ripgrep"
   "fd"))
#+end_example

This Emacs profile intended to run as a secondary server

+ All =emacsclient= interaction with it must specify
  =--socket=/run/user/1000/emacs/$socket= where for me, =socket=doom=
+ The server needs to start using systemd or shepherd with
  =--fg-daemon=$socket=

Ensuring that the proper Emacs binary is running when Doom Emacs installs and
builds is a bit tricky with a Guix profile. I want to use a wrapper script,
but i can't really specify it as the Doom Emacs =EMACS=/usr/bin/emacs=
variable ... for reasons. So I just specify the binary in the link to the guix
profile, which should be most current.

There are some helper scripts to demonstrate and accomplish this:

+ .local/share/systemd/user/doom.service :: start a systemd service to run a
  second emacs server
+ .local/share/applications/doomclient.desktop :: uses the =doomclient=
  wrapper
+ bin/doomclient :: run an =emacsclient= that connects to the =doom= server
+ bin/doomemacs :: run the doom emacs server, outside of systemd
+ bin/doomup :: runs =doom clean= to clean elc/eln, runs =doom up= and then
  =doom build=, some of which may be redundant.

The Vim icon seems to be about as available as the Emacs icon, so I use it for
=freedesktop= shortcuts and when calling =notify-send=

* Functionality

**  LSP

*** Java

**** Features

|--------+----------+--------+-----------------------------------------------------|
| Module | Feature  | System | Notes                                               |
|--------+----------+--------+-----------------------------------------------------|
| LSP    | LSP      | Arch   | Available, easy to isntall, dead easy to start      |
|        |          | Guix   |                                                     |
|        | Xref     | Arch   | Just works. Works for Throwable and in-project refs |
|        | Flycheck | Arch   | Setup through LSP. Seems to work                    |
|--------+----------+--------+-----------------------------------------------------|
|        |          |        |                                                     |
|--------+----------+--------+-----------------------------------------------------|

**** Files

|-------------------------------------------------+-------------------------------|
| File                                            |                               |
|-------------------------------------------------+-------------------------------|
| ~/.emacs.doom/.local/etc/java-workspace/.cache/ | cache containing java symbols |
|-------------------------------------------------+-------------------------------|

**** Tasks

***** TODO test that Java's LSP can install/run with the Guix OpenJDK package
