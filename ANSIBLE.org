:PROPERTIES:
:ID:       2b7dae76-003f-4714-b621-c046d855fe3e
:END:
#+TITLE: Ansible: setup a portable environment on Guix
#+CATEGORY: slips
#+property: header-args            :tangle-mode (identity #o400) :mkdirp yes
#+property: header-args:conf       :tangle-mode (identity #o600) :mkdirp yes
#+property: header-args:sh         :tangle-mode (identity #o500) :mkdirp yes
#+property: header-args:shell      :tangle-mode (identity #o500) :mkdirp yes
#+property: header-args:scheme     :tangle-mode (identity #o500) :mkdirp yes
#+property: header-args:emacs-lisp :tangle-mode (identity #o600) :mkdirp yes
#+TAGS:


Don't put your secrets on a LUKS drive. Either vault, ansible-vault, pass or
some other means is much better.

+ Vault requires certificate deployment, but integrates nicely in k3s or K8S.
+ Ansible Vault permits retrieval of secrets GPG-encrypted at rest.

It is quite a relief to trust GPG on a smartcard though.

**** TODO finish refactoring this (and hopefully use it for once)

* Org Babel Config

Ensure the values below are set. They're required for the =:tangle= output
paths. The emacs-lisp blocks below are used further down . If emacs is already
open, then running =M-: (setenv "VAR" "value")= will set the environment var for
the whole process. This is also useful for setting:

#+begin_src emacs-lisp
(setq-local ansible-prefix (or (getenv "ANSIBLE_PREFIX") "build/ansible")
            org-confirm-babel-evaluate nil)
#+end_src

** Var Setup

To add in bash scripts as =<<ansible-prefix>>=

#+name: ansible-prefix
#+begin_src emacs-lisp :results value silent
ansible-prefix
#+end_src

#+name: secrets-home
#+begin_src emacs-lisp :results value silent
secrets-home
#+end_src

** Build

The intent here is to build a portable ansible config at =ansible-prefix=.
Everything sticks to =FHS= and =XDG= for clarity.

+ ./.local/lib :: scripts to source
+  ::

The build can be dumped into a folder or stowed:

#+begin_src sh
ANSIBLE_HOME=$HOME/.ansible
stow --dir $ANSIBLE_PREFIX --target $ANSIBLE_HOME
#+end_src

Stow ignore list:

#+begin_src gitignore :tangle (expand-file-name ".stow-local-ignore" ansible-prefix)
# perl regex

#+end_src

Stowing into the =$ANSIBLE_HOME= might not work out, since it contains
directories like:

+ collections
+ roles
+ plugins
+ tmp
+ galaxy_cache
+ pc
+ ANSIBLE_PLAYBOOK_DIR

* Environment

** Guix Profile

See "Ansible On Guix" for info on its dependencies

#+begin_src scheme :tangle (expand-file-name ".config/guix/manifests/ansible.scm" ansible-prefix)
(specifications->manifest
 '(
   "ansible"
   "man-db"
   ))
#+end_src


* Ansible

** Config

Some na√Øve example settings:

#+begin_example conf :tangle (expand-file-name ".config/ansible/ansible.cfg.eg" ansible-prefix)

[tags]

[defaults]

# * inventory

# * playbooks

# * facts

# * logs

# ** logs: options

# ** logs: ansible validation

# ** logs: yaml validation

# ** logs: jinja2 validation

# * auth

# ** vault

# ** connection

# * roles & collections

# * modules & module_utils

# * plugins

# ** filters

# ** group vars:

# ** plugin paths

# * [defaults]

[privilege_escalation]


[persistent_connection]


[connection]


[colors]


[selinux]


[diff]


[galaxy]

display_progress=True


[inventory]

any_unparsed_is_failed=True

[netconf_connection]


[paramiko_connection]


[jinja2]

#+end_src

*** Comparing against defaults

Run to generate defaults and diff.

#+begin_src sh :results output silent :file (expand-file-name ".config/ansible/ansible.cfg.defaults" ansible-prefix)
ansible-config init --disabled -t --format=ini
#+end_src

The =--format env= option can be evaluated or appended to a =.envrc=.

*** Dumping configs

Here the formats are json, yaml, or ini and are incompatible with the above, though

#+begin_src sh
ansible-config dump -c $config --only-changes -t --format=$format
#+end_src

** Plugins

#+begin_example conf
# [callback_slack]
# channel = #thechannel
# username = fdsa
# webhook_url = env:SLACK_WEBHOOK_URL

# [callback logstash]
# port = env:LOGSTASH_PORT
# server = env:LOGSTASH_SERVER
# type = env:LOGSTASH_TYPE
#+end_example

*** TODO include other collections/roles paths?

** Inventory Skel

#+begin_src conf :tangle (expand-file-name ".config/ansible/inventory.yml.eg" ansible-prefix)

#+end_src


* Setup

Ensure =ANSIBLE_HOME= is set. Almost everything will be relative to that.

Depending on its value and whether a config file is read, then files will likely
be created in =$HOME/.ansible/tmp= and =$XDG_CONFIG_HOME/ansible=.

Using direnv can help jump between various ansible projects. If you set
=ANSIBLE_CONFIG=, it's very likely that you'll want multiple configs like
=ansible.debug.cfg= so use =-c $config= to do that.

#+begin_src sh :tangle (expand-file-name ".envrc.eg" ansible-prefix)
export ANSIBLE_HOME=$PWD
export ANSIBLE_CONFIG=$ANSIBLE_HOME/ansible.cfg
PATH_add .bin
#+end_src

** External Services

*** Galaxy

Getting access to Galaxy from behind a firewall is kind of a mess. It works
occasionally, but there's quite a bit of CDN magic that happens. You'll need a
mirror. However ... and I don't know why I didn't just switch gears earlier
... you can just pop the controller off the subnet. A protected Ansible AWX
would be a bit different. See the =pulp/pulp_

The Ansible Galaxy url's are nice and mnemonic: =galaxy.ansible.com/$namespace/$collection=

#+begin_src sh :tangle (expand-file-name ".bin/init-galaxy" ansible-prefix)
ansible-galaxy collection install \
               community.general \
               ansible.posix \
               ansible.netcommon \
               ansible.utils
#+end_src

**** Containers & VM's

#+begin_src sh
ansible-galaxy collection install \
               kubernetes.core \
               containers.podman \
               community.grafana \
               community.libvirt
#+end_src

**** Security

#+begin_src sh
ansible-galaxy collection install \
               community.hashi_vault \
               community.crypto \
               devsec.hardening
#+end_src


**** Other collections:

+ awx.awx
+ openvswitch.openvswitch
+ lvrfrc87.git_acp

*** Ansible Vault

*** AWX

** Playbooks



* Ansible on Guix

Python will need to be installed separately (which is good)

|--------------+---------+----------------------------|
| package      | version | desc                       |
|--------------+---------+----------------------------|
| ansible      |   7.4.0 | provides ansible-community |
| ansible-core |  2.14.4 | provides ansible-core      |
|--------------+---------+----------------------------|

** Build a relocatable guix profile:

I would generally recommend against going through this, since =guix shell=
basically gains the same benefits. So I removed the loading from the =init-ansible.sh= script

However, it does provide a portable Ansible with consistent dependencies and
controllable environment. It's a generally interesting facet of Guix. I guess
other package archives could basically install to an arbitrary path, but this
generally needs to be provided ahead of time, unless stowed somewhere.

+ --system aarch64-linux :: makes the manifest portable to arm64
+ --relocatable :: twice enables binaries requiring user
  namespaces to function with a fallback execution engine
  - you may want the -RR relocatable option
+ -S :: creates links from the profile within the tar to the
  dependences in the guix packages

#+begin_src sh :eval no
guixpkg=$(guix pack --relocatable --system=x86_64-linux --compression=gzip --save-provenance \
      -L $HOME/.dotfiles -m $SECRETS_HOME/.config/guix/manifests/ansible-usb.scm \
      -S .bin=bin)
if [ ! -e $SECRETS_HOME/pkg ]; then
    mkdir -p $SECRETS_HOME/pkg
fi
cp $guixpkg $SECRETS_HOME/pkg
#+end_src

The package is built to =/gnu/store= and is in =$guixpkg=. Now unpack:

#+begin_src sh :eval no
tar -C $SECRETS_HOME/pkg -xzvf $guixpkg
#+end_src

The profile will be in =./gnu/store/*profile=. If there are multiple profiles
found in =$SECRETS_HOME=, then searching the =.tar= is a better way to find the
profile.

#+begin_src sh :eval no
guixprofile=$(tar --list -zf $guixpkg | grep 'profile/bin' | cut -d/ -f4)
ln -s $SECRETS_HOME/pkg/gnu/store/$guixprofile $SECRETS_HOME/.guix-ansible
#+end_src

After unpacking, the guix profile can be found more exactly with:

#+begin_src sh :eval no :tangle no
guixprofile=$(find $SECRETS_HOME/pkg/gnu/store -name "*-profile" -type d)
#+end_src

Then source the =$guixprofile/etc/profile= from a script. Some dependencies may
require symlinking =-S lib=lib= or =-S libexec/libexec=.

Test the profile's binaries in a clean shell with:

#+begin_src sh :eval no
guix shell --profile=.guix-ansible -- bash
#+end_src
