#+TITLE:     Ellipsis
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes

This is a guix parent module that helps with code reuse.

* Guix

** Writing Packages

+ OpenSSL has an example of a Spliced G-Expression

+ nothing happens if there's no (arguments...)?

*** Questions
+ how to prevent guile from loading WIP code
  - these packages should definitely not be in dotfiles..
+ arch & nix use =go build= here, but how are go-deps fetched?
+ =guix import go= can consume package metadata and produce guix packages, perhaps recursively
  - [[github:ryanprior/emacs-guix-packaging][ryanprior/emacs-guix-packaging]] can help with this

** Writing Services

* Utils

* Services

* Home Services

* Packages

** Performance

+ cpupower-gui ([[https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=cpupower-gui][AUR]])
  - [[https://wiki.archlinux.org/title/CPU_frequency_scaling#cpupower-gui][CPU Powerscaling]]
+ throttled ([[https://github.com/erpalma/throttled][github]])
  - this may provide fixes for CPU throttling/scaling issues on my laptop, which seems not properly read the =tctl= sensor (it is set +20Â° from tdie, which i can't find)

** Misc

+ libsixel
+ emacs-x509

* Notes

**** TODO fully disambiguate compose/extend/extension
... silly french /agir/

** Performance

+ amd_pstate ([[https://www.kernel.org/doc/html/latest/admin-guide/pm/amd-pstate.html][linux docs]]) module is builtin to my kernel
  - but apparently this is very new...
  - cpu must be Zen 2 or higher (laptops? ... i donno?)
  - [[https://www.reddit.com/r/linuxhardware/comments/vww97x/owner_report_hp_victus_16_laptop_with_amd_rx5500m/][enabling amd_pstate driver on a laptop]]
  - and an article from [[https://www.phoronix.com/news/AMD-P-State-How-To][phoronix]]

inspect current CPU state:

+ lscpu
+ =sudo cat /sys/devices/system/cpu/cpu*/cpufreq/cpuinfo_cur_freq=
+ =sudo cpupower frequency-info=

inspect current TLP state:

+ =sudo tlp-stat=


** Root Profile

This profile is also created via =/etc/skel= which is defined in =./gnu/system/shadow.scm=

=/etc/profile= should be extended with:

  - special-file-service
  - extra-special-file-service

**** TODO it's not quite clear how this would be extended
+ ideally, i could just append to the files defined by the =/etc/skel= service

** Boot Params

Configure with =sysctl-service-type= and extend/override =%default-sysctl-settings=.

** ThermalD

Fix thermald on kharis

#+begin_quote
Jul 24 19:50:37 localhost shepherd[1]: Service thermald has been started.
Jul 24 19:50:37 localhost shepherd[1]: [thermald] [1658706637][MSG]Config file /gnu/store/n3ag66c5bgcfwffrzlz0qmib1ildv9pa-thermald-2.4.7/etc/thermald/thermal-conf.xml does not exist
Jul 24 19:50:37 localhost shepherd[1]: [thermald] [1658706637][MSG]Unsupported cpu model, use thermal-conf.xml file or run with --ignore-cpuid-check
Jul 24 19:50:37 localhost shepherd[1]: [thermald] [1658706637][MSG]THD engine start failed
Jul 24 19:50:37 localhost shepherd[1]: Service thermald (PID 27678) exited with 2.
Jul 24 19:50:37 localhost shepherd[1]: Service thermald has been disabled.
Jul 24 19:50:37 localhost shepherd[1]:   (Respawning too fast.)
#+end_quote

* Systems

** USB GPG Image

This is mostly a reimplementation of the Nix image from [[github:drduh/YubiKey-Guide][drduh/YubiKey-Guide]] in Guix. The image is intended to be used for:

+ GPG key generation
+ SSL keygen
+ [[https://developers.yubico.com/PIV/Guides/Certificate_authority.html][Certificate Authority with a Yubikey]]

**** Resources

+ [[https://gnupg.org/aegypten2][gnupg.org/aegypten2]] has an architectural overview of how GnuPG interacts with system services (it's a bit old)

**** Multiboot USB

+ [[https://guix.gnu.org/manual/en/html_node/Initial-RAM-Disk.html][Guix: Initial RAM Disk]] documents the boot arguments

*** Grub Config

#+begin_example conf
for isofile in $isopath/guix-gpg-*.iso; do
  if [ -e "$isofile" ]; then
    regexp --set=isoname "$isopath/(.*)" "$isofile"
    submenu "$isoname ->" "$isofile" {
      iso_path="$2"
      loopback loop "$iso_path"
      menuentry "Start Guix GPG USB" {
        search --fs-uuid --set "1970-01-01-09-41-59-29" root
        # bootoptions="root=31393730-3031-3031-3039-343135393239"
        bootoptions="root=$root gnu.system=/gnu/store/wzxv66d1iviqxax88vkfnxfc9zppxim7-system gnu.load=/gnu/store/wzxv66d1iviqxax88vkfnxfc9zppxim7-system/boot modprobe.blacklist=radeon"
        linux (loop)/gnu/store/lq7rpl835igf983766fm8xbb6knvdrs8-linux-libre-6.13.7/bzImage $bootoptions
        initrd (loop)/gnu/store/yvf65kvmi5xcw1ydw033nca69zyr05f2-raw-initrd/initrd.cpio.gz
      }
    }
  fi
done

#+end_example

*** Passing UUID to the boot args

Mounting the ISO as =loop0=, then running =sudo blkid | grep loop0= clears up the
=grub.cfg= on the Guix GPG ISO.

#+begin_example
/dev/loop0: BLOCK_SIZE="2048" UUID="1970-01-01-09-41-59-29" LABEL="GUIX_IMAGE" TYPE="iso9660" PTTYPE="dos"
#+end_example

Unless [[https://www.gnu.org/software/grub/manual/grub/grub.html#search][Grub's =search= command]] is given =--set=$arg=, Grub's =search --fs-uuid
--set 1970-01-01-09-41-59-29= command will set =root=$UUID=, where the =1970= date
is the +label+ ... UUID?

The label that gets output by =guix system image ...= can be configured in the
file systems declaration. Searching by (unique) label allows multiple Guix
images to remain on the Multiboot USB.

Unfortunately, if this label/uuid are on the =(loop)= device, idk whether it
will be visible to grub

***** TODO set the usb-gpg ISO's file system label (and rebuild... no time)

**** The Guile bootstrapping script

The boot script looks like this.

+ Grub needs to hint the Root UUID to the boot script
+ If you get stuck at the boot prompt, it makes [[https://git.savannah.nongnu.org/cgit/gash/gash-utils.git/tree/gash/commands][the commands in gash-utils]]
  available to you ... but running them is tough. I think you can jump to a
  shell, but i'm not sure.

#+begin_src scheme
(eval-when
    (expand load eval)
  (let ((extensions '())
        (prepend (lambda (items lst)
                   (let loop
                       ((items items)
                        (lst lst))
                     (if (null? items)
                         lst
                         (loop
                          (cdr items)
                          (cons (car items) (delete (car items) lst))))))))
    (set! %load-path
          (prepend
           (cons "/gnu/store/jsxgc979x79h81kzqz9n6cpf5pk4z262-module-import"
                 (map
                  (lambda (extension)
                    (string-append extension "/share/guile/site/" (effective-version)))
                  extensions))
           %load-path))
    (set! %load-compiled-path
          (prepend
           (cons "/gnu/store/3nsmbfp3k3baymic9in9cbzl39hvqzq9-module-import-compiled"
                 (map
                  (lambda (extension)
                    (string-append extension "/lib/guile/" (effective-version) "/site-ccache"))
                  extensions))
           %load-compiled-path))))

(begin (begin
         (use-modules (guix build utils))
         (letrec-syntax
             ((fail-safe
               (syntax-rules
                 ()
                 ((_ exp rest \...)
                  (begin
                    (catch 'system-error (lambda () exp) (const #f))
                    (fail-safe rest \...)))
                 ((_) #t))))
           (fail-safe
            (delete-file "/etc/group.lock")
            (delete-file "/etc/passwd.lock")
            (delete-file "/etc/.pwd.lock")
            (setenv "GUIX_LOCPATH" "/gnu/store/pxnrbpc30m5qsr8jqx86a9m42mzn25ni-glibc-utf8-locales-2.39/lib/locale")
            (setlocale LC_CTYPE "en_US.utf8")
            (delete-file-recursively "/tmp")
            (delete-file-recursively "/var/run")
            (delete-file-recursively "/run")
            (mkdir "/tmp" 1023)
            (chmod "/tmp" 1023)
            (mkdir "/var/run" 493)
            (chmod "/var/run" 493)
            (mkdir "/run" 493)
            (chmod "/var/run" 493))))
       (primitive-load "/gnu/store/n7mafj2sb3cv6rhjych05xbpyk72h6w8-activate.scm")
       (begin
         (false-if-exception (delete-file "/run/booted-system"))
         (symlink (canonicalize-path "/run/current-system") "/run/booted-system")
         (let loop
             ((fd 3))
           (when (< fd 1024)
             (false-if-exception
              (let ((flags (fcntl fd F_GETFD)))
                (when (zero? (logand flags FD_CLOEXEC))
                  (fcntl fd F_SETFD (logior FD_CLOEXEC flags)))))
             (loop (+ fd 1))))
         (execl "/gnu/store/40y4x85jm7rjng3nqvfw5k6kl4pskcpv-shepherd-1.0.3/bin/shepherd" "shepherd" "--config" "/gnu/store/0bv0rbk0b8c2q9anzy4v0dn55b9in2a4-shepherd.conf")))
#+end_src

After some setup, this hits the =activate-scm= script

#+begin_src scheme
(eval-when
    (expand load eval)
  (let ((extensions '())
        (prepend (lambda (items lst)
                   (let
                       loop
                     ((items items) (lst lst))
                     (if (null? items)
                         lst
                         (loop
                          (cdr items)
                          (cons (car items)
                                (delete (car items) lst))))))))
    (set!
     %load-path
     (prepend
      (cons "/gnu/store/sr0fp8j0pnwzdk7mr1r456nj6c2nvsds-module-import"
            (map (lambda (extension) (string-append extension "/share/guile/site/" (effective-version))) extensions))
      %load-path))
    (set!
     %load-compiled-path
     (prepend
      (cons "/gnu/store/s06kbqb22c9gc9sk0yqar46xqi9ppibm-module-import-compiled"
            (map (lambda (extension) (string-append extension "/lib/guile/" (effective-version) "/site-ccache")) extensions))
      %load-compiled-path))))
(begin
  (use-modules
   (gnu build activation)
   (guix build utils))
  (mkdir-p "/var/run")
  (close-port (open-file "/var/run/utmpx" "a0"))
  (mkdir-p "/var/log")
  (close-port (open-file "/var/log/wtmp" "a0"))
  (activate-current-system)
  (for-each
   primitive-load
   (quote
    ("/gnu/store/pr405l9lskx3wcrcw3rv8lqdk6s9hpny-activate-service.scm"
     "/gnu/store/sxmh40vks5pc3sjgyfffpmhzdvpc81wk-activate-service.scm"
     "/gnu/store/yfmxjc5lnvs75w5yyyklrzn31nh251cf-activate-service.scm"
     "/gnu/store/47wh2ap9rzc880xljdfghc2bzjdwfjwq-activate-service.scm"
     "/gnu/store/g5icfavv444vslxh08imb4ianyq7rp9w-activate-service.scm"
     "/gnu/store/h5zczhskz5amyqxgbyl89n5c7k5yakvx-activate-service.scm"
     "/gnu/store/y20mivw68g41lgh1wbd3g3yxvk22w615-activate-service.scm"
     "/gnu/store/sw1khycx69m8hy6r833m1yk6n4wn8lrs-activate-service.scm"
     "/gnu/store/y8w3vxajxdmm22hw1r5314dk0xsqq678-activate-service.scm"))))
#+end_src

Checking the activation scripts didn't yield any hardcoded disk labels. The
scripts at the end, in order:

+ (activate-firmware ...) :: lib/firmware
+ (activate-modprobe ...) :: and ptrace-attach
+ (activate-etc ...) :: 
+ (activate-users+groups ... ) :: sets up users/groups
+ (activate-privileged-programs ... ) :: libcap; set bits 
+ (activate-special-files ... ) :: sets up =/bin/sh= and =/bin/env=
+ sets up =ncsd= and =resolve.conf=
+ sets up ACL for archive imports ([[https://guix.gnu.org/manual/en/html_node/Substitute-Server-Authorization.html][authorizes guix substitutes]] to be imported
  into the store)
+ sets up ccid/pcsc

*** Tasks

**** TODO resolve need to use nonguix when generating USB images for laptops requiring non-free firmware

*** Notes

**** Yubico

***** Disk Utils

****** BTRFS duplication

Including BTRFS could help when writing to SD cards of questionable quality
when they are intended as long-term backups.

This will ensure that one copy of the disk's metadata and block-level data is
duplicated within the partition. It results in <50% of the storage space.

#+begin_src sh
mkfs.btrfs -d dup -m dup --label "backup" /dev/sdXn
#+end_src

******* TODO ensure =noatime= is configured as udisks2 default

in =/etc/udisks2/mount_options.conf=:

#+begin_src conf
[defaults]
btrfs_defaults=noatime,space_cache=v2, ... etc
#+end_src

^^^ review the above

One problem: =noatime= must be configured on each mount. Also, other metadata may be updated when the system is mounted, unknown to user. this is a shortcoming of simply duplicating LUKS volumes.

****** Duplicate encrypted volumes

However, storing these partitions within an encrypted volume would erase the
benefits of BTRFS duplication. You can simply duplicate the encrypted volume with =dd=.

Use =cryptsetup= to open/work on the volume is opened. then

***** PIV

These packages should not be necessary for my use case.

***** PAM

Modules for yubico PAM. Irrelevant for GPG key creation

#+begin_src scheme :eval no
#:use-module (gnu packages authentication)
;; gnu/packages/openpgp.scm
;; gnu/packages/gnu-pw-mgr.scm
#+end_src

***** Keepass

Modules for keepass w/ yubico support:

#+begin_src scheme :eval no
#:use-module (gnu packages password-utils)
#+end_src

**** Refactoring GnuPG services into modules

#+begin_src scheme :eval no
;; TODO: this will require building an image with firmware
;; - e.g. on the HP laptop
;; NOTE: PIV is not necessary
;;   TODO: udev.packages support for yubikey-personalization

;; =========================
;; (define-configuration usb-gpg-agent-configuration)

;; TODO: implement as service (later ... just use screen now)
;;
;; TODO: services: enable gpg-agent
;; TODO: add config option for GNUPGHOME
;; TODO: add config option for starting gnupg-connect-agent /bye

(define usb-gpg-agent-shepherd-service
  (shepherd-service
   (documentation "Run a GPG agent")
   (provision '(usb-gpg-agent gpg-agent))
   (requirement '(user-processes syslogd loopback))

   (start #~ (make-forkexec-constructor ))
   ()))

;; if more entropy is needed
;; "echo 'SCD RANDOM 512 | gpg-connect-agent | tee /dev/random | "

(define usb-gpg-agent-service-type
  (service-type
   (name 'usb-gpg-agent-service-type)
   (extensions (list
                (service-extensions profile-service-type '(gnupg))))
   (description )))
#+end_src

**** Refactoring xsecurelock-service

#+begin_src scheme :eval no
;; =========================
;; TODO this needs to be tested (in a separate iso image with xorg)
;; (define xsecurelock-service-type
;;   (service-type
;;    (name 'xsecurelock)
;;    (extensions
;;     (list (service-extension pam-root-service-type
;;                              screen-locker-pam-services)
;;           (service-extension setuid-program-service-type
;;                              ;; (lambda (program)  ... )
;;                              (setuid-program
;;                               ((lambda (program)
;;                                  (pretty-print  (string-append  #$xsecure-lock "/libexec/xsecurelock/authproto_pam"))
;;                                  program
;;                                  )
;;                                (program (string-append  #$xsecure-lock "/libexec/xsecurelock/authproto_pam"))))
;;                              )))
;;    (description "Setup xsecurelock with authproto_pam to run xscreensaver and configure it as a PAM service")))
;; =========================
#+end_src
