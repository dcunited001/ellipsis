# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.22)
{
  # A helpful description of your flake
  description = "dcunited001/ellipsis NixOS";

  # Flake inputs
  inputs = {
    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*";
    flake-schemas.url =
      "https://flakehub.com/f/DeterminateSystems/flake-schemas/*";
    home-manager.url = "github:nix-community/home-manager/release-25.05";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";
    disko.url = "github:nix-community/disko";
    disko.inputs.nixpkgs.follows = "nixpkgs";
    sops-nix.url = "github:Mic92/sops-nix";
    sops-nix.inputs.nixpkgs.follows = "nixpkgs";
    nixos-hardware.url = "github:nixos/nixos-hardware";
  };

  # Flake outputs that other flakes can use
  outputs = { self, nixpkgs, flake-schemas, home-manager, disko, sops-nix
    , nixos-hardware }:
    let
      # Helpers for producing system-specific outputs
      supportedSystems = [ "x86_64-linux" "aarch64-linux" ];
      forEachSupportedSystem = f:
        nixpkgs.lib.genAttrs supportedSystems
        (system: f { pkgs = import nixpkgs { inherit system; }; });
    in {
      # Schemas tell Nix about the structure of your flake's outputs
      schemas = flake-schemas.schemas;

      nixosConfigurations = {
        kratos = nixpkgs.lib.nixosSystem {
          modules =
            [ ./hosts/kratos/configuration.nix sops-nix.nixosModules.sops ];
        };
      };
    };
}

#   # Development environments
#   devShells = forEachSupportedSystem ({ pkgs }: {
#   default = pkgs.mkShell {
#     # Pinned packages available in the environment
#     packages = with pkgs; [
#       curl
#       git
#       jq
#       wget
#       nixpkgs-fmt
#     ];

#     # Environment variables
#     env = {
#       FOO = "BAR";
#     };

#     # A hook run every time you enter the environment
#     shellHook = ''
#             fdsa
#           '';
#   };
# });
