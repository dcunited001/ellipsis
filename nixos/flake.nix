# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.22)
{
  # A helpful description of your flake
  description = "dcunited001/ellipsis NixOS";

  # Flake outputs that other flakes can use
  # flake-schemas, disko
  outputs = { self, nixpkgs, flake-compat, home-manager, sops-nix
    , nixos-hardware, flake-schemas, disko, ... }@inputs:
    let

      inherit (self) outputs;

      # extend lib with lib.custom (see flake.nix from EmergentMind/dotfiles)
      lib = nixpkgs.lib.extend
        (self: super: { custom = import ./lib { inherit (nixpkgs) lib; }; });

      # Helpers for producing system-specific outputs
      supportedSystems = [ "x86_64-linux" "aarch64-linux" ];

      # this is intended to support pkgs
      forAllSupportedSystems = f:
        lib.genAttrs supportedSystems
        (system: f { pkgs = import nixpkgs { inherit system; }; });
      forEachSystem = s: f:
        (lib.genAttrs s)
        (system: f { pkgs = import nixpkgs { inherit system; }; });

    in {
      # Schemas tell Nix about the structure of your flake's outputs
      # schemas = flake-schemas.schemas;

      nixosConfigurations.kratos = nixpkgs.lib.nixosSystem {
        specialArgs = { inherit inputs outputs lib; };

        modules =
          [ ./hosts/kratos/configuration.nix sops-nix.nixosModules.sops ];
      };
      nixosConfigurations.anywhere = {
        x86_64-linux = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          specialArgs = { inherit inputs; };
          modules = [
            "${nixpkgs}/nixos/modules/profiles/all-hardware.nix"
            "${nixpkgs}/nixos/modules/installer/cd-dvd/iso-image.nix"
            ./modules/nixos/services/openssh.nix
            ./hosts/anywhere/configuration.nix
          ];
        };
      };
      nixosConfigurations.anywhereOrangePi5Plus = {
        # "${nixpkgs}/nixos/nixpkgs/pkgs/misc/uboot/default.nix" # ubootOrangePi5Plus
        aarch64-linux = nixpkgs.lib.nixosSystem {
          specialArgs = { inherit inputs; };
          system = "aarch64-linux";
          modules = [
            "${nixpkgs}/nixos/modules/profiles/all-hardware.nix"
            "${nixpkgs}/nixos/modules/installer/sd-card/sd-image-aarch64-new-kernel-installer.nix"
            ./modules/nixos/services/openssh.nix
            ./hosts/anywhere/configuration.nix
          ];
        };
      };
    };

  # Flake inputs
  inputs = {
    flake-compat.url = "https://flakehub.com/f/edolstra/flake-compat/*";
    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*";
    hardware.url = "github:nixos/nixos-hardware";
    disko.url = "github:nix-community/disko";
    disko.inputs.nixpkgs.follows = "nixpkgs";
    flake-schemas.url =
      "https://flakehub.com/f/DeterminateSystems/flake-schemas/*";

    sops-nix.url = "github:Mic92/sops-nix";
    sops-nix.inputs.nixpkgs.follows = "nixpkgs";

    # HM
    home-manager.url = "github:nix-community/home-manager/release-25.05";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";

    # HJEM
    hjem.url = "github:feel-co/hjem";
    hjem.inputs.nixpkgs.follows = "nixpkgs";
    hjem-impure.url = "github:Rexcrazy804/hjem-impure";
  };
}
