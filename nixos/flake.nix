# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.22)
{
  # A helpful description of your flake
  description = "dcunited001/ellipsis NixOS";

  # Flake outputs that other flakes can use
  # flake-schemas, disko
  outputs =
    {
      self,
      nixpkgs,
      flake-compat,
      frc-nix,
      hjem,
      walker,
      sops-nix,
      nixos-hardware,
      flake-schemas,
      disko,
      ...
    }@inputs:
    let
      inherit (self) outputs;

      # Helpers for producing system-specific outputs
      supportedSystems = [
        "x86_64-linux"
        "aarch64-linux"
      ];
      desktopSystems = [
        "x86_64-linux"
        "aarch64-linux"
      ];
      serverSystems = [
        "x86_64-linux"
        "aarch64-linux"
      ];

      # extend lib with lib.custom (see flake.nix from EmergentMind/dotfiles)

      lib = nixpkgs.lib.extend (self: super: { custom = import ./lib { inherit (nixpkgs) lib; }; });

    in
    {
      # Schemas tell Nix about the structure of your flake's outputs
      # schemas = flake-schemas.schemas;

      # from EmergentMind/nix-config
      #
      # but here, for importing internal scripts/packages ONLY. this should be
      # a completely FLAT overlay...
      #
      # NOTE: i'm really going to try to avoid an overlay for now

      overlays = import ./overlays { inherit inputs; };

      nixosConfigurations.kratos = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs outputs lib; };

        modules = [
          ./hosts/kratos/configuration.nix
          inputs.hjem.nixosModules.default
          inputs.walker.nixosModules.default
          sops-nix.nixosModules.sops
        ];
      };

      nixosConfigurations.anywhere = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs outputs lib; };
        modules = [
          "${nixpkgs}/nixos/modules/profiles/all-hardware.nix"
          "${nixpkgs}/nixos/modules/installer/cd-dvd/iso-image.nix"
          ./modules/nixos/services/openssh.nix
          ./hosts/anywhere/configuration.nix
        ];
      };

      # genAttrs :: [ String ] -> (String -> Any) -> AttrSet
      # genAttrs(systems) :: (String -> Any) -> AttrSet
      # genAttrs(systems) eats [systemStrings], returns (String -> Any) -> AttrSet
      packages = nixpkgs.lib.genAttrs (supportedSystems) (
        system:
        let
          pkgs = import nixpkgs {
            inherit system;
            # no overlays for now
            # overlays = [ self.overlays.default ];
          };
        in
        nixpkgs.lib.packagesFromDirectoryRecursive {
          callPackage = nixpkgs.lib.callPackageWith pkgs;
          directory = ./pkgs/common;
        }
      );
    };

  # Flake inputs
  inputs = {
    flake-compat.url = "https://flakehub.com/f/edolstra/flake-compat/*";
    # nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*";
    nixpkgs.url = "https://flakehub.com/f/DeterminateSystems/nixpkgs-weekly/0.1.880602";
    hardware.url = "github:nixos/nixos-hardware";
    disko.url = "github:nix-community/disko";
    disko.inputs.nixpkgs.follows = "nixpkgs";
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*";

    nixpkgs-stable.url = "github:NixOS/nixpkgs/nixos-25.05";
    nixpkgs-unstable.url = "https://flakehub.com/f/NixOS/nixpkgs/0.1";

    # this flake follows nixpkgs-unstable
    frc-nix.url = "github:frc4451/frc-nix";
    frc-nix.inputs.nixpkgs.follows = "nixpkgs";
    # frc-nix.inputs.nixpkgs.follows = "nixpkgs-unstable";

    sops-nix.url = "github:Mic92/sops-nix";
    sops-nix.inputs.nixpkgs.follows = "nixpkgs";

    elephant.url = "github:abenz1267/elephant";
    elephant.inputs.nixpkgs.follows = "nixpkgs"; # "nixpkgs-unstable";

    walker.url = "github:abenz1267/walker";
    walker.inputs.elephant.follows = "elephant";
    walker.inputs.nixpkgs.follows = "nixpkgs"; # "nixpkgs-unstable";

    # HJEM
    hjem.url = "github:feel-co/hjem";
    hjem.inputs.nixpkgs.follows = "nixpkgs";

    # hjem-impure.url = "github:Rexcrazy804/hjem-impure";
  };
}
