
* Project

** Layout

For now

#+begin_quote
.
â”œâ”€â”€ hosts
â”‚Â Â  â””â”€â”€ kratos: host-specific config
â”œâ”€â”€ modules
â”‚Â Â  â”œâ”€â”€ programs
â”‚Â Â  â”œâ”€â”€ services: everything here until there's a good reason
â”‚Â Â  â”‚Â Â  â””â”€â”€ guix: just the pubkeys for subs
â”‚Â Â  â””â”€â”€ users
â””â”€â”€ snippets: just random experiments
#+end_quote

* Nix Source

[[https://github.com/search?q=repo%3ANixOS%2Fnixpkgs++pam+path%3A%2F%5Enixos%5C%2Fmodules%5C%2F%2F&type=code&p=2]['PAM/SystemD Env. activation]]

+ nixos/modules :: module-list.nix
+ nixos/modules/security :: pam.nix, pam_mount.nix
  - systemd-confinement.nix
+ nixos/modules/config
  - ldap.nix
+ nixos/modules/services
  - cage.nix
+ nixos/modules/services/display-managers
  - sddm.nix
+ pkgs/desktops
  - plasma-5/kwallet-pam.nix
+ pkgs/.../pam_u2f.nix


* Misc

** Nix Lang

convert attrs to list

#+begin_example nix
# docs indicate that nix lang seems to preserve order pretty good (req. for hashing)
let pp = pkgs.tree-sitter.builtGrammars; in { kk = __attrNames pp; vv = __attrValues pp; }

# now, just interleave them. (lib.lists.ziplists does this)

# fortunately: <nixpkgs/lib>.mapAttrsToList
:i <nixpkgs/lib>
mapAttrsToList(k: v: [k v]) pkgs.tree-sitter.builtGrammars;

# right-to-left
:print map(id) (mapAttrsToList(k: v: [k v]) pkgs.tree-sitter.builtGrammars)

# [ ...
#   [ "tree-sitter-yaml"
#     Â«derivation /nix/store/npn8hbc1h866r80kjqzdm82zijkskk8s-tree-sitter-yaml-grammar-0.25.3.drvÂ» ]
#   [ "tree-sitter-yang"
#     Â«derivation /nix/store/gw1bn0hnl9an7i7vr05d5px9xs3v4w7c-tree-sitter-yang-grammar-0.25.3.drvÂ» ]
#   [ "tree-sitter-zig"
#     Â«derivation /nix/store/c0rwhl5ykx85a8b988r3d2ky430bbmml-tree-sitter-zig-grammar-0.25.3.drvÂ»]
# ]
#+end_example

Before realizing that the editor assumes to dynamically link with tree-sitter
& grammar definitions, i tried the following, which variously produced lists
of mostly derivations, none of which worked.

+ [pkgs.tree-sitter.withPlugins (_: pkgs.tree-sitter.allGrammars)];
+ __attrValues pkgs.tree-sitter-grammars;
+ (concat (__attrValues pkgs.tree-sitter.builtGrammars));
+ tree-sitter.allGrammars;
 (lib.mapAttrsToList(k: v: [k v]) pkgs.tree-sitter.builtGrammars);

** Flake

not using flakes for systems right now. doing so basically requires updating
system configurations at the same time as =home-manager= rebuilds

#+begin_src nix
{
  description = "Ellipsis NixOS Systems";
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-25.05";
    nix-flatpak = {
      url = "github:gmodena/nix-flatpak?ref=latest";
      inputs.nixpkgs.follow = "nixpkgs";
    };
  };

  # nixosConfigurations.<hostname>.config.system.build.toplevel
  # must be a derivation. can output:
  #
  # - modules: modules to build for output
  # - system: build for arch
  # - specialArgs: pass to system input
  #
  # nixosConfigurations.<hostname> is a fixed interface (config needs to go
  # into the modules listed

  # https://nixos.wiki/wiki/Flakes#Output_schema
  # <system> = [ "$arch" ]
  
  outputs = {
    nixpkgs,
      nix-flatpak,
      ...
  }@inputs {
    # system = [ "x86_64-linux" ];
    # 
  };
}
#+end_src
* ARM

Embedded computers named after fruits bc i guess it's a pacman reference?

** U-Boot

For orange pi 5+ see [[https://github.com/NixOS/nixpkgs/blob/master/pkgs/misc/uboot/default.nix#L495-L506][ubootOrangePi5Plus]], [[https://github.com/NixOS/nixpkgs/blob/master/pkgs/by-name/rk/rkbin/package.nix][rkbin]] and [[https://nixos.wiki/wiki/NixOS_on_ARM][NixOS on ARM]]

+ defconfig :: the kernel config profile
+ extraMeta.platforms :: the arm platform
+ BL31 :: the trusted firmware image, espcific to RK3588
+ ROCKCHIP_TPL :: a "TPL blob" to init low-power DDR4/DDR5 ([[https://gitlab.collabora.com/hardware-enablement/rockchip-3588/notes-for-rockchip-3588/-/blob/main/upstream_uboot.md?ref_type=heads][collabora notes]])
+ filesToInstall :: defaults to:
  - u-boot.itb
  - idbloader.img
  - u-boot-rockchip.bin
  - u-boot-rockchip-spi.bin

#+begin_example nix

#+end_example


** hardware.sensor.hddtmp

This may be able to monitor the NVMe drive temperature. Supports: ARM/NVMe?

* HP G845

See [[https://packages.guix.gnu.org/packages/hw-probe/1.6.5/][hw-probe]] results for [[https://linux-hardware.org/?probe=32172c2866][HP 845 G7 on linux-hardware.org]]

#+begin_quote
The only way I was ever going to find out about hw-probe was by mungning
through the Guix package lists and descriptions
#+end_quote

+ =hardware.trackpoint.device = "???"=

* Services

* Emacs

* Hyprland

packages

| hyprcursor   | hyprkeys                     | hyprlandPlugins         | hyprlang     | hyprpanel       | hyprshot       | hyprutils           |
| hyprdim      | hyprland                     | hyprland-protocols      | hyprlauncher | hyprpaper       | hyprsome       | hyprwall            |
| hypre        | hyprland-activewindow        | hyprland-qt-support     | hyprlock     | hyprpicker      | hyprspace      | hyprwayland-scanner |
| hyprgraphics | hyprland-autoname-workspaces | hyprland-qtutils        | hyprls       | hyprpolkitagent | hyprsunset     | hypseus-singe       |
| hyprgui      | hyprland-monitor-attached    | hyprland-workspaces     | hyprnome     | hyprprop        | hyprswitch     | hysteria            |
| hypridle     | hyprland-per-window-layout   | hyprland-workspaces-tui | hyprnotify   | hyprshade       | hyprsysteminfo | hyx                 |

** Tools

*** Scripts

Tail via =socat=, from wiki

#+begin_src bash
hyprsock=$XDG_RUNTIME_DIR/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock
awkProg='/^activewindow>>/{print $3}'
socat -u "UNIX-CONNECT:$hyprsock" - \
    | stdbuf -o0 \
      awk -F '>>|,' $awkProg
#+end_src

** Theme

*** What Icons are available?

From the hyprland shell's environment, run:

#+begin_src shell
echo $XDG_DATA_DIRS | tr : '\n' \
    | sed -e 's/$/\/icons/g' \
    | xargs -n1 ls 2>/dev/null
#   | xargs -n1 tree -d -L3
#+end_src

Remove the stderr redirection to see which directories haunt your ricing
nightmares.

**** Or... There's =nwg-icon-picker= and =yad-icon-browser=

+ Both of these require proper setup up gtk theme & XDG icon search path.
+ Both may encounter issues with PAM or UWSM's environment setup.

** Eww & Yuck

+ A little complicated, but so is any event-driven system.

*** Systemd

+ This creates a systemd service that links the =per-user= profile path.

#+name: ewwBin
#+begin_src emacs-lisp
;; :noweb-ref ewwBin
(format "/etc/profiles/per-user/%s/bin/%s" (getenv "USER") "eww")
#+end_src

#+begin_src toml :tangle (format "%s/systemd/user/%s" (getenv "XDG_DATA_HOME") "ewwbar.service") :noweb yes
[Unit]
Description=EWW Daemon
After=graphical-session.target

[Service]
ExecStart=<<ewwBin()>> daemon --no-daemonize --debug
# eww close-all is sufficient to clean up, systemd needs to kill the process
ExecStop=<<ewwBin()>> close-all
Restart=on-failure

[Install]
WantedBy=graphical-session.target
#+end_src

*** CLI
**** TODO Move eww/yuck ish to notes

Widget control

| close-all | Close all windows, without killing the daemon |
| close     | Close the given windows                       |
| open-many | Open multiple windows at once.                |
| open      | Open a window                                 |

State

| active-windows | Show active window IDs; outputs =<window_id: <window_name>= |
| get            | Get the value of a variable if defined                    |
| list-windows   | List the names of active windows                          |
| poll           | Update a polling variable using its script                |
| state          | Prints the variables used in all currently open window    |
| update         | Update the value of a variable, in a running eww instance |

Structure

| debug | Print out the widget structure as seen by eww              |
| graph | Print out the scope graph structure in graphviz dot format |

Daemon Lifecycle

| daemon | Start the Eww daemon                             |
| kill   | Kill the eww daemon                              |
| logs   | Print and watch the eww logs                     |
| ping   | Ping the eww server, checking if it is reachable |
| reload | Reload the configuration                         |

Misc

| help              | Print this message or the help of the given subcommand(s) |
| inspector         | Open the GTK debugger                                     |
| shell-completions | Generate a shell completion script                        |

+ eww open-many :: will be deprecated, rolled into =eww open=

*** Example Bar

#+begin_src yuck :tangle (format "%s/eww/%s" (getenv "XDG_CONFIG_HOME") "eww.yuck")
(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "ðŸ”Š"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label "ï¡š"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "ðŸ’¾"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    time))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (button :onclick "wmctrl -s 0" 1)
    (button :onclick "wmctrl -s 1" 2)
    (button :onclick "wmctrl -s 2" 3)
    (button :onclick "wmctrl -s 3" 4)
    (button :onclick "wmctrl -s 4" 5)
    (button :onclick "wmctrl -s 5" 6)
    (button :onclick "wmctrl -s 6" 7)
    (button :onclick "wmctrl -s 7" 8)
    (button :onclick "wmctrl -s 8" 9)))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "ðŸŽµ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "printf '42'")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "90%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))
#+end_src

SCSS

#+begin_src scss :tangle (format "%s/eww/%s" (getenv "XDG_CONFIG_HOME") "eww.scss")
// Emacs/Org: the asterisk in `* {}` needs to be escaped as `,* {}`
,* {
  all: unset; // Unsets everything so you can style everything from scratch
}

// Global Styles
.bar {
  background-color: #3a3a3a;
  color: #b0b4bc;
  padding: 10px;
}

// Styles on classes (see eww.yuck for more information)

.sidestuff slider {
  all: unset;
  color: #ffd5cd;
}

.metric scale trough highlight {
  all: unset;
  background-color: #D35D6E;
  color: #000000;
  border-radius: 10px;
}

.metric scale trough {
  all: unset;
  background-color: #4e4e4e;
  border-radius: 50px;
  min-height: 3px;
  min-width: 50px;
  margin-left: 10px;
  margin-right: 20px;
}

.label-ram {
  font-size: large;
}

.workspaces button:hover {
  color: #D35D6E;
}
#+end_src


* Crashes: 
** Hyprland Logs

Show the last log. Doesn't work if you started a new =$hsesh=.

#+begin_src shell
xrd=$XDG_RUNTIME_DIR
hsesh=$(ls -t $xrd/hypr/ | head -n1)
cat $xrd/hypr/$hsesh/hyprland.log
#+end_src

** UWSM =hyprland-debug=

*** Add to =uwsm.programs.waylandCompositors=:

#+begin_example nix
hyprland-debug = { # this is the key for "~/.config/uwsm/env-$key"
  prettyName = "hyprland-debug"; # arbitrary
  binPath = "/run/current-system/sw/bin/Hyprland";
  comment = "Run Hyprland with env-hyprland-debug";
};
#+end_example

Copy =env-hyprland= to =env-hyprland-debug=.

#+begin_example shell
export HYPRLAND_CONFIG=~/.dotfiles/.config/hypr/kratos.hyprland-debug.conf
export GDK_BACKEND=wayland     # env = GDK_BACKEND,wayland,x11,*
export CLUTTER_BACKEND=wayland # env = CLUTTER_BACKEND,wayland
export SDL_VIDEODRIVER=wayland # env = SDL_VIDEODRIVER,wayland
export QT_QPA_PLATFORM=wayland # env = QT_QPA_BACKEND,wayland;xcb
#+end_example

create a =$(host).hyprland.debug.conf= wrapper

#+begin_src conf
debug {
  disable_logs=0
}
source=./kratos.hyprland.conf
#+end_src

#+end_src

*** Vars to Debug in UWSM env

And append vars like:

#+begin_example shell
# tracing
export HYPRLAND_TRACE=1 # verbose logging
export HYPRLAND_NO_RT=1 # disable realtime priority (helps timing for trace/etc)

# systemd
export HYPRLAND_NO_SD_NOTIFY=1 # disables hyprland "sd_notify" calls
export HYPRLAND_NO_SD_VARS=1   # disables mgmt of vars in sysd/dbus activation env

# maybe load a debug HYPRLAND_CONFIG
#+end_example

Aquamarine env vars

#+begin_example shell
# tracing
export AQ_TRACE=1 # verbose logging (req. hyprland tracing)

# multi-GPU
export AQ_DRM_DEVICES=/dev/dri/card1: ... # explicit list of GPU
export AQ_MGPU_NO_EXPLICIT=1 # disable explicit syncing on MGPU
export AQ_FORCE_LINEAR_BLIT=1 # avoid CPU blitting for MGPU/multi-monitor
#+end_example

=AQ_FORCE_LINEAR_BLIT=1= for MGPU while splitting monitors across multiple GPU's
... which is very dumb unless you must -- tell your iGPU wtf to do.

+ that may not work with eGPU on Laptop
+ or if gaming on a different GPU than what Hyprland owns
+ TLDR... tell your WM to use ONE device.


** Crash in Hyprland/UWSM/SDDM/Emacs

When I shut down doomemacs, hyprland crashes. The only clues are in =sudo
journalctl -xb -p7=

so it stops the desktop-related targets, then begins shutting hyprland
down. the first message there:

`wayland-wm@Hyprland.service: State 'stop-sigterm' timed out. Killing`

Hyprland starts klling subprocesses, gets to `eww` and `emacs` where I get

`wayland-wm@Hyprland.service: Failed to kill control
group/user.slice/user-1000.slice/user@1000.service/session.slice/walyland-wm@Hyprland.service,
ignoring: Operation not permitted`

*** Emacs running Outside of SystemD

Two servers running, closed a client. Compositor crashed



*** Hyprland startup processes


#+begin_example text
170537 /nix/store/8bk2kzrky5nmyb4nb4kj43pvbkr8dhqg-sddm-unwrapped-0.21.0/libexec/sddm-helper --socket /tmp/sddm-auth-a7dd2e04-96a8-497a-ac00-0a16af8a9495 --id 1 --start /nix/store/nrf3nri5mz5qrcgk34jcfb2l08w7wddj-uwsm-0.21.4/bin/uwsm start -S -F /run/current-system/sw/bin/Hyprland --user dc
170551 systemctl --user start --wait wayland-wm@Hyprland.service
170685 /run/current-system/sw/bin/Hyprland
#+end_src


