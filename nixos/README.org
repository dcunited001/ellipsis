


* Misc

** Flake

not using flakes for systems right now. doing so basically requires updating
system configurations at the same time as =home-manager= rebuilds

#+begin_src nix
{
  description = "Ellipsis NixOS Systems";
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-25.05";
    nix-flatpak = {
      url = "github:gmodena/nix-flatpak?ref=latest";
      inputs.nixpkgs.follow = "nixpkgs";
    };
  };

  # nixosConfigurations.<hostname>.config.system.build.toplevel
  # must be a derivation. can output:
  #
  # - modules: modules to build for output
  # - system: build for arch
  # - specialArgs: pass to system input
  #
  # nixosConfigurations.<hostname> is a fixed interface (config needs to go
  # into the modules listed

  # https://nixos.wiki/wiki/Flakes#Output_schema
  # <system> = [ "$arch" ]
  
  outputs = {
    nixpkgs,
      nix-flatpak,
      ...
  }@inputs {
    # system = [ "x86_64-linux" ];
    # 
  };
}
#+end_src



** Eww & Yuck

+ A little complicated, but so is any event-driven system.

*** Systemd

+ This creates a systemd service that links the =per-user= profile path.

#+name: ewwBin
#+begin_src emacs-lisp
;; :noweb-ref ewwBin
(format "/etc/profiles/per-user/%s/bin/%s" (getenv "USER") "eww")
#+end_src

#+begin_src toml :tangle (format "%s/systemd/user/%s" (getenv "XDG_DATA_HOME") "ewwbar.service") :noweb yes
[Unit]
Description=EWW Daemon
After=graphical-session.target

[Service]
ExecStart=<<ewwBin()>> daemon --no-daemonize --debug
# eww close-all is sufficient to clean up, systemd needs to kill the process
ExecStop=<<ewwBin()>> close-all
Restart=on-failure

[Install]
WantedBy=graphical-session.target
#+end_src

*** CLI
**** TODO Move eww/yuck ish to notes

Widget control

| close-all | Close all windows, without killing the daemon |
| close     | Close the given windows                       |
| open-many | Open multiple windows at once.                |
| open      | Open a window                                 |

State

| active-windows | Show active window IDs; outputs =<window_id: <window_name>= |
| get            | Get the value of a variable if defined                      |
| list-windows   | List the names of active windows                            |
| poll           | Update a polling variable using its script                  |
| state          | Prints the variables used in all currently open window      |
| update         | Update the value of a variable, in a running eww instance   |

Structure

| debug | Print out the widget structure as seen by eww              |
| graph | Print out the scope graph structure in graphviz dot format |

Daemon Lifecycle

| daemon | Start the Eww daemon                             |
| kill   | Kill the eww daemon                              |
| logs   | Print and watch the eww logs                     |
| ping   | Ping the eww server, checking if it is reachable |
| reload | Reload the configuration                         |

Misc

| help              | Print this message or the help of the given subcommand(s) |
| inspector         | Open the GTK debugger                                     |
| shell-completions | Generate a shell completion script                        |

+ eww open-many :: will be deprecated, rolled into =eww open=

*** Example Bar

#+begin_src yuck :tangle (format "%s/eww/%s" (getenv "XDG_CONFIG_HOME") "eww.yuck")
(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "ðŸ”Š"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label "ï¡š"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "ðŸ’¾"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    time))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (button :onclick "wmctrl -s 0" 1)
    (button :onclick "wmctrl -s 1" 2)
    (button :onclick "wmctrl -s 2" 3)
    (button :onclick "wmctrl -s 3" 4)
    (button :onclick "wmctrl -s 4" 5)
    (button :onclick "wmctrl -s 5" 6)
    (button :onclick "wmctrl -s 6" 7)
    (button :onclick "wmctrl -s 7" 8)
    (button :onclick "wmctrl -s 8" 9)))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "ðŸŽµ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "printf '42'")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "90%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))
#+end_src

SCSS

#+begin_src scss :tangle (format "%s/eww/%s" (getenv "XDG_CONFIG_HOME") "eww.scss")
// Emacs/Org: the asterisk in `* {}` needs to be escaped as `,* {}`
,* {
  all: unset; // Unsets everything so you can style everything from scratch
}

// Global Styles
.bar {
  background-color: #3a3a3a;
  color: #b0b4bc;
  padding: 10px;
}

// Styles on classes (see eww.yuck for more information)

.sidestuff slider {
  all: unset;
  color: #ffd5cd;
}

.metric scale trough highlight {
  all: unset;
  background-color: #D35D6E;
  color: #000000;
  border-radius: 10px;
}

.metric scale trough {
  all: unset;
  background-color: #4e4e4e;
  border-radius: 50px;
  min-height: 3px;
  min-width: 50px;
  margin-left: 10px;
  margin-right: 20px;
}

.label-ram {
  font-size: large;
}

.workspaces button:hover {
  color: #D35D6E;
}
#+end_src


