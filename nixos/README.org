
* Nix Source

[[https://github.com/search?q=repo%3ANixOS%2Fnixpkgs++pam+path%3A%2F%5Enixos%5C%2Fmodules%5C%2F%2F&type=code&p=2]['PAM/SystemD Env. activation]]

+ nixos/modules :: module-list.nix
+ nixos/modules/security :: pam.nix, pam_mount.nix
  - systemd-confinement.nix
+ nixos/modules/config
  - ldap.nix
+ nixos/modules/services
  - cage.nix
+ nixos/modules/services/display-managers
  - sddm.nix
+ pkgs/desktops
  - plasma-5/kwallet-pam.nix
+ pkgs/.../pam_u2f.nix


* Misc

** Nix Lang

convert attrs to list

#+begin_example nix
# docs indicate that nix lang seems to preserve order pretty good (req. for hashing)
let pp = pkgs.tree-sitter.builtGrammars; in { kk = __attrNames pp; vv = __attrValues pp; }

# now, just interleave them. (lib.lists.ziplists does this)

# fortunately: <nixpkgs/lib>.mapAttrsToList
:i <nixpkgs/lib>
mapAttrsToList(k: v: [k v]) pkgs.tree-sitter.builtGrammars;

# right-to-left
:print map(id) (mapAttrsToList(k: v: [k v]) pkgs.tree-sitter.builtGrammars)

# [ ...
#   [ "tree-sitter-yaml"
#     «derivation /nix/store/npn8hbc1h866r80kjqzdm82zijkskk8s-tree-sitter-yaml-grammar-0.25.3.drv» ]
#   [ "tree-sitter-yang"
#     «derivation /nix/store/gw1bn0hnl9an7i7vr05d5px9xs3v4w7c-tree-sitter-yang-grammar-0.25.3.drv» ]
#   [ "tree-sitter-zig"
#     «derivation /nix/store/c0rwhl5ykx85a8b988r3d2ky430bbmml-tree-sitter-zig-grammar-0.25.3.drv»]
# ]
#+end_example

Before realizing that the editor assumes to dynamically link with tree-sitter
& grammar definitions, i tried the following, which variously produced lists
of mostly derivations, none of which worked.

+ [pkgs.tree-sitter.withPlugins (_: pkgs.tree-sitter.allGrammars)];
+ __attrValues pkgs.tree-sitter-grammars;
+ (concat (__attrValues pkgs.tree-sitter.builtGrammars));
+ tree-sitter.allGrammars;
 (lib.mapAttrsToList(k: v: [k v]) pkgs.tree-sitter.builtGrammars);

** Flake

not using flakes for systems right now. doing so basically requires updating
system configurations at the same time as =home-manager= rebuilds

#+begin_src nix
{
  description = "Ellipsis NixOS Systems";
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-25.05";
    nix-flatpak = {
      url = "github:gmodena/nix-flatpak?ref=latest";
      inputs.nixpkgs.follow = "nixpkgs";
    };
  };

  # nixosConfigurations.<hostname>.config.system.build.toplevel
  # must be a derivation. can output:
  #
  # - modules: modules to build for output
  # - system: build for arch
  # - specialArgs: pass to system input
  #
  # nixosConfigurations.<hostname> is a fixed interface (config needs to go
  # into the modules listed

  # https://nixos.wiki/wiki/Flakes#Output_schema
  # <system> = [ "$arch" ]
  
  outputs = {
    nixpkgs,
      nix-flatpak,
      ...
  }@inputs {
    # system = [ "x86_64-linux" ];
    # 
  };
}
#+end_src
* ARM

Embedded computers named after fruits bc i guess it's a pacman reference?

** U-Boot

For orange pi 5+ see [[https://github.com/NixOS/nixpkgs/blob/master/pkgs/misc/uboot/default.nix#L495-L506][ubootOrangePi5Plus]], [[https://github.com/NixOS/nixpkgs/blob/master/pkgs/by-name/rk/rkbin/package.nix][rkbin]] and [[https://nixos.wiki/wiki/NixOS_on_ARM][NixOS on ARM]]

+ defconfig :: the kernel config profile
+ extraMeta.platforms :: the arm platform
+ BL31 :: the trusted firmware image, espcific to RK3588
+ ROCKCHIP_TPL :: a "TPL blob" to init low-power DDR4/DDR5 ([[https://gitlab.collabora.com/hardware-enablement/rockchip-3588/notes-for-rockchip-3588/-/blob/main/upstream_uboot.md?ref_type=heads][collabora notes]])
+ filesToInstall :: defaults to:
  - u-boot.itb
  - idbloader.img
  - u-boot-rockchip.bin
  - u-boot-rockchip-spi.bin

#+begin_example nix

#+end_example


** hardware.sensor.hddtmp

This may be able to monitor the NVMe drive temperature. Supports: ARM/NVMe?

* HP G845

See [[https://packages.guix.gnu.org/packages/hw-probe/1.6.5/][hw-probe]] results for [[https://linux-hardware.org/?probe=32172c2866][HP 845 G7 on linux-hardware.org]]

#+begin_quote
The only way I was ever going to find out about hw-probe was by mungning
through the Guix package lists and descriptions
#+end_quote

+ =hardware.trackpoint.device = "???"=

* Services
* Guix

** TL;DR:

idk much about nix really, so i may have borked the install

+ if it's possible only partially use =services.guix= and supply your own
  guix. the executables are designed to be portable anyways.
+ idk about first-order problems, but constructing systemd units with
  =/var/guix/profiles/...= links /should/ be possible . . .
  - (thinks very hard, runs into wall anyways)

**** User environment setup for =guix pull=

+ don't add =pkgs.guix= to user =.nix-profile= or =users.users.dc.packages=
  - also don't install =guix= using =nix-home=
+ mainly, ensure that =environment.sessionVariables= defines =XDG_CONFIG_PATH=
  and other =XDG= vars
  - nix =home-manager= may also do it, but this doesn't permit the nix
    builders to modify it for activation scripts (something about PAM and
    other processes ... something something)
  - if this is happening, =$PATH= includes =/guix/profile/bin=
  - =home-manager= is maybe not the place for XDG & some vars (idk)
+ if you run =guix describe= using =pkgs.guix=, it doesn't have repo history.
  - once you start adding to the store, it may not create links/etc correctly
    - you should probably start over. i encountered a few errors where =guix=
      (not =pkgs.guix=) refused to install links.
  - doing this in the console is easier because you can't have 50 shells with
    unique environments (env somewhat inherited from WM)

**** Problems with =services.guix=

+ maybe possible to unpack guix =.tar.gz= to =/gnu/store=
  - unless the =/gnu/store= exists (also remove =/var/guix/db=, etc
+ it may be possible to bootstrap guix from source instead
  - see the "Perfect Setup" instructions. This needs some automation to keep
    it up to date for =guix pull.
+ to restrict access to guix daemons by group membership, the services/etc
  need customization.

**** Existential problem

+ if =pkgs.guix= used by =services.guix= provide an incompatible =guix= or
  =guix-daemon= (particularly the latter), this may eventually cause problems
  - releases from =nixpkgs= should keep it reasonably up-to-date (it's
    pinned). the wrappers & service units likely hardcode the guix/daemon
    paths
  - you can easily bump this forward, but your system upgrades must build
    guix... which is an example of why you may like your system config
    decoupled from your =home-manager=, depending on wherein the deptree you
    build/overlay.

    

** Doom Emacs setup

| DOOMDIR | $HOME/.doom.d | EMACSDIR | $HOME/.emacs.doom |

clear out old =eln= code and =straight=

+ install the =.guix-profile with emacs, etc.=
+ =rm -rf $EMACSDIR/.local/{cache/eln,straight}=
+ run =doomup=. see [[https://github.com/dcunited001/ellipsis][scripts in dcunited001/ellipsis]]

*** Guile environment setup

Setting up a guix profile with a GC root for a project

#+begin_src shell
guix package  -L ~/.dotfiles/ellipsis -L ~/.dotfiles/dc \
	 -p .guix-profile -m manifest.scm
#+end_src

I assumed more guile setup, since =GUILE_LOAD_PATH= wasn't in my env, but
that's implicit in the =guix= wrapper ... i didn't think i'd need it, but i
had specified the load path incorrectly (misread module refs in errors)

*** doom.service

Ran into issues here, somewhat because systemd needed a restart.

Either dump the env with =systemctl --user show-environment= or set
=ExecStart=/bin/sh -c "guix shell -p $DOOMDIR/$GPROFILE -- env | sort
&& sleep 3"=

...... dammit, this is starting to look like, um, maybe a bad idea --
emacs may launch quite a few procs. I mean it's not that bad, but it
will drift. And I don't want to wonder why my wayland sessions
suddenly crash in 3 months. it's been so much more stable since Sawy
in 2021.


#+begin_example diff
diff -u /home/$USER/.dotfiles/nixos/systemd.user.env /home/$USER/.dotfiles/nixos/systemd.guix.env
--- /home/$USER/.dotfiles/nixos/systemd.user.env	2025-07-19 04:26:35.689472526 -0400
+++ /home/$USER/.dotfiles/nixos/systemd.guix.env	2025-07-19 04:29:35.086260723 -0400
@@ -8,6 +8,7 @@
 EDITOR=emacsclient -- -nw
 EMACSDIR=/home/$USER/.emacs.doom
 EMACS=/home/$USER/.doom.d/.guix-profile/bin/emacs
+EMACSLOADPATH=/gnu/store/2swxcw7ii7gir1kn6rm0xqrp4lr1j77w-profile/share/emacs/site-lisp
 GDK_BACKEND=wayland
@@ -15,13 +16,15 @@
 GPROFILE=.guix-profile
 GTK_A11Y=none
 GTK_PATH=/home/$USER/.config/guix/current/lib/gtk-2.0:/home/$USER/.config/guix/current/lib/gtk-3.0:/home/$USER/.config/guix/current/lib/gtk-4.0:/home/$USER/.guix-home/profile/lib/gtk-2.0:/home/$USER/.guix-home/profile/lib/gtk-3.0:/home/$USER/.guix-home/profile/lib/gtk-4.0:/home/$USER/.guix-profile/lib/gtk-2.0:/home/$USER/.guix-profile/lib/gtk-3.0:/home/$USER/.guix-profile/lib/gtk-4.0:/home/$USER/.local/share/flatpak/exports/lib/gtk-2.0:/home/$USER/.local/share/flatpak/exports/lib/gtk-3.0:/home/$USER/.local/share/flatpak/exports/lib/gtk-4.0:/var/lib/flatpak/exports/lib/gtk-2.0:/var/lib/flatpak/exports/lib/gtk-3.0:/var/lib/flatpak/exports/lib/gtk-4.0:/home/$USER/.nix-profile/lib/gtk-2.0:/home/$USER/.nix-profile/lib/gtk-3.0:/home/$USER/.nix-profile/lib/gtk-4.0:/home/$USER/.local/state/nix/profile/lib/gtk-2.0:/home/$USER/.local/state/nix/profile/lib/gtk-3.0:/home/$USER/.local/state/nix/profile/lib/gtk-4.0:/home/$USER/.local/state/nix/profile/lib/gtk-2.0:/home/$USER/.local/state/nix/profile/lib/gtk-3.0:/home/$USER/.local/state/nix/profile/lib/gtk-4.0:/etc/profiles/per-user/$USER/lib/gtk-2.0:/etc/profiles/per-user/$USER/lib/gtk-3.0:/etc/profiles/per-user/$USER/lib/gtk-4.0:/nix/var/nix/profiles/default/lib/gtk-2.0:/nix/var/nix/profiles/default/lib/gtk-3.0:/nix/var/nix/profiles/default/lib/gtk-4.0:/run/current-system/sw/lib/gtk-2.0:/run/current-system/sw/lib/gtk-3.0:/run/current-system/sw/lib/gtk-4.0
-GUIX_LOCPATH=/home/$USER/.config/guix/current/lib/locale:/home/$USER/.guix-home/profile/lib/locale:/home/$USER/.guix-profile/lib/locale
+GUIX_ENVIRONMENT=/gnu/store/2swxcw7ii7gir1kn6rm0xqrp4lr1j77w-profile
+GUIX_LOCPATH=/home/$USER/.config/guix/current/lib/locale:/home/$USER/.guix-home/profile/lib/locale:/home/$USER/.guix-profile/lib/locale:/gnu/store/j56gxg83w1a50h2bw6531by30kmc277y-glibc-utf8-locales-2.41/lib/locale
+_=/home/$USER/.config/guix/current/bin/guix
 HOME=/home/dc
 HYPRLAND_CONFIG=/home/$USER/.dotfiles/.config/hypr/kratos.hyprland.conf
 HYPRLAND_INSTANCE_SIGNATURE=9958d297641b5c84dcff93f9039d80a5ad37ab00_1752911948_1640879395
-INFOPATH=/home/$USER/.config/guix/current/info:/home/$USER/.config/guix/current/share/info:/home/$USER/.guix-home/profile/info:/home/$USER/.guix-home/profile/share/info:/home/$USER/.guix-profile/info:/home/$USER/.guix-profile/share/info:/home/$USER/.local/share/flatpak/exports/info:/home/$USER/.local/share/flatpak/exports/share/info:/var/lib/flatpak/exports/info:/var/lib/flatpak/exports/share/info:/home/$USER/.nix-profile/info:/home/$USER/.nix-profile/share/info:/home/$USER/.local/state/nix/profile/info:/home/$USER/.local/state/nix/profile/share/info:/home/$USER/.local/state/nix/profile/info:/home/$USER/.local/state/nix/profile/share/info:/etc/profiles/per-user/$USER/info:/etc/profiles/per-user/$USER/share/info:/nix/var/nix/profiles/default/info:/nix/var/nix/profiles/default/share/info:/run/current-system/sw/info:/run/current-system/sw/share/info
-INVOCATION_ID=25541bb5e9094e27b3ec6c05b39802e1
-JOURNAL_STREAM=9:60961
+INFOPATH=/gnu/store/2swxcw7ii7gir1kn6rm0xqrp4lr1j77w-profile/share/info:/home/$USER/.config/guix/current/info:/home/$USER/.config/guix/current/share/info:/home/$USER/.guix-home/profile/info:/home/$USER/.guix-home/profile/share/info:/home/$USER/.guix-profile/info:/home/$USER/.guix-profile/share/info:/home/$USER/.local/share/flatpak/exports/info:/home/$USER/.local/share/flatpak/exports/share/info:/var/lib/flatpak/exports/info:/var/lib/flatpak/exports/share/info:/home/$USER/.nix-profile/info:/home/$USER/.nix-profile/share/info:/home/$USER/.local/state/nix/profile/info:/home/$USER/.local/state/nix/profile/share/info:/home/$USER/.local/state/nix/profile/info:/home/$USER/.local/state/nix/profile/share/info:/etc/profiles/per-user/$USER/info:/etc/profiles/per-user/$USER/share/info:/nix/var/nix/profiles/default/info:/nix/var/nix/profiles/default/share/info:/run/current-system/sw/info:/run/current-system/sw/share/info
+INVOCATION_ID=0ee71ed9d4374f6594d9b668a48b0938
+JOURNAL_STREAM=9:61433
 LANG=en_US.UTF-8
 LD_LIBRARY_PATH=/nix/store/0vsc2vbzkhm5cdyg2c9rywdrbh0hycs2-pipewire-1.4.5-jack/lib
@@ -40,18 +43,17 @@
-PATH=/run/wrappers/bin:/home/$USER/.config/guix/current/bin:/home/$USER/.guix-home/profile/bin:/home/$USER/.guix-profile/bin:/home/$USER/.local/share/flatpak/exports/bin:/var/lib/flatpak/exports/bin:/home/$USER/.nix-profile/bin:/home/$USER/.local/state/nix/profile/bin:/home/$USER/.local/state/nix/profile/bin:/etc/profiles/per-user/$USER/bin:/nix/var/nix/profiles/default/bin:/run/current-system/sw/bin:/nix/store/m10ngkbjxbj0lqdq6rsyys9h2gj1f27d-util-linux-2.41-bin/bin:/nix/store/bflsjj2cndl8fz690nx8aigf2x3q16d4-newt-0.52.24/bin:/nix/store/7x3jv5lbhc836hczmx642jg8gwwsyvf6-libnotify-0.8.6/bin:/nix/store/0nxvi9r5ymdlr2p24rjj9qzyms72zld1-bash-interactive-5.2p37/bin:/nix/store/ymmaa926pv3f3wlgpw9y1aygdvqi1m7j-systemd-257.6/bin:/nix/store/avhdfiwxm991wgmcgvmhmvgvwn9gavq6-python3-3.12.11-env/bin:/nix/store/gwk546kxw024v371l34sw11zvzqrxhdv-dmenu-5.3/bin:/nix/store/m10ngkbjxbj0lqdq6rsyys9h2gj1f27d-util-linux-2.41-bin/bin:/nix/store/bflsjj2cndl8fz690nx8aigf2x3q16d4-newt-0.52.24/bin:/nix/store/7x3jv5lbhc836hczmx642jg8gwwsyvf6-libnotify-0.8.6/bin:/nix/store/0nxvi9r5ymdlr2p24rjj9qzyms72zld1-bash-interactive-5.2p37/bin:/nix/store/ymmaa926pv3f3wlgpw9y1aygdvqi1m7j-systemd-257.6/bin:/nix/store/avhdfiwxm991wgmcgvmhmvgvwn9gavq6-python3-3.12.11-env/bin:/nix/store/gwk546kxw024v371l34sw11zvzqrxhdv-dmenu-5.3/bin:/nix/store/2gkh9v7wrzjq6ws312c6z6ajwnjvwcmb-binutils-wrapper-2.44/bin:/nix/store/xizrx0pmgjbsx6miwk352nf77jw2rb60-hyprland-qtutils-0.1.4/bin:/nix/store/7gspl5402q53m36mavbq3rxxlh70kqfv-pciutils-3.13.0/bin:/nix/store/9aanvmg69mvcs192ikk7rvs3gw1rgy37-pkgconf-wrapper-2.4.3/bin
+PATH=/gnu/store/2swxcw7ii7gir1kn6rm0xqrp4lr1j77w-profile/bin:/run/wrappers/bin:/home/$USER/.config/guix/current/bin:/home/$USER/.guix-home/profile/bin:/home/$USER/.guix-profile/bin:/home/$USER/.local/share/flatpak/exports/bin:/var/lib/flatpak/exports/bin:/home/$USER/.nix-profile/bin:/home/$USER/.local/state/nix/profile/bin:/home/$USER/.local/state/nix/profile/bin:/etc/profiles/per-user/$USER/bin:/nix/var/nix/profiles/default/bin:/run/current-system/sw/bin:/nix/store/m10ngkbjxbj0lqdq6rsyys9h2gj1f27d-util-linux-2.41-bin/bin:/nix/store/bflsjj2cndl8fz690nx8aigf2x3q16d4-newt-0.52.24/bin:/nix/store/7x3jv5lbhc836hczmx642jg8gwwsyvf6-libnotify-0.8.6/bin:/nix/store/0nxvi9r5ymdlr2p24rjj9qzyms72zld1-bash-interactive-5.2p37/bin:/nix/store/ymmaa926pv3f3wlgpw9y1aygdvqi1m7j-systemd-257.6/bin:/nix/store/avhdfiwxm991wgmcgvmhmvgvwn9gavq6-python3-3.12.11-env/bin:/nix/store/gwk546kxw024v371l34sw11zvzqrxhdv-dmenu-5.3/bin:/nix/store/m10ngkbjxbj0lqdq6rsyys9h2gj1f27d-util-linux-2.41-bin/bin:/nix/store/bflsjj2cndl8fz690nx8aigf2x3q16d4-newt-0.52.24/bin:/nix/store/7x3jv5lbhc836hczmx642jg8gwwsyvf6-libnotify-0.8.6/bin:/nix/store/0nxvi9r5ymdlr2p24rjj9qzyms72zld1-bash-interactive-5.2p37/bin:/nix/store/ymmaa926pv3f3wlgpw9y1aygdvqi1m7j-systemd-257.6/bin:/nix/store/avhdfiwxm991wgmcgvmhmvgvwn9gavq6-python3-3.12.11-env/bin:/nix/store/gwk546kxw024v371l34sw11zvzqrxhdv-dmenu-5.3/bin:/nix/store/2gkh9v7wrzjq6ws312c6z6ajwnjvwcmb-binutils-wrapper-2.44/bin:/nix/store/xizrx0pmgjbsx6miwk352nf77jw2rb60-hyprland-qtutils-0.1.4/bin:/nix/store/7gspl5402q53m36mavbq3rxxlh70kqfv-pciutils-3.13.0/bin:/nix/store/9aanvmg69mvcs192ikk7rvs3gw1rgy37-pkgconf-wrapper-2.4.3/bin
 PWD=/home/dc
 QT_QPA_PLATFORM=wayland
 QTWEBKIT_PLUGIN_PATH=/home/$USER/.config/guix/current/lib/mozilla/plugins/:/home/$USER/.guix-home/profile/lib/mozilla/plugins/:/home/$USER/.guix-profile/lib/mozilla/plugins/:/home/$USER/.local/share/flatpak/exports/lib/mozilla/plugins/:/var/lib/flatpak/exports/lib/mozilla/plugins/:/home/$USER/.nix-profile/lib/mozilla/plugins/:/home/$USER/.local/state/nix/profile/lib/mozilla/plugins/:/home/$USER/.local/state/nix/profile/lib/mozilla/plugins/:/etc/profiles/per-user/$USER/lib/mozilla/plugins/:/nix/var/nix/profiles/default/lib/mozilla/plugins/:/run/current-system/sw/lib/mozilla/plugins/
-_=/run/current-system/sw/bin/env
 SDL_VIDEODRIVER=wayland
 SHELL=/run/current-system/sw/bin/zsh
-SYSTEMD_EXEC_PID=12911
+SYSTEMD_EXEC_PID=13165
 TERMINFO_DIRS=/home/$USER/.config/guix/current/share/terminfo:/home/$USER/.guix-home/profile/share/terminfo:/home/$USER/.guix-profile/share/terminfo:/home/$USER/.local/share/flatpak/exports/share/terminfo:/var/lib/flatpak/exports/share/terminfo:/home/$USER/.nix-profile/share/terminfo:/home/$USER/.local/state/nix/profile/share/terminfo:/home/$USER/.local/state/nix/profile/share/terminfo:/etc/profiles/per-user/$USER/share/terminfo:/nix/var/nix/profiles/default/share/terminfo:/run/current-system/sw/share/terminfo
#+end_example

** System Guix

See ./modules/services/guix.nix

+ =stateDir= forces compilation of =pkgs.guix= when the pin changes...
  - but I really need the system entirely on one partition
    
** User Guix

JUST DON'T DO THIS.

#+begin_example nix
{pkgs,...}:
{
user.users.dc.packages = [
  # ...
  pkgs.guix

  # overrides are bad (this is wrong) ...
  #   and idk, but if I superstitiously repeat pkgs.foobar,
  #   then for now, super douple plus good
  # pkgs.guix.override { stateDir = "/gnu/var"; }
}
#+end_example

*** Fix Activation script

See [[https://discourse.nix.org/t/why-does-nixos-not-set-xdg-config-home-by-default/45296][Why does NixOS not set =$XDG_CONFIG_HOME= by default]]

Maybe this occured because I ported in my home directory. I removed
=~/.profile= to check the environment.

=/nix/profile/bin=

- should be =$XDG_STATE_HOME/nix/profile/bin=
- the link =$XDG_STATE_HOME/nix/profile= doesn't exist.
- i'm not sure whether it's supposed to link to
  =/nix/var/nix/profiles/per-user/$USER/channels=

=/guix/current/bin=

- same thing: should link to =$XDG_CONFIG_HOME/guix/current/bin=
- the link =$XDG_CONFIG_HOME/guix/current= /does/ exist
- the link gets created by the activation script, which never actually
  creates the =/gnu/var/guix/profiles/per-user/$USER/current-guix=. i
  set =services.guix.stateDir = /gnu/var= so it's a bit different. that
  threw me for a loop when debugging.

so for me, I needed to manually create that by running:

#+begin_src sh
# in bash, fresh login
$prof=$XDG_CONFIG_HOME/guix/current
guix package -p $prof -i guix # install the package

# ensure path is right

GUIX_PROFILE=$prof
source $prof/etc/profile

# now guix pull works
guix pull

# logout of vty & window manager, login with fresh env
echo $PATH | tr ':' '\n'

# the profile is still incorrect in the path (since the activation script was created incorrectly...)
#+end_src

maybe it was my install, idk. the process for =nix= is likely similar. I
have a feeling once the correct =$PATH= is exported, then a system
update will allow the nix builder to build correctly

**** Original =$PATH=

testing file exists using =stat $(echo $PATH | tr ":" " ")=

| y   | link points to file that exists |
| !!! | invalid link                    |

root $PATH

| y   | /run/wrappers/bin                    |
| !!! | /guix/current/bin                    |
|     | /root/.guix-home/profile/bin           |
|     | /root/.guix-profile/bin                |
|     | /root/.local/share/flatpak/exports/bin |
| y   | /var/lib/flatpak/exports/bin         |
|     | /root/.nix-profile/bin                 |
| !!! | /nix/profile/bin                     |
|     | /root/.local/state/nix/profile/bin     |
|     | /etc/profiles/per-user/root/bin      |
|     | /nix/var/nix/profiles/default/bin    |
| y   | /run/current-system/sw/bin           |

user $PATH

| y   | /home/$USER/.local/bin                       |
| y   | /run/wrappers/bin                          |
| !!! | /guix/current/bin                          |
|     | /home/$USER/.guix-home/profile/bin           |
|     | /home/$USER/.guix-profile/bin                |
| y   | /home/$USER/.local/share/flatpak/exports/bin |
| y   | /var/lib/flatpak/exports/bin               |
|     | /home/$USER/.nix-profile/bin                 |
| !!! | /nix/profile/bin                           |
|     | /home/$USER/.local/state/nix/profile/bin     |
| y   | /etc/profiles/per-user/$USER/bin           |
|     | /nix/var/nix/profiles/default/bin          |
| y   | /run/current-system/sw/bin                 |


**** User Guix =stateDir= mismatch

#+begin_quote
This was what I was speculating...

I actually did end up linking =/var/guix -> /gnu/var/guix= instead of creating
a new subvolume at =/var/guix=. it seems to work.
#+end_quote

The system has a single store with various GC roots. Usually have two main
profiles. I don't think installing Guix with =nix home-manager= is going to
work.

+ A symlink seems to work to fix the =stateDir= mismatch between the system &
  user guix: =sudo ln -s /gnu/var/guix /var/guix=. It seems to work...
  avoiding the override.
  - i'm seeing a build failure when updating user's default profile.
  - using =guix gc --verify={contents,repair}= somewhat frequently probably
    couldn't hurt. store corruption is the main worry, esp. if sharing between
    systems...
  - it also eliminates the recompile of guix (system+user) for at least user
    (guix is pinned on nix). 
+ I have confidence that the =/var/guix= path is =12-factor= ...
  - sharing b/w systems is somewhat out of scope for design.
  - the host can share a store to a hosted VM. CI requires special GC
    configuration (& other concerns) for storage replication & distributed
    substitutes. So there are at least two use cases that require decoupling.
  - I'm mostly curious.

in theory, I can have btrfs subvolumes for /var on guix system the sqlite db
cache needs to match for both nix/guix systems... probably not a great idea,
but as long as sqlite cache is in tact, it should work.

* Emacs

** Font Issues



** Systemd



* Hyprland

packages

| hyprcursor   | hyprkeys                     | hyprlandPlugins         | hyprlang     | hyprpanel       | hyprshot       | hyprutils           |
| hyprdim      | hyprland                     | hyprland-protocols      | hyprlauncher | hyprpaper       | hyprsome       | hyprwall            |
| hypre        | hyprland-activewindow        | hyprland-qt-support     | hyprlock     | hyprpicker      | hyprspace      | hyprwayland-scanner |
| hyprgraphics | hyprland-autoname-workspaces | hyprland-qtutils        | hyprls       | hyprpolkitagent | hyprsunset     | hypseus-singe       |
| hyprgui      | hyprland-monitor-attached    | hyprland-workspaces     | hyprnome     | hyprprop        | hyprswitch     | hysteria            |
| hypridle     | hyprland-per-window-layout   | hyprland-workspaces-tui | hyprnotify   | hyprshade       | hyprsysteminfo | hyx                 |

** Tools

*** Scripts

Tail via =socat=, from wiki

#+begin_src bash
hyprsock=$XDG_RUNTIME_DIR/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock
awkProg='/^activewindow>>/{print $3}'
socat -u "UNIX-CONNECT:$hyprsock" - \
    | stdbuf -o0 \
      awk -F '>>|,' $awkProg
#+end_src


** NWG


** Eww & Yuck

+ A little complicated, but so is any event-driven system.

*** Systemd

+ This creates a systemd service that links the =per-user= profile path.

#+name: ewwBin
#+begin_src emacs-lisp
;; :noweb-ref ewwBin
(format "/etc/profiles/per-user/%s/bin/%s" (getenv "USER") "eww")
#+end_src

#+begin_src toml :tangle (format "%s/systemd/user/%s" (getenv "XDG_DATA_HOME") "ewwbar.service") :noweb yes
[Unit]
Description=EWW Daemon
After=graphical-session.target

[Service]
ExecStart=<<ewwBin()>> daemon --no-daemonize --debug
# eww close-all is sufficient to clean up, systemd needs to kill the process
ExecStop=<<ewwBin()>> close-all
Restart=on-failure

[Install]
WantedBy=graphical-session.target
#+end_src

*** CLI
**** TODO Move eww/yuck ish to notes

Widget control

| close-all | Close all windows, without killing the daemon |
| close     | Close the given windows                       |
| open-many | Open multiple windows at once.                |
| open      | Open a window                                 |

State

| active-windows | Show active window IDs; outputs =<window_id: <window_name>= |
| get            | Get the value of a variable if defined                    |
| list-windows   | List the names of active windows                          |
| poll           | Update a polling variable using its script                |
| state          | Prints the variables used in all currently open window    |
| update         | Update the value of a variable, in a running eww instance |

Structure

| debug | Print out the widget structure as seen by eww              |
| graph | Print out the scope graph structure in graphviz dot format |

Daemon Lifecycle

| daemon | Start the Eww daemon                             |
| kill   | Kill the eww daemon                              |
| logs   | Print and watch the eww logs                     |
| ping   | Ping the eww server, checking if it is reachable |
| reload | Reload the configuration                         |

Misc

| help              | Print this message or the help of the given subcommand(s) |
| inspector         | Open the GTK debugger                                     |
| shell-completions | Generate a shell completion script                        |

+ eww open-many :: will be deprecated, rolled into =eww open=

*** Example Bar

#+begin_src yuck :tangle (format "%s/eww/%s" (getenv "XDG_CONFIG_HOME") "eww.yuck")
(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "🔊"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label ""
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "💾"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    time))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (button :onclick "wmctrl -s 0" 1)
    (button :onclick "wmctrl -s 1" 2)
    (button :onclick "wmctrl -s 2" 3)
    (button :onclick "wmctrl -s 3" 4)
    (button :onclick "wmctrl -s 4" 5)
    (button :onclick "wmctrl -s 5" 6)
    (button :onclick "wmctrl -s 6" 7)
    (button :onclick "wmctrl -s 7" 8)
    (button :onclick "wmctrl -s 8" 9)))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "🎵${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "printf '42'")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "90%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))
#+end_src

SCSS

#+begin_src scss :tangle (format "%s/eww/%s" (getenv "XDG_CONFIG_HOME") "eww.scss")
// Emacs/Org: the asterisk in `* {}` needs to be escaped as `,* {}`
,* {
  all: unset; // Unsets everything so you can style everything from scratch
}

// Global Styles
.bar {
  background-color: #3a3a3a;
  color: #b0b4bc;
  padding: 10px;
}

// Styles on classes (see eww.yuck for more information)

.sidestuff slider {
  all: unset;
  color: #ffd5cd;
}

.metric scale trough highlight {
  all: unset;
  background-color: #D35D6E;
  color: #000000;
  border-radius: 10px;
}

.metric scale trough {
  all: unset;
  background-color: #4e4e4e;
  border-radius: 50px;
  min-height: 3px;
  min-width: 50px;
  margin-left: 10px;
  margin-right: 20px;
}

.label-ram {
  font-size: large;
}

.workspaces button:hover {
  color: #D35D6E;
}
#+end_src


* Crashes: 
** Hyprland Logs

Show the last log. Doesn't work if you started a new =$hsesh=.

#+begin_src shell
xrd=$XDG_RUNTIME_DIR
hsesh=$(ls -t $xrd/hypr/ | head -n1)
cat $xrd/hypr/$hsesh/hyprland.log
#+end_src

** UWSM =hyprland-debug=

*** Add to =uwsm.programs.waylandCompositors=:

#+begin_example nix
hyprland-debug = { # this is the key for "~/.config/uwsm/env-$key"
  prettyName = "hyprland-debug"; # arbitrary
  binPath = "/run/current-system/sw/bin/Hyprland";
  comment = "Run Hyprland with env-hyprland-debug";
};
#+end_example

Copy =env-hyprland= to =env-hyprland-debug=.

#+begin_example shell
export HYPRLAND_CONFIG=~/.dotfiles/.config/hypr/kratos.hyprland-debug.conf
export GDK_BACKEND=wayland     # env = GDK_BACKEND,wayland,x11,*
export CLUTTER_BACKEND=wayland # env = CLUTTER_BACKEND,wayland
export SDL_VIDEODRIVER=wayland # env = SDL_VIDEODRIVER,wayland
export QT_QPA_PLATFORM=wayland # env = QT_QPA_BACKEND,wayland;xcb
#+end_example

create a =$(host).hyprland.debug.conf= wrapper

#+begin_src conf
debug {
  disable_logs=0
}
source=./kratos.hyprland.conf
#+end_src

#+end_src

*** Vars to Debug in UWSM env

And append vars like:

#+begin_example shell
# tracing
export HYPRLAND_TRACE=1 # verbose logging
export HYPRLAND_NO_RT=1 # disable realtime priority (helps timing for trace/etc)

# systemd
export HYPRLAND_NO_SD_NOTIFY=1 # disables hyprland "sd_notify" calls
export HYPRLAND_NO_SD_VARS=1   # disables mgmt of vars in sysd/dbus activation env

# maybe load a debug HYPRLAND_CONFIG
#+end_example

Aquamarine env vars

#+begin_example shell
# tracing
export AQ_TRACE=1 # verbose logging (req. hyprland tracing)

# multi-GPU
export AQ_DRM_DEVICES=/dev/dri/card1: ... # explicit list of GPU
export AQ_MGPU_NO_EXPLICIT=1 # disable explicit syncing on MGPU
export AQ_FORCE_LINEAR_BLIT=1 # avoid CPU blitting for MGPU/multi-monitor
#+end_example

=AQ_FORCE_LINEAR_BLIT=1= for MGPU while splitting monitors across multiple GPU's
... which is very dumb unless you must -- tell your iGPU wtf to do.

+ that may not work with eGPU on Laptop
+ or if gaming on a different GPU than what Hyprland owns
+ TLDR... tell your WM to use ONE device.


** Crash in Hyprland/UWSM/SDDM/Emacs

When I shut down doomemacs, hyprland crashes. The only clues are in =sudo
journalctl -xb -p7=

so it stops the desktop-related targets, then begins shutting hyprland
down. the first message there:

`wayland-wm@Hyprland.service: State 'stop-sigterm' timed out. Killing`

Hyprland starts klling subprocesses, gets to `eww` and `emacs` where I get

`wayland-wm@Hyprland.service: Failed to kill control
group/user.slice/user-1000.slice/user@1000.service/session.slice/walyland-wm@Hyprland.service,
ignoring: Operation not permitted`

*** Emacs running Outside of SystemD

Two servers running, closed a client. Compositor crashed



*** Hyprland startup processes


#+begin_example text
170537 /nix/store/8bk2kzrky5nmyb4nb4kj43pvbkr8dhqg-sddm-unwrapped-0.21.0/libexec/sddm-helper --socket /tmp/sddm-auth-a7dd2e04-96a8-497a-ac00-0a16af8a9495 --id 1 --start /nix/store/nrf3nri5mz5qrcgk34jcfb2l08w7wddj-uwsm-0.21.4/bin/uwsm start -S -F /run/current-system/sw/bin/Hyprland --user dc
170551 systemctl --user start --wait wayland-wm@Hyprland.service
170685 /run/current-system/sw/bin/Hyprland
#+end_src


