#+title: GnuPG Configuration
#+description:
#+startup: content
#+property: header-args        :tangle-mode (identity #o400) :mkdirp yes
#+property: header-args:conf   :tangle-mode (identity #o400) :mkdirp yes
#+property: header-args:sh     :tangle-mode (identity #o500) :mkdirp yes
#+property: header-args:bash   :tangle-mode (identity #o500) :mkdirp yes
#+property: header-args:scheme :tangle-mode (identity #o500) :mkdirp yes :comments link
#+options: toc:nil

* GPG Environment

** Pinentry

** Portable GPG

Use =guix pack= to pack up the binaries.

+ --system aarch64-linux :: makes the manifest portable to arm64
+ --relocatable :: twice enables binaries requiring user
  namespaces to function with a fallback execution engine
  - you may want the -RR relocatable option
+ -S :: creates links from the profile within the tar to the
  dependences in the guix packages
  
#+begin_src shell :eval no
guixpkg=$(guix pack --relocatable --system=x86_64-linux --compression=gzip --save-provenance \
      -L $HOME/.dotfiles -m ./gnupg-agent.scm \
      -S .bin=bin)
mkdir -p pkg
cp $guixpkg pkg
#+end_src

Then unpack:

#+begin_src shell :eval no
tar -C pkg -xzvf $guixpkg
#+end_src

The profile will be in =./gnu/store/*profile=

#+begin_src shell :eval no
tar --list -zf pkg/$guixpkg | grep 'profile/bin'

# or, more exactly, after unpacking with
guixprofile=$(find gnu/store -name "*-profile" -type d)
#guixprofile=$(find pkg/gnu/store -wholename "*profile/etc/profile")
ln -s $guixprofile .guix-gnupg
#+end_src

Then source the $guixprofile/etc/profile from a script

+ Some dependencies may require symlinking =-S lib=lib= or =-S libexec/libexec=.

Test the profile's binaries in a clean shell with:

#+begin_src shell :eval no
guix shell --profile=.guix-gnupg -- bash
#+end_src

***** TODO export a guix profile to the disk

* Init Script

#+begin_src shell :tangle ./init.sh :shebang "#!/bin/sh" :tangle-mode (identity #o500)
export GPG_TTY="$(tty)"
export SECRETS_HOME="$(pwd)"
export GNUPGHOME="$SECRETS_HOME/.gnupg"

# load GnuPG profile
GUIX_GNUPG=.guix-gnupg
GUIX_EXTRA=$HOME/.guix-extra-profiles

if [ -f $GUIX_GNUPG/etc/profile ]; then
  GUIX_PROFILE=$GUIX_GNUPG
  source $GUIX_GNUPG/etc/profile
else
  echo "$GUIX_GNUPG not found. Trying $GUIX_EXTRA"
  if [ -d $GUIX_EXTRA ]; then
    GUIX_PROFILE=$HOME/.guix-extra-profiles/gnupg/gnupg
    source $HOME/.guix-extra-profiles/gnupg/gnupg/etc/profile
  else
    echo "$GUIX_PROFILE not found. access gpg* some other way"
    return 123
  fi
fi

# SSH
unset SSH_AGENT_PID
export SSH_CONFIG_HOME="$SECRETS_HOME/.ssh"
export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"

# GPG Agent
# see below for startup scripts

# SSH Agent
# should be disabled

# Shroud Database
export SHROUD_CONFIG_FILE=$SECRETS_HOME/.shroud
export SHROUD_DATABASE_FILE=$SECRETS_HOME/.config/shroud/db.gpg

#+end_src

** SSH Agent (via GPG)

*** Notes

+ Using SSH via GnuPG
  - =/bye= redirects SSH calls to its socket to the GnuPG embedded SSH agent

+ The list of approved keys is stored in =~/.gnupg/sshcontrol=

+ If you use a PGP key for SSH auth (requires =Authentication= capability)
  - check for the key (when s/card is loaded) by listing keys or
    checking fingerprints: =ssh-add -l/L=
  - if the GPG is not on a s/card, then add the keygrip to =~/.gpg/sshcontrol=

This would cause GnuPG daemon's =GPG_TTY= variable to be updated on
every SSH command invocation: but allows you to enter the pin from the
same terminal you are ssh-connecting through. 

#+begin_src conf
Match host * exec "gpg-connect-agent UPDATESTARTUPTTY /bye"
#+end_src

** GPG Agent

*** Notes

+ Prefer to start with =gpgconf=
+ Yubikey: The =GPG_TTY= variable is how =pinentry= knows where to retrieve input

***** How to update this environment variable from another TTY? (broadcast?)

*** Start

**** With =gpg-connect-agent=

#+begin_src shell :tangle .bin/start-gpg-connect :shebang "#!/bin/sh" :tangle-mode (identity #o500)
export GPG_TTY="$(tty)"
unset SSH_AGENT_PID
export SSH_AUTH_SOCK="/run/user/$UID/gnupg/S.gpg-agent.ssh"
gpg-connect-agent update-startuptty /bye > /dev/null
#+end_src

**** With =gpgconf=

#+begin_src shell :tangle .bin/start-gpg :shebang "#!/bin/sh" :tangle-mode (identity #o500)
export GPG_TTY="$(tty)"
unset SSH_AGENT_PID
export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
gpgconf --launch gpg-agent
#+end_src


* GPG

** GPG Config

*** Refs

- [[https://github.com/drduh/config/blob/master/gpg.conf][drduh/config]] gpg.conf
- [[https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration-Options.html][GPG Config Options]] (docs)
- [[https://www.gnupg.org/documentation/manuals/gnupg/GPG-Esoteric-Options.html][GPG Esoteric Options]] (docs)

*** Defaults

#+begin_src conf :tangle ./.gnupg/gpg.conf.defaults
# Use AES256, 192, or 128 as cipher
personal-cipher-preferences AES256 AES192 AES

# Use SHA512, 384, or 256 as digest
personal-digest-preferences SHA512 SHA384 SHA256

# Use ZLIB, BZIP2, ZIP, or no compression
personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed

# Default preferences for new keys
default-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed

# SHA512 as digest to sign keys
cert-digest-algo SHA512

# SHA512 as digest for symmetric ops
s2k-digest-algo SHA512

# AES256 as cipher for symmetric ops
s2k-cipher-algo AES256

# UTF-8 support for compatibility
charset utf-8

# Show Unix timestamps
fixed-list-mode

# No comments in signature
no-comments

# No version in output
no-emit-version

# Disable banner
no-greeting

# Long hexidecimal key format
keyid-format 0xlong

# Display UID validity
list-options show-uid-validity
verify-options show-uid-validity

# Display all keys and their fingerprints
with-fingerprint

# Display key origins and updates
#with-key-origin

# Cross-certify subkeys are present and valid
require-cross-certification

# Disable caching of passphrase for symmetrical ops
no-symkey-cache

# Enable smartcard
use-agent

# Disable recipient key ID in messages
throw-keyids

# Default/trusted key ID to use (helpful with throw-keyids)
#default-key 0xFF3E7D88647EBCDB
#trusted-key 0xFF3E7D88647EBCDB

# Group recipient keys (preferred ID last)
#group keygroup = 0xFF00000000000001 0xFF00000000000002 0xFF3E7D88647EBCDB

# Keyserver URL
#keyserver hkps://keys.openpgp.org
#keyserver hkps://keyserver.ubuntu.com:443
#keyserver hkps://hkps.pool.sks-keyservers.net
#keyserver hkps://pgp.ocf.berkeley.edu

# Proxy to use for keyservers
#keyserver-options http-proxy=http://127.0.0.1:8118
#keyserver-options http-proxy=socks5-hostname://127.0.0.1:9050

# Verbose output
#verbose

# Show expired subkeys
#list-options show-unusable-subkeys
#+end_src

** Agent Config

*** Defaults

#+begin_src conf :tangle ./.gnupg/gpg-agent.conf.defaults
# https://github.com/drduh/config/blob/master/gpg-agent.conf
# https://www.gnupg.org/documentation/manuals/gnupg/Agent-Options.html
enable-ssh-support
ttyname $GPG_TTY

# Yubikey PIN is cached by the yubikey itself
# - these options don't affect it. you must unplug the key.
default-cache-ttl 60
max-cache-ttl 120

# pinentry-program must be set or gpg-agent expects an X11 compatible one
pinentry-program /usr/bin/pinentry-curses
#pinentry-program /usr/bin/pinentry-tty
#pinentry-program /usr/bin/pinentry-gtk-2
#pinentry-program /usr/bin/pinentry-x11
#pinentry-program /usr/bin/pinentry-qt
#pinentry-program /usr/local/bin/pinentry-curses
#pinentry-program /usr/local/bin/pinentry-mac
#pinentry-program /opt/homebrew/bin/pinentry-mac                 
#+end_src

* SSH

** Config

+ the env variable =${SSH_CONFIG_HOME}= can be used if exported

*** Refs

- [[https://github.com/drduh/config/blob/master/ssh_config][drduh/config]] (ssh_config)

*** Defaults

#+begin_src conf :tangle ./.ssh/config.defaults

# For now
IdentitiesOnly Yes

#Host router
#  IdentityFile ${SSH_CONFIG_HOME}/.ssh/router
#  HostName 192.168.1.1
#  Port 2222
#  User sysadm
#  ControlMaster auto
#  ControlPath ~/.ssh/master-%r@%h:%p
#  ControlPersist 300
Host gitlab.com
  User git
  ControlMaster no
  IdentitiesOnly yes
  IdentityFile ${SSH_CONFIG_HOME}/.ssh/gitlab
Host github.com
  User git
  ControlMaster no
  IdentitiesOnly yes
  IdentityFile ${SSH_CONFIG_HOME}/.ssh/github
  MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com
Host *
  #ControlMaster auto
  #ControlPath ~/.ssh/master-%r@%h:%p
  #ControlPersist 300
  #AddKeysToAgent yes
  AddressFamily inet
  HashKnownHosts yes
  VisualHostKey yes
  PasswordAuthentication no
  ChallengeResponseAuthentication no
  StrictHostKeyChecking ask
  VerifyHostKeyDNS yes
  ForwardAgent no
  ForwardX11 no
  ForwardX11Trusted no
  ServerAliveInterval 300
  ServerAliveCountMax 2
  Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com
  MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com
  KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
  HostKeyAlgorithms ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,ssh-rsa

#+end_src

* Shroud

This is a password/secrets management tool. In the =gnupg-agent.scm=
profile, =shroud-nox= references a package in [[https://github.com/dcunited001/ellipsis/blob/master/ellipsis/packages/password-utils.scm][dcunited001/ellipsis]],
which is not [yet?] a channel.

For this kind of secrets management, shroud is a good
choice:

+ Minimal dependencies: guile scheme, gpg
+ GPG integration: and this means smartcard integration.
+ In memory: GPG means the secrets are pulled into RAM and then gone.

Alternatives considered:

+ tomb :: This is a nice one, but requires zsh. I don't fully trust
  zsh and would prefer to avoid the dependency.
+ pwsafe :: I couldn't find a Guix package without X11/GTK
  dependencies. There are several packages, but it's a bit confusing.
+ file-system-based tools :: LUKS is secure ... until you mount
  it. Other tools like truecrypt/veracrypt/fscrypt are similar. I
  don't want to have to trust even my own user. If it is mounted as a
  file-system, then other processes can impersonate my user and access
  the data.
  - with GPG-based tools, if my yubikey is required, then it is much
    more difficult for processes to impersonate authorization.

** Config

See the environment variables in =init.sh=

*** Defaults

#+begin_src scheme :tangle .shroud.defaults
'((user-id . "myemail@fdsa.com"))
#+end_src

* Tangling



** File Ownership/Permissions

I couldn't find options to specify file owner/group when tangling
files. The permissions of these files are critical. GPG/Agent and SSH
will refuse to function if the permissions are not set correctly. When
the permissions are not in =400,600,700=, then the group should
probably be set to =wheel=.




