:PROPERTIES:
:ID:       7bc7dff1-e0c2-4928-abc5-7ffc433a3a9a
:END:
#+TITLE:     Emacs: A Config For Network Managment
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes

* About

All the configuration takes place in config.el. For most of the dependencies,
you will need to have the corresponding Guix package loaded

**** TODO manual links
**** TODO guix profile list for .emacs.network
**** TODO port over minimal elisp

* Caveats

Using multiple emacs profiles can confuse an org-agenda workflow. If you use
org-agenda, the simplest way to do this is to have one emacs and only one
emacs...

Some of these gotchas are fairly difficult to foresee without experience. It may
mean that what you're working towards just won't work out. Hopefully, someone is
there to tell you about it beforehand...

**** TODO complete caveat for org-agenda across multiple emacs

***** Emacs Buffers are Shared At the Emacs Server Level Only

To work on distributed systems, I would recommend using the Tramp approach. This allows you to connect to remote servers to edit files, so long as you have SSH access.

This means that you have to track which instance of Emacs has which projects/files open, or the various instances can stomp on each other.

+ One solution to this is autosaving files for a specific mode when they are changed. Save as quickly as possible and the likelihood that another
  - if two emacsen [processes] have the same file read to memory, the only with
    the older version wil complain. When using Tramp, this notification to emacs
    that the file has changed under the surface may lag.
  - This presents some challenges for syncthing.

***** Org Agenda Compounds Things

Most org-agenda content is read from files, maintained in memory (in emacs buffers), then updated into those files. So if you're using the "Tramp" approach, then you need to be extra mindful of which projects/files you are working on.

***** Syncthing for files, Git for Transactions

The configuration here is pretty complex.

***** Multiple Emacsen are More Efficient

This isn't usually the sense in which emacsen is used. Emacs is single-threaded.
At first, this seems like WHOA! WTF?! but it's really not a big deal:

+ child processes can have their own threads and emacs can pull updates in at
  file-system boundaries or at other interfaces/membranes.
+ In some ways, this approach is genius. For example, your editor and all the
  community plugins /NEVER, EVER/ (not once) have to really care about
  thread-locking or mutex issues. Also, your development env/IDE can never
  consume all your CPU.

Org-Roam is a fantastic example of this multi-process approach. LSP
Server and LSP in containers is another great example of using the
process abstraction to balance resource utilization.

Meanwhile, open 20 tabs in chromium/firefox and all those shiny single-page
javascript frameworks have your computer catatonic, keeling over like its on
chemo. Seriously though, if you say that "bitcoin is bad for the environment"
but you use javascript, that's just a very special kind of bliss, isn't it?

* Setup

** Emacs

Set up [[github:plexus/chemacs2][plexus/chemacs2]]. Plexus is one of those github repo strings worth
memorizing, like drduh and loxodo. I would install this configuration into
=~/.emacs.network=.

** Quelpa

For now, there is no =emacs-quelpa= package from Guix/

This config uses Quelpa, which is for emacs-lisp developers who want a faster
feedback loop. In this config, I'm using it for recipes to download
less-available packages like Cisco IOS mode.

You must clone quelpa into =~/.quelpa=, where it will be loaded by =init.el=

** Guix Manifest

+ Tangle the manifest in this file
+ Install the the guix man

#+begin_src scheme :tangle ./emacs.network.scm
  (specifications->manifest
   '(
     "git"

     ;; emacs
     "emacs-native-comp"
     "emacs-better-defaults"
     "emacs-hydra"
     "emacs-discover-my-major"

     ;; modus in dev builds only
     "emacs-modus-themes"

     ;; guix
     "emacs-guix"

     ;; emacs-lisp
     "emacs-dash"

     ;; lisp
     "emacs-lispy"

     ;; scheme/geiser/guile
     "emacs-geiser"
     "emacs-geiser-guile"

     ;; ansible
     "emacs-polymode-ansible"

     ;; autocomplete
     "emacs-auto-complete"

     ;; snippets
     "emacs-yasnippet"
     "emacs-yasnippet-snippets"
     ))
#+end_src

Then link the manifest (and run =~/.bin/update-dotfiles=)

#+begin_src shell :results none
[[ -L $_DF/.config/guix/manifests/emacs.network.scm ]] || ln -s $PWD/emacs.network.scm $_DF/.config/guix/manifests/emacs.network.scm
#+end_src

*** Activating the Manifest's Profile

If everything has been specified properly, then running the following will
download the dependencies into an isolated profile.

#+begin_src shell
activate-profiles emacs.network.scm
#+end_src


*** Loading the Profile

If you are using this in a windows manager, then you'll need to ensure that your
xsession /or whatever/ has the profile loaded wfhen you start emacs. There are a
few ways to do this:

**** Windows Manager

Ensure the guix profile is loaded by your =.xsession= script and restart your
window manager. See [[file:~/.dotfiles/.xsession.eg][.xsession.eg]] for more details.

This is one abstraction boundary at which I have Guix Profiles auto-loaded, but
it's not the only dep. injection point. You shouldn't over-rely on this one --
since =guix shell= and =guix environment= obviate it and more appropriately
constructs the stripped down environment you want for whatever project you're
working on. Regardless, sometimes you need a consistent set of dependencies
available for anything loaded by your xsession or window manager shell. So, it
maybe should be here:

- if a =*.desktop= file will launch a process that needs a dep
- if you want rofi to launch it.

If you want to be able to run this profile in the console -- bc your vttys might
as well be i3, right? -- then you'll want to avoid this method

**** XDG Desktop File

+ Add a =*.desktop= file and configure appropriately for your =.profile= and
  emacs. These are annoying to mess with and easily lost if not stored in VC.

**** Shepherd Service

***** TODO describe how to load a set of dependencies in on top of the shephered service before it is loaded (and when it is reloaded)

**** Emacs-Guix

The =emacs-guix= package allows you to reconcile the =GUIX_PROFILE= you have
loaded into emacs. To do this, you _may_ be able to ensure that
=(guix-set-emacs-environment &optional PROFILE)= runs in your =.emacs.d= (or
=.emacs.network= if you're following the instructions). This will happen
server-wide, so you may decide to manage multiple processes for emacs in
addition to a system-wide emacs server.

**** Guix Environment

This is the abstraction membrane to use. (I say membrane because there is no
clear up or down to this tree). With a =guix shell= or =guix environment= you
will be able to spawn a process, stripped down to only the guix profiles that
you want to load.

To do this, create an executable bin to run the emacs with isolated
dependencies:

#+begin_src shell :tangle (concat (getenv "HOME") "/.bin/emacs_network") :results none :shebang #!/bin/sh
guix environment -p ~/.guix-extra-profiles/emacs.network/emacs.network -- emacs --with-profile=network
#+end_src

Now running =emacs_network= from a shell or from dmenu should run the editor in
the appropriate environment. If not, emacs will tell you that your =init.el=
failed.

**** TODO update the load-path in init.el to ... uhhh make this happen

* Functionality

** Guix

**** TODO complete Guix description

** Ansible

This configuration is intended mostly to get me an interface to Ansible or,
shit, at least a mode that completes my YAML keywords (something, something VS
Code).

**** TODO complete Ansible description

** Babel

Babel can be used with templating functionality, although noweb templates are do
not include funtionality that most templating systems include. Thus something more complex, like =Babel -> Jinja2= then =Shell= would be required.

**** TODO complete description

** Tramp

Configs can be deployed via SSH/Tramp. This can be done on some servers if SSH can write to the file system. Because of how

**** TODO complete Tramp description

*** Tramp with Babel

Babel can also run shell scripts on a remote server, but Ansible should be used
for this instead. Using Babel makes sense if:

+ you are working on an Ansible playbook where you don't plan on using roles or
  they are not well defined .....

** TFTP

** Cisco

This config uses =cisco-ios-mode= which i haven't fully explored yet, but should
provide a major-mode with some basic completion.

**** TODO update with more details (cisco IOS mode)

** Certificate Management

=x509-mode= provides some capability for interacting with certificates. I don't believe I'll use emacs to push certs, but instead to inspect/reflect on them.

**** TODO update with more details (x509 mode)
