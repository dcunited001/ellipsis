:PROPERTIES:
:ID:       83315604-b917-45e3-9366-afe6ba029a60
:END:
#+TITLE: Systems Configuration with Guix
#+AUTHOR: David Conner
#+DESCRIPTION:
#+PROPERTY: header-args    :tangle-mode (identity #o444) :mkdirp yes
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)
#+STARTUP: content
#+OPTIONS: toc:nil

* Table Of Contents :TOC_2_gh:
- [[#overview][Overview]]
- [[#scheme][Scheme]]
- [[#channels][Channels]]
- [[#systems][Systems]]
  - [[#base-configuration][Base Configuration]]
  - [[#machines][Machines]]
  - [[#usb-installation-image][USB Installation Image]]
- [[#profile-management][Profile Management]]
  - [[#activating-profiles][Activating Profiles]]
  - [[#updating-profiles][Updating Profiles]]
  - [[#updating-channels][Updating Channels]]
- [[#dotfiles-management][Dotfiles Management]]
  - [[#syncing][Syncing]]
  - [[#updating][Updating]]
- [[#nix-package-manager][Nix Package Manager]]
- [[#system-installation][System Installation]]

* Overview

My naming system is based on morphemes featured in Benveniste's book [[https://www.amazon.com/Dictionary-Indo-European-Concepts-Society-Benveniste/dp/0986132594][Dictionary
of Indo-European Concepts & Society]] -- mainly as a hack to cross-study this
stuff ... so I can actually retain it?

**** TODO Channel Tasks
**** TODO Base System Tasks
- [ ] compile & use my own flavor of Zen Kernel
  + also port over other features from garuda
**** TODO add =base-channel.scm= so ./bin/update-channels works

* Scheme

#+begin_src scheme :tangle .guile
;; readline for completion and input history at the REPL.
(cond ((false-if-exception (resolve-interface '(ice-9 readline)))
       =>
       (lambda (module)
         ((module-ref module 'activate-readline))))
      (else
       (display "Consider installing the 'guile-readline' package for
convenient interactive line editing and input history.\n\n")))

;; format to enable string interpolation
(use-modules (ice-9 format))

;; pretty-print objects (not colorlized, per se)
(use-modules (ice-9 pretty-print))


(unless (getenv "INSIDE_EMACS")
  (cond ((false-if-exception (resolve-interface '(ice-9 colorized)))
         =>
         (lambda (module)
           ;; Enable completion and input history at the REPL.
           ((module-ref module 'activate-colorized))))
        (else
         (display "Consider installing the 'guile-colorized' package
for a colorful Guile experience.\n\n"))))

#+end_src

* Channels

#+begin_src scheme :tangle .config/guix/base-channels.scm
 ;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

(list ;(channel
      ; (name 'channel-x)
      ; (url "file:///home/daviwil/Projects/Code/channel-x"))
      (channel
       (name 'flat)
       (url "https://github.com/flatwhatson/guix-channel.git")
       (commit
        "cf23f523afc611c2b35debf015d219c6f918337f")
       (introduction
        (make-channel-introduction
         "33f86a4b48205c0dc19d7c036c85393f0766f806"
         (openpgp-fingerprint
          "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
      (channel
       (name 'rde)
       (url "https://git.sr.ht/~abcdw/rde")
       (introduction
        (make-channel-introduction
         "257cebd587b66e4d865b3537a9a88cccd7107c95"
         (openpgp-fingerprint
          "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
      (channel
       (name 'nonguix)
       (url "https://gitlab.com/nonguix/nonguix"))
      (channel
       (name 'guix)
       (url "https://git.savannah.gnu.org/git/guix.git")
       ;; (url "file:///home/daviwil/Projects/Code/guix"))
       (introduction
        (make-channel-introduction
         "9edb3f66fd807b096b48283debdcddccfea34bad"
         (openpgp-fingerprint
          "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))
#+end_src

* Systems

** Base Configuration

Any configuration that derives from =base-operating-system= must invoke =guix
system= in a specific way to ensure it gets loaded correctly:

#+begin_example sh
sudo -E guix system -L ~/.dotfiles/.config/guix/systems reconfigure ~/.dotfiles/.config/guix/systems/$GUIX_SYSTEM_NAME.scm
#+end_example

*.config/guix/systems/base-system.scm:*

#+begin_src scheme :tangle .config/guix/systems/base-system.scm
(define-module (base-system)
  #:use-module (gnu)
  #:use-module (srfi srfi-1)
  #:use-module (gnu system nss)
  #:use-module (gnu services pm)
  #:use-module (gnu services cups)
  #:use-module (gnu services desktop)
  #:use-module (gnu services docker)
  #:use-module (gnu services networking)
  #:use-module (gnu services virtualization)
  #:use-module (gnu packages wm)
  #:use-module (gnu packages cups)
  #:use-module (gnu packages vim)
  #:use-module (gnu packages gtk)
  #:use-module (gnu packages xorg)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages file-systems)
  #:use-module (gnu packages gnome)
  #:use-module (gnu packages mtools)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages audio)
  #:use-module (gnu packages gnuzilla)
  #:use-module (gnu packages pulseaudio)
  #:use-module (gnu packages web-browsers)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages package-management)
  #:use-module (nongnu packages linux)
  #:use-module (nongnu system linux-initrd))

(use-service-modules nix)
(use-service-modules desktop xorg) ;sway/wayland?
(use-package-modules certs)
(use-package-modules shells)
#+end_src

Add a =udev= rule to enable members of the =video= group to control screen brightness.

#+begin_src scheme :tangle .config/guix/systems/base-system.scm

;; Allow members of the "video" group to change the screen brightness.
(define %backlight-udev-rule
  (udev-rule
   "90-backlight.rules"
   (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                  "\n"
                  "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))
#+end_src

Override the default =%desktop-services= to add the =udev= backlight configuration and include OpenVPN in the list of NetworkManager plugins.

#+begin_src scheme :tangle .config/guix/systems/base-system.scm

(define %my-desktop-services
  (modify-services
     %desktop-services

     (elogind-service-type config =>
       (elogind-configuration
         (inherit config)
         (handle-lid-switch-external-power 'suspend)))

     (udev-service-type config =>
       (udev-configuration
         (inherit config)
         (rules (cons %backlight-udev-rule (udev-configuration-rules config)))))

     (network-manager-service-type config =>
       (network-manager-configuration
         (inherit config)
         (vpn-plugins (list network-manager-openvpn))))))

#+end_src

+ TODO fix doom emacs wordwrap so the default scheme formatting in babel doesn't mess things up

Use the =libinput-driver= for all input device

Define the =base-operating-system= which will be inherited by all machine configurations.

#+begin_src scheme :tangle .config/guix/systems/base-system.scm
(define %xorg-libinput-config
  "
Section \"InputClass\"
  Identifier \"Touchpads\"
  Driver \"libinput\"
  MatchDevicePath \"/dev/input/event*\"
  MatchIsTouchpad \"on\"

  Option \"Tapping\" \"on\"
  Option \"TappingDrag\" \"on\"
  Option \"DisableWhileTyping\" \"on\"
  Option \"MiddleEmulation\" \"on\"
  Option \"ScrollMethod\" \"twofinger\"
EndSection

Section \"InputClass\"
  Identifier \"Keyboards\"
  Driver \"libinput\"
  MatchDevicePath \"/dev/input/event*\"
  MatchIsKeyboard \"on\"
EndSection
")
#+end_src

**** TODO see =loadkeys= and =/run/current-system/profile/share/keymaps= for more info on keyboards at cmdine

#+begin_src scheme :tangle .config/guix/systems/base-system.scm

(define-public base-operating-system
  (operating-system
   (host-name "eerse")
   (timezone "America/New_York")
   (locale "en_US.utf8")

   (kernel linux) ;use the non-free Linux kernel and firmware
   (firmware (list linux-firmware))
   (initrd microcode-initrd)

   (keyboard-layout (keyboard-layout "us" "altgr-intl"
                                     #:model "pc105"))

   (bootloader (bootloader-configuration
                (bootloader grub-efi-bootloader)
                (target "/boot/efi")
                (keyboard-layout keyboard-layout)))

    ;; Guix doesn't like it when there isn't a file-systems
    ;; entry, so add one that is meant to be overridden
    (file-systems (cons*
                   (file-system
                    (mount-point "/tmp")
                    (device "none")
                    (type "tmpfs")
                    (check? #f))
                   %base-file-systems))

    (users (cons (user-account
                  (name "dc")
                  (comment "David Conner")
                  (group "users")
                  (home-directory "/home/dc")
                  (supplementary-groups '(
                                          "wheel"      ;; sudo
                                          "netdev"     ;; network devices
                                          "kvm"
                                          "tty"
                                          "input"
                                          "docker"
                                          "realtime"   ;; Enable realtime scheduling
                                          "lp"         ;; control bluetooth
                                          "audio"      ;; control audio
                                          "video"      ;; control video
                                          )))

                 %base-user-accounts))

    (groups (cons (user-group (system? #t) (name "realtime"))
                  %base-groups))

    ;; install bare-minimum system packages
    (packages (append (list
                       openssh
                       git
                       ntfs-3g
                       exfat-utils
                       fuse-exfat
                       stow
                       vim
                       emacs
                       xterm
                       bluez
                       bluez-alsa
                       pipewire ;; TODO: pipewire?
                       tlp
                       xf86-input-libinput
                       nss-certs
                       gvfs)
                      %base-packages))

    (services (cons* (service slim-service-type

                              ;; TODO: customize slim
                              ;; - %default-slim-theme
                              ;; - %default-slim-theme-name
                              (slim-configuration
                               (xorg-configuration
                                (xorg-configuration
                                 (keyboard-layout keyboard-layout)
                                 (extra-config (list %xorg-libinput-config))))
                               (default-user "dc")
                               ))

                     (service tlp-service-type
                              (tlp-configuration
                               (cpu-boost-on-ac? #t)
                               (wifi-pwr-on-bat? #t)))
                     (pam-limits-service ;; This enables JACK to enter realtime mode
                                            (list
                                             (pam-limits-entry "@realtime" 'both 'rtprio 99)
                                             (pam-limits-entry "@realtime" 'both 'memlock 'unlimited)))
                     (extra-special-file "/usr/bin/env"
                                         (file-append coreutils "/bin/env"))
                     (service thermald-service-type)
                     (service docker-service-type)
                     (service libvirt-service-type ;; TODO how is libvirt configured?
                              (libvirt-configuration
                               (unix-sock-group "libvirt")
                               (tls-port "16555")))
                     (service cups-service-type
                              (cups-configuration
                               (web-interface? #t)
                               (extensions
                                (list cups-filters))))
                     (service nix-service-type)
                     (bluetooth-service #:auto-enable? #t)
                     (remove (lambda (service)
                               (eq? (service-kind service)  gdm-service-type))
                             %my-desktop-services)))

    ;; allow resolution of '.local' hostnames with mDNS
    (name-service-switch %mdns-host-lookup-nss)))
#+end_src

***** TODO how would I get this to work? 

these drivers can easily be loaded after install

#+begin_src scheme
(define-public base-xorg-configuration
  (xorg-configuration
   (drivers xf86-video-nouveau)
   (keyboard-layout keyboard-layout)
   (extra-config (list %xorg-libinput-config)))
)
#+end_src

**** Install Notes:
+ =gdm-service-type= is removed and =elogind-service-type= is configured in
  =%my-desktop-services= earlier. this alters the login & wm-selection behavior.
+ the =slim-service-type= along with the nested =xorg-configuration= is used
  instead of the GDM Display Manager.
  - find =xorg-configuration= in the Guix Docs
+ If additional window-managers are selected from the "Official Guix System"
  install, the packages for these are simply bundled in with:
  - =(append (list ...) %base-packages)=
  - i.e. i3, i3status, i3lock, dmenu, dunst, polybar would go here.
  - in these Dotfiles, the WM dependencies are bundled with the =desktop.scm= profile


** Machines

*** Per-System Settings

DW has also defined a function called =dw/system-settings-get= which can
retrieve these settings appropriately. This is used throughout =Desktop.org=.

#+begin_src emacs-lisp :tangle .emacs.d/per-system-settings.el :noweb yes

(require 'map) ;; Needed for map-merge

(setq dw/system-settings
  (map-merge
    'list
    '((desktop/dpi . 180)
      (desktop/background . "samuel-ferrara-uOi3lg8fGl4-unsplash.jpg")
      (emacs/default-face-size . 220)
      (emacs/variable-face-size . 245)
      (emacs/fixed-face-size . 200)
      (polybar/height . 35)
      (polybar/font-0-size . 18)
      (polybar/font-1-size . 14)
      (polybar/font-2-size . 20)
      (polybar/font-3-size . 13)
      (dunst/font-size . 20)
      (dunst/max-icon-size . 88)
      (vimb/default-zoom . 180)
      (qutebrowser/default-zoom . 200))
    <<system-settings>>))

#+end_src

*** hersai

2013 Macbook Pro

*.config/guix/systems/hersai.scm*

#+begin_src scheme :tangle .config/guix/systems/hersai.scm
(define-module (hersai)
  #:use-module (base-system)
  #:use-module (gnu)
  #:use-module (nongnu packages linux))

(operating-system
 (inherit base-operating-system)
 (host-name "hersai")

 ;; NOTE: has Broadcom BCM4360 wifi
 ;; TODO: add broadcom-bt-firmware
 (firmware (list linux-firmware
                 ;broadcom-sta
                 openfwwf-firmware))

 (mapped-devices
  (list (mapped-device
         (source (uuid "5d969658-9af4-48f0-b467-0ea6a4f82195"))
         (target "pde")
         (type luks-device-mapping))

        (mapped-device
         (source "matrix")
         (targets (list "matrix-rootvol" "matrix-swapvol" "matrix-homevol"))
         (type lvm-device-mapping)))
  )

(file-systems (cons*

               (file-system
                (device (file-system-label "root"))
                (mount-point "/")
                (type "ext4")
                (needed-for-boot? #t)
                (dependencies mapped-devices))

               (file-system
                (device (file-system-label "home"))
                (mount-point "/home")
                (type "ext4")
                (needed-for-boot? #f)
                (dependencies mapped-devices))

               (file-system
                (device (file-system-label "Data"))
                (mount-point "/data")
                (type "ext4")
                (needed-for-boot? #f))

               ;; /boot/efi needs to be enumerated here
               ;;   in addition to the (bootloader...) declaration
               (file-system
                (device "/dev/sda1")
                (mount-point "/boot/efi")
                (type "vfat"))
               %base-file-systems))

(swap-devices (list (file-system-label "swap")))

)
#+end_src

*System Settings*

#+begin_src emacs-lisp :noweb-ref system-settings :noweb-sep ""

  (when (equal system-name "hersai")
    '((desktop/dpi . nil)
      ;(desktop/dpi . 221)
      (emacs/default-face-size . 190)
      (emacs/variable-face-size . 200)
      (emacs/fixed-face-size . 190)
      (polybar/height . 48)
      (polybar/font-0-size . 24)
      (polybar/font-1-size . 18)
      (polybar/font-2-size . 27)
      (polybar/font-3-size . 13)
      (dunst/font-size . 32)
      (dunst/max-icon-size . 88)
      ;(vimb/default-zoom . 160)
      ;(qutebrowser/default-zoom . 180)
      ))

#+end_src

*** tokos

2011 Macbook Pro

*.config/guix/systems/tokos.scm*

#+begin_src scheme :tangle .config/guix/systems/tokos.scm
(define-module (tokos)
  #:use-module (base-system)
    #:use-module (gnu))

(operating-system
 (inherit base-operating-system)
 (hostname "tokos")

 (firmware linux-firmware
           ;; has Broadcom BCM4331 wifi
           broadcom-sta)

 ;(mapped-devices ...)

 ;(file-systems (cons* ...
 ;
 ;))
    )
#+end_src

#+begin_src emacs-lisp :noweb-ref system-settings :noweb-sep ""

  (when (equal system-name "tokos")
    '((desktop/dpi . 114)
      (emacs/default-face-size . 190)
      (emacs/variable-face-size . 200)
      (emacs/fixed-face-size . 190)
      (polybar/height . 32)
      (polybar/font-0-size . 16)
      (polybar/font-1-size . 12)
      (polybar/font-2-size . 18)
      (polybar/font-3-size . 11)
      (dunst/font-size . 20)
      (dunst/max-icon-size . 88)
      ;(vimb/default-zoom . 160)
      ;(qutebrowser/default-zoom . 180)
      ))

#+end_src

*** kratos

This is a casual desktop VM, but it's running Garuda Linux for now.

#+begin_src scheme :tangle .config/guix/systems/tokos.scm
(define-module (kratos)
  #:use-module (base-system)
    #:use-module (gnu))

(operating-system
 (inherit base-operating-system)
 (hostname "kratos")

 (firmware linux-firmware amd-microcode)

 ;(mapped-devices ...)

 ;(file-systems (cons* ...
 ;
 ;))
    )
#+end_src

#+begin_src emacs-lisp :noweb-ref system-settings :noweb-sep ""

  (when (equal system-name "kratos")
    '((desktop/dpi . 158) ;; TODO verify DPI
      (emacs/default-face-size . 190)
      (emacs/variable-face-size . 200)
      (emacs/fixed-face-size . 190)
      (polybar/height . 48)
      (polybar/font-0-size . 24)
      (polybar/font-1-size . 18)
      (polybar/font-2-size . 27)
      (polybar/font-3-size . 13)
      (dunst/font-size . 32)
      (dunst/max-icon-size . 88)
      ;(vimb/default-zoom . 160)
      ;(qutebrowser/default-zoom . 180)
      ))

#+end_src

*** kudos

A VM running with a large 4K display.

#+begin_src scheme :tangle .config/guix/systems/tokos.scm
(define-module (kudos)
  #:use-module (base-system)
    #:use-module (gnu))
#+end_src

#+begin_src emacs-lisp :noweb-ref system-settings :noweb-sep ""

  (when (equal system-name "kudos")
    '((desktop/dpi . 158) ;; TODO verify DPI
      (emacs/default-face-size . 190)
      (emacs/variable-face-size . 200)
      (emacs/fixed-face-size . 190)
      (polybar/height . 48)
      (polybar/font-0-size . 24)
      (polybar/font-1-size . 18)
      (polybar/font-2-size . 27)
      (polybar/font-3-size . 13)
      (dunst/font-size . 32)
      (dunst/max-icon-size . 88)
      ;(vimb/default-zoom . 160)
      ;(qutebrowser/default-zoom . 180)
      ))

#+end_src

** USB Installation Image

#+begin_src scheme :tangle .config/guix/systems/usb-install.scm

  ;;; Copyright © 2019 Alex Griffin <a@ajgrf.com>
  ;;; Copyright © 2019 Pierre Neidhardt <mail@ambrevar.xyz>
  ;;; Copyright © 2019 David Wilson <david@daviwil.com>
  ;;; Copyright © 2021 David Conner
  ;;;
  ;;; This program is free software: you can redistribute it and/or modify
  ;;; it under the terms of the GNU General Public License as published by
  ;;; the Free Software Foundation, either version 3 of the License, or
  ;;; (at your option) any later version.
  ;;;
  ;;; This program is distributed in the hope that it will be useful,
  ;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;;; GNU General Public License for more details.
  ;;;
  ;;; You should have received a copy of the GNU General Public License
  ;;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;; Generate a bootable image (e.g. for USB sticks, etc.) with:
  ;; $ guix system disk-image nongnu/system/install.scm

(define-module (nongnu system usb-install)
  #:use-module (gnu system)
  #:use-module (gnu system install)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages vim)
  #:use-module (gnu packages curl)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages mtools)
  #:use-module (gnu packages package-management)
  #:use-module (gnu packages file-systems)
  #:use-module (nongnu packages linux)
  #:export (installation-os-nonfree))

(define installation-os-nonfree
  (operating-system
   (inherit installation-os)
   (kernel linux)
   (firmware (list linux-firmware))

   (kernel-arguments '("quiet" "modprobe.blacklist=radeon" "net.iframes=0"))

   (packages
    (append (list exfat-utils
                  fuse-exfat
                  git
                  curl
                  stow
                  vim
                  emacs-no-x-toolkit)
            (operating-system-packages installation-os)))))

    installation-os-nonfree

#+end_src

* Profile Management

The guix packages on my system are separated into manifests. These can be
installed/updated inpedently (see [[https://github.com/daviwil/dotfiles/blob/master/Systems.org#profile-management][daviwil/dotfiles]]). The profiles get installed
under the =~/.guix-extra-profiles= path, which is sourced by =~/.profile= on
login, in addition to =~/.guix-profile=.

** Activating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the =~/.config/guix/manifests= folder and then installs those profiles for the first time.  For example:

#+begin_example sh
activate-profiles desktop emacs music
#+end_example

*.bin/activate-profiles:*

#+begin_src sh :tangle .bin/activate-profiles :shebang #!/bin/sh

# NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

GREEN='\033[1;32m'
RED='\033[1;30m'
NC='\033[0m'
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

profiles=$*
if [[ $# -eq 0 ]]; then
    profiles="$HOME/.config/guix/manifests/*.scm";
fi

for profile in $profiles; do
  # Remove the path and file extension, if any
  profileName=$(basename $profile)
  profileName="${profileName%.*}"
  profilePath="$GUIX_EXTRA_PROFILES/$profileName"
  manifestPath=$HOME/.config/guix/manifests/$profileName.scm

  if [ -f $manifestPath ]; then
    echo
    echo -e "${GREEN}Activating profile:" $manifestPath "${NC}"
    echo

    mkdir -p $profilePath
    guix package --manifest=$manifestPath --profile="$profilePath/$profileName"

    # Source the new profile
    GUIX_PROFILE="$profilePath/$profileName"
    if [ -f $GUIX_PROFILE/etc/profile ]; then
        . "$GUIX_PROFILE"/etc/profile
    else
        echo -e "${RED}Couldn't find profile:" $GUIX_PROFILE/etc/profile "${NC}"
    fi
  else
    echo "No profile found at path" $profilePath
  fi
done

#+end_src

** Updating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the =~/.config/guix/manifests= folder and then installs any updates to the packages contained within them.  If no profile names are provided, it walks the list of profile directories under =~/.guix-extra-profiles= and updates each one of them.

#+begin_example sh
update-profiles emacs
#+end_example

*.bin/update-profiles:*

#+begin_src sh :tangle .bin/update-profiles :shebang #!/bin/sh

# NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

GREEN='\033[1;32m'
NC='\033[0m'
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

profiles=$*
if [[ $# -eq 0 ]]; then
    profiles="$GUIX_EXTRA_PROFILES/*";
fi

for profile in $profiles; do
  profileName=$(basename $profile)
  profilePath=$GUIX_EXTRA_PROFILES/$profileName

  echo
  echo -e "${GREEN}Updating profile:" $profilePath "${NC}"
  echo

  guix package --profile="$profilePath/$profileName" --manifest="$HOME/.config/guix/manifests/$profileName.scm"
done

#+end_src

** Updating Channels

This script makes it easy to update all channels to the latest commit based on an original channel file (see the Channels section at the top of this document).

#+begin_src sh :tangle .bin/update-channels :shebang #!/bin/sh

  guix pull --channels=$HOME/.config/guix/base-channels.scm
  guix describe --format=channels > ~/.config/guix/channels.scm

#+end_src

* Dotfiles Management
** Syncing
** Updating

Updating the dotfiles requires running a script in Emacs to loop over
all of theliterate configuration =.org= files, running
=org-babel-tangle-file= to make sure all of the config files are up to
date.

*.bin/update-dotfiles*

#+begin_src sh :tangle .bin/update-dotfiles :shebang #!/bin/sh

  # Navigate to the directory of this script (generally ~/.dotfiles/.bin)
  cd $(dirname $(readlink -f $0))
  cd ..

  # The heavy lifting is done by an Emacs script
  emacs -Q --script ./.emacs.d/tangle-dotfiles.el

  # Make sure any running Emacs instance gets updated settings
  emacsclient -e '(load-file "~/.emacs.d/per-system-settings.el")' -a "echo 'Emacs is not currently running'" 

  # Update configuration symlinks
  stow .

#+end_src


*.emacs.d/tangle-dotfiles.el*

#+begin_src emacs-lisp :tangle .emacs.d/tangle-dotfiles.el

  (require 'org)
  (load-file "~/.dotfiles/.emacs.d/lisp/dw-settings.el")

  ;; Don't ask when evaluating code blocks
  (setq org-confirm-babel-evaluate nil)

  ;; (let* ((dotfiles-path (expand-file-name "~/.dotfiles"))
  (let* ((dotfiles-path (expand-file-name "~/.dotfiles"))
	 (org-files (directory-files dotfiles-path nil "\\.org$")))

    (defun dw/tangle-org-file (org-file)
      (message "\n\033[1;32mUpdating %s\033[0m\n" org-file)
      (org-babel-tangle-file (expand-file-name org-file dotfiles-path)))

    ;; Tangle Systems.org first
    (dw/tangle-org-file "Systems.org")

    (dolist (org-file org-files)
      (unless (member org-file '("README.org" "Systems.org"))
	(dw/tangle-org-file org-file))))

#+end_src

* Nix Package Manager

* System Installation
