#+TITLE: Systems Configuration with Guix
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

* Table of Contents
:PROPERTIES:
:TOC:      :include 2 :ignore this
:END:
:CONTENTS:
:END:

* Overview

My naming system is based on morphemes featured in Benveniste's book [[https://www.amazon.com/Dictionary-Indo-European-Concepts-Society-Benveniste/dp/0986132594][Dictionary
of Indo-European Concepts & Society]] -- mainly as a hack to cross-study this
stuff ... so I can actually retain it?

**** TODO Channel Tasks
**** TODO Base System Tasks
- [ ] compile & use my own flavor of Zen Kernel
  + also port over other features from garuda

* Channels

#+begin_src scheme :tangle .config/guix/channels.scm

    ;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

    (list ;(channel
            ;(name 'channel-x)
            ;(url "file:///home/daviwil/Projects/Code/channel-x"))
          (channel
            (name 'flat)
            (url "https://github.com/flatwhatson/guix-channel.git")
            (commit
              "7b8353ebbcf486e3344924d1cac0fa7ba47c371d")
            (introduction
              (make-channel-introduction
                "33f86a4b48205c0dc19d7c036c85393f0766f806"
                (openpgp-fingerprint
                  "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
          (channel
            (name 'nonguix)
            (url "https://gitlab.com/nonguix/nonguix"))
          (channel
            (name 'guix)
            (url "https://git.savannah.gnu.org/git/guix.git")
            ;; (url "file:///home/daviwil/Projects/Code/guix"))
            (introduction
              (make-channel-introduction
                "9edb3f66fd807b096b48283debdcddccfea34bad"
                (openpgp-fingerprint
                  "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))

#+end_src

* Systems

** Base Configuration

Any configuration that derives from =base-operating-system= must invoke =guix
system= in a specific way to ensure it gets loaded correctly:

#+begin_src sh
sudo -E guix system -L ~/.dotfiles/.config/guix/systems reconfigure ~/.dotfiles/.config/guix/systems/$GUIX_SYSTEM_NAME.scm
#+end_src

*.config/guix/systems/base-system.scm:*

#+begin_src scheme :tangle .config/guix/systems/base-system.scm
(define-module (base-system)
  #:use-module (gnu)
  #:use-module (srfi srfi-1)
  #:use-module (gnu system nss)
  #:use-module (gnu services pm)
  #:use-module (gnu services cups)
  #:use-module (gnu services desktop)
  #:use-module (gnu services docker)
  #:use-module (gnu services networking)
  #:use-module (gnu services virtualization)
  #:use-module (gnu packages wm)
  #:use-module (gnu packages cups)
  #:use-module (gnu packages vim)
  #:use-module (gnu packages gtk)
  #:use-module (gnu packages xorg)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages file-systems)
  #:use-module (gnu packages gnome)
  #:use-module (gnu packages mtools)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages audio)
  #:use-module (gnu packages gnuzilla)
  #:use-module (gnu packages pulseaudio)
  #:use-module (gnu packages web-browsers)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages package-management)
  #:use-module (nongnu packages linux)
  #:use-module (nongnu packages linux-initrd))

(use-service-modules nix)
(use-service-modules desktop xorg) ;sway/wayland?
(use-package-modules certs)
(use-package-modules shells)
#+end_src

Add a =udev= rule to enable members of the =video= group to control screen brightness.

#+begin_src scheme :tangle .config/guix/systems/base-system.scm

;; Allow members of the "video" group to change the screen brightness.
(define %backlight-udev-rule
  (udev-rule
   "90-backlight.rules"
   (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                  "\n"
                  "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))
#+end_src

Override the default =%desktop-services= to add the =udev= backlight configuration and include OpenVPN in the list of NetworkManager plugins.

#+begin_src scheme :tangle .config/guix/systems/base-system.scm

(define %my-desktop-services
  (modify-services
     %desktop-services

     (elogind-service-type config =>
       (elogind-configuration
         (inherit config)
         (handle-lid-switch-external-power 'suspend)))

     (udev-service-type config =>
       (udev-configuration
         (inherit config)
         (rules (cons %backlight-udev-rule (udev-configuration-rules config)))))

     (network-manager-service-type config =>
       (network-manager-configuration
         (inherit config)
         (vpn-plugins (list network-manager-openvpn))))))
#+end_src

+ TODO fix doom emacs wordwrap so the default scheme formatting in babel doesn't mess things up

Use the =libinput-driver= for all input device

#+begin_src scheme :tangle .config/guix/systems/base-system.scm
(define %xorg-libinput-config
  "
Section \"InputClass\"
  Identifier \"Touchpads\"
  Driver \"libinput\"
  MatchDevicePath \"/dev/input/event*\"
  MatchIsTouchpad \"on\"

  Option \"Tapping\" \"on\"
  Option \"TappingDrag\" \"on\"
  Option \"DisableWhileTyping\" \"on\"
  Option \"MiddleEmulation\" \"on\"
  Option \"ScrollMethod\" \"twofinger\"
EndSection

Section \"InputClass\"
  Identifier \"Keyboards\"
  Driver \"libinput\"
  MatchDevicePath \"/dev/input/event*\"
  MatchIsKeyboard \"on\"
EndSection
")
#+end_src

Define the =base-operating-system= which will be inherited by all machine configurations.

#+begin_src scheme :tangle ./config/guix/systems/base-system.scm
(define-public base-operating-system
  (operating-system
   (host-name "kudos")
   (timezone "America/New_York")
   (locale "en_US.utf8")

   (kernel linux) ;use the non-free Linux kernel and firmware
   (firmware (list linux-firmware))
   (initrd microcode-initrd)

   (keyboard-layout (keyboard-layout "us" "altgr-intl"
                                     #:model "104 key"))

    ))
#+end_src

** Machines
