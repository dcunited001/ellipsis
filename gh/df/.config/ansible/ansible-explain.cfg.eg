
[tags]
;run=
;skip=

# tags to run or skip. the list to skip has precedence

[defaults]

# default cmd & args for ad hoc ansible invocations
;module_args= # unless -a is specified
;module_name=command

# * inventory
;inventory=/etc/ansible/hosts
;strategy=linear

# * playbooks
;playbook_vars_root=top # set root playbooks (affects vars for host/group)
;playbook_dir= # for non-playbook CLIs have a ``--playbook-dir`` argument
;retry_files_enabled=False
;retry_files_save_path= # where retry files will be saved
;task_timeout=0

# * facts
;fact_caching=memory
;fact_caching_connection=
;fact_caching_prefix=ansible_facts
;fact_caching_timeout=86400
# fact_path (below)

# * logs
;no_log=False
;log_path=
;log_filter=
;local_tmp={{ ANSIBLE_HOME ~ "/tmp" }} # controller logging
;syslog_facility=LOG_USER # remote logging

# ** logs: options
;debug=False # apparently quite a bit of text
;verbosity=0
;deprecation_warnings=True
;devel_warning=True
;system_warnings=True # warning about the ansible controller' system
;verbose_to_stderr=False
# display_args_to_stdout (below)
# error_on_undefined_vars (below)

# ** logs: ansible validation

;error_on_missing_handler=True

;invalid_task_attribute_failed=True
;collections_on_ansible_version_mismatch=warning

# ansible can warn when no inventory is found (defaults to localhost?)
;localhost_warning=True
;display_skipped_hosts=True

# ** logs: yaml validation

# for yaml <T> -> str conversions.
# >=2.12, def. to error
;string_conversion_action=error
;duplicate_dict_key=warn

# ** logs: jinja2 validation

# warn when bad jinja2 version
;jinja2_native_warning=True


# * auth
;su=False
;become_password_file= # --become-password-file
;private_key_file= #  --private-key: certificate/key file

# ** vault
;ask_vault_pass=False
;vault_encrypt_identity= # --encrypt-vault-id
;vault_identity=default
;vault_identity_list= # multiple --vault-id args (tried in order.)
;vault_id_match=False # TODO set to true?
;vault_password_file= # --vault-password-file or --vault-id

;ask_pass=False

# ** connection
;transport=ssh # or paramiko
;timeout=10
;use_persistent_connections=False

# --connection-password-file.
;connection_password_file=

# when blank, configured by the connection plugin
;remote_port=
;remote_user=

# * roles & collections
;collections_path={{ ANSIBLE_HOME ~ "/collections:/usr/share/ansible/collections" }}
;roles_path={{ ANSIBLE_HOME ~ "/roles:/usr/share/ansible/roles:/etc/ansible/roles" }}

# * modules & module_utils
;library={{ ANSIBLE_HOME ~ "/plugins/modules:/usr/share/ansible/plugins/modules" }}
;module_utils={{ ANSIBLE_HOME ~ "/plugins/module_utils:/usr/share/ansible/plugins/module_utils" }}
;module_ignore_exts={{(REJECT_EXTS + ('.yaml', '.yml', '.ini'))}}

# affects vars_files, include_vars, inventory and vars plugins among others.
;yaml_valid_extensions=.yml, .yaml, .json 

# * plugins

# prevents jinja templates from accessiong some-var-not-marked-safe
;allow_unsafe_lookups=False

# ** filters
;plugin_filters_cfg= # /etc/ansible/plugin_filters.yml

# ** group vars:
# merge order
;precedence=all_inventory, groups_inventory, all_plugins_inventory, all_plugins_play, groups_plugins_inventory, groups_plugins_play

# ** plugin paths
;become_plugins={{ ANSIBLE_HOME ~ "/plugins/become:/usr/share/ansible/plugins/become" }}
;cache_plugins={{ ANSIBLE_HOME ~ "/plugins/cache:/usr/share/ansible/plugins/cache" }}
;callback_plugins={{ ANSIBLE_HOME ~ "/plugins/callback:/usr/share/ansible/plugins/callback" }}
;cliconf_plugins={{ ANSIBLE_HOME ~ "/plugins/cliconf:/usr/share/ansible/plugins/cliconf" }}
;connection_plugins={{ ANSIBLE_HOME ~ "/plugins/connection:/usr/share/ansible/plugins/connection" }}
;filter_plugins={{ ANSIBLE_HOME ~ "/plugins/filter:/usr/share/ansible/plugins/filter" }}
;httpapi_plugins={{ ANSIBLE_HOME ~ "/plugins/httpapi:/usr/share/ansible/plugins/httpapi" }}
;inventory_plugins={{ ANSIBLE_HOME ~ "/plugins/inventory:/usr/share/ansible/plugins/inventory" }}
;lookup_plugins={{ ANSIBLE_HOME ~ "/plugins/lookup:/usr/share/ansible/plugins/lookup" }}
;netconf_plugins={{ ANSIBLE_HOME ~ "/plugins/netconf:/usr/share/ansible/plugins/netconf" }}
;strategy_plugins={{ ANSIBLE_HOME ~ "/plugins/strategy:/usr/share/ansible/plugins/strategy" }}
;terminal_plugins={{ ANSIBLE_HOME ~ "/plugins/terminal:/usr/share/ansible/plugins/terminal" }}
;test_plugins={{ ANSIBLE_HOME ~ "/plugins/test:/usr/share/ansible/plugins/test" }}
;vars_plugins={{ ANSIBLE_HOME ~ "/plugins/vars:/usr/share/ansible/plugins/vars" }}
;doc_fragment_plugins={{ ANSIBLE_HOME ~ "/plugins/doc_fragments:/usr/share/ansible/plugins/doc_fragments" }}

# * [defaults]
;action_warnings=True
;force_color=False
;home=~/.ansible
;nocolor=False
;any_errors_fatal=False
;callbacks_enabled=


# (boolean) Toggles debug output in Ansible. This is *very* verbose and can hinder multiprocessing.  Debug output can also include secret information despite no_log settings being enabled, which means debug mode should not be used in production.
;debug=False
;executable=/bin/sh

# (string) This option allows you to globally configure a custom path for 'local_facts' for the implied :ref:`ansible_collections.ansible.builtin.setup_module` task when using fact gathering.
# If not set, it will fallback to the default from the ``ansible.builtin.setup`` module: ``/etc/ansible/facts.d``.
# This does **not** affect  user defined tasks that use the ``ansible.builtin.setup`` module.
# The real action being created by the implicit task is currently    ``ansible.legacy.gather_facts`` module, which then calls the configured fact modules, by default this will be ``ansible.builtin.setup`` for POSIX systems but other platforms might have different defaults.
;fact_path=

# (boolean) This option controls if notified handlers run on a host even if a failure occurs on that host.
# When false, the handlers will not run if a failure has occurred on a host.
# This can also be set per play or on the command line. See Handlers and Failure for more details.
;force_handlers=False

;forks=5

# (string) This setting controls the default policy of fact gathering (facts discovered about remote systems).
# This option can be useful for those wishing to save fact gathering time. Both "smart" and "explicit" will use the cache plugin.
;gathering=implicit

# (list) Set the `gather_subset` option for the :ref:`ansible_collections.ansible.builtin.setup_module` task in the implicit fact gathering. See the module documentation for specifics.
# It does **not** apply to user defined ``ansible.builtin.setup`` tasks.
;gather_subset=

# (integer) Set the timeout in seconds for the implicit fact gathering, see the module documentation for specifics.
# It does **not** apply to user defined :ref:`ansible_collections.ansible.builtin.setup_module` tasks.
;gather_timeout=

# (string) This setting controls how duplicate definitions of dictionary variables (aka hash, map, associative array) are handled in Ansible.
# This does not affect variables whose values are scalars (integers, strings) or arrays.
# **WARNING**, changing this setting is not recommended as this is fragile and makes your content (plays, roles, collections) non portable, leading to continual confusion and misuse. Dont change this setting unless you think you have an absolute need for it.
# We recommend avoiding reusing variable names and relying on the "combine" filter and "vars" and "varnames" lookups to create merged versions of the individual variables. In our experience this is rarely really needed and a sign that too much complexity has been introduced into the data structures and plays.
# For some uses you can also look into custom vars_plugins to merge on input, even substituting the default "host_group_vars" that is in charge of parsing the "host_vars/" and "group_vars/" directories. Most users of this setting are only interested in inventory scope, but the setting itself affects all sources and makes debugging even harder.
# All playbooks and roles in the official examples repos assume the default for this setting.
# Changing the setting to "merge" applies across variable sources, but many sources will internally still overwrite the variables. For example "include_vars" will dedupe variables internally before updating Ansible, with 'last defined' overwriting previous definitions in same file.
# The Ansible project recommends you **avoid "merge" for new projects.**
# It is the intention of the Ansible developers to eventually deprecate and remove this setting, but it is being kept as some users do heavily rely on it. New projects should **avoid 'merge'**.
;hash_behaviour=replace

;internal_poll_interval=0.001

# (string) This is a developer-specific feature that allows enabling additional Jinja2 extensions.
# See the Jinja2 documentation for details. If you do not know what these do, you probably dont need to change this setting :)
;jinja2_extensions=[]

# (boolean) This option preserves variable types during template operations.
;jinja2_native=False

# (boolean) Enables/disables the cleaning up of the temporary files Ansible used to execute the tasks on the remote.
# If this option is enabled it will disable "ANSIBLE_PIPELINING".
;keep_remote_files=False

# (boolean) Controls whether callback plugins are loaded when running /usr/bin/ansible. This may be used to log activity from the command line, send notifications, and so on. Callback plugins are always loaded for "ansible-playbook".
;bin_ansible_callbacks=False

# (string) Sets the macro for the 'ansible_managed' variable available for :ref:`ansible_collections.ansible.builtin.template_module` and :ref:`ansible_collections.ansible.windows.win_template_module`.  This is only relevant for those two modules.
;ansible_managed=Ansible managed
;module_compression=ZIP_DEFLATED
;no_target_syslog=False

# (raw) What templating should return as a 'null' value. When not set it will let Jinja2 decide.
;null_representation=

# (integer) For asynchronous tasks in Ansible (covered in Asynchronous Actions and Polling), this is how often to check back on the status of those tasks when an explicit poll interval is not supplied. The default is a reasonably moderate 15 seconds which is a tradeoff between checking in frequently and providing a quick turnaround when something may have completed.
;poll_interval=15

# (boolean) Makes role variables inaccessible from other roles.
# This was introduced as a way to reset role variables to default values if a role is used more than once in a playbook.
;private_role_vars=False

;stdout_callback=default # Only one can write to stdout. See :ref:`callback_plugins`

# (boolean) When True, this causes ansible templating to fail steps that reference variable names that are likely typoed.
# Otherwise, any '{{ template_expression }}' that contains undefined variables will be rendered in a template or ansible action line exactly as written.
;error_on_undefined_vars=True

# (boolean) Normally "ansible-playbook" will print a header for each task that is run. These headers will contain the name: field from the task if you specified one. If you didn't then "ansible-playbook" uses the task's action to help you tell which task is presently running. Sometimes you run many of the same action and so you want more information about the task to differentiate it from others of the same action. If you set this variable to True in the config then "ansible-playbook" will also include the tasks arguments in the header.
# This setting defaults to False because there is a chance that you have sensitive values in your parameters and you do not want those to be printed.
# If you set this to True you should be sure that you have secured your environment's stdout (no one can shoulder surf your screen and you aren't saving stdout to an insecure file) or made sure that all of your playbooks explicitly added the "no_log: True" parameter to tasks which have sensitive values See How do I keep secret data in my playbook? for more information.
;display_args_to_stdout=False

;docsite_root_url=https://docs.ansible.com/ansible-core/

# (boolean) Whether or not to enable the task debugger, this previously was done as a strategy plugin.
# Now all strategy plugins can inherit this behavior. The debugger defaults to activating when
# a task is failed on unreachable. Use the debugger keyword for more flexibility.
;enable_task_debugger=False

# (list) Which modules to run during a plays fact gathering stage, using the default of 'smart' will try to figure it out based on connection type.
# If adding your own modules but you still want to use the default Ansible facts, you will want to include 'setup' or corresponding network module to the list (if you add 'smart', Ansible will also figure it out).
# This does not affect explicit calls to the 'setup' module, but does always affect the 'gather_facts' action (implicit or explicit).
;facts_modules=smart

;host_key_checking=True

# (boolean) Facts are available inside the `ansible_facts` variable, this setting also pushes them as their own vars in the main namespace.
# Unlike inside the `ansible_facts` dictionary, these will have an `ansible_` prefix.
;inject_facts_as_vars=True

# (string) Path to the Python interpreter to be used for module execution on remote targets, or an automatic discovery mode. Supported discovery modes are "auto" (the default), "auto_silent", "auto_legacy", and "auto_legacy_silent". All discovery modes employ a lookup table to use the included system Python (on distributions known to include one), falling back to a fixed ordered list of well-known Python interpreter locations if a platform-specific default is not available. The fallback behavior will issue a warning that the interpreter should be set explicitly (since interpreters installed later may change which one is used). This warning behavior can be disabled by setting "auto_silent" or "auto_legacy_silent". The value of "auto_legacy" provides all the same behavior, but for backwards-compatibility with older Ansible releases that always defaulted to "/usr/bin/python", will use that interpreter if present.
;interpreter_python=auto

;max_diff_size=104448
;network_group_modules=eos, nxos, ios, iosxr, junos, enos, ce, vyos, sros, dellos9, dellos10, dellos6, asa, aruba, aireos, bigip, ironware, onyx, netconf, exos, voss, slxos
;old_plugin_cache_clear=False

# (string) This sets which playbook dirs will be used as a root to process vars plugins, which includes finding host_vars/group_vars

# (string) Attempts to set RLIMIT_NOFILE soft limit to the specified value when executing Python modules (can speed up subprocess usage on Python 2.x. See https://bugs.python.org/issue11284). The value will be limited by the existing hard limit. Default value of 0 does not attempt to adjust existing system-defined limits.
;python_module_rlimit_nofile=0

# (str) This setting can be used to optimize vars_plugin usage depending on users inventory size and play selection.
;run_vars_plugins=demand

# (bool) This adds the custom stats set via the set_stats plugin to the default output
;show_custom_stats=False
# (boolean) This option defines whether the task debugger will be invoked on a failed task when ignore_errors=True is specified.
# True specifies that the debugger will honor ignore_errors, False will not honor ignore_errors.
;task_debugger_ignore_errors=True

# (string) Make ansible transform invalid characters in group names supplied by inventory sources.
;force_valid_group_names=never

# (bool) A toggle to disable validating a collections 'metadata' entry for a module_defaults action group. Metadata containing unexpected fields or value types will produce a warning when this is True.
;validate_action_group_metadata=True

# (list) Accept list for variable plugins that require it.
;vars_plugins_enabled=host_group_vars

# (integer) For asynchronous tasks in Ansible (covered in Asynchronous Actions and Polling), this is how long, in seconds, to wait for the task spawned by Ansible to connect back to the named pipe used on Windows systems. The default is 5 seconds. This can be too low on slower systems, or systems under heavy load.
# This is not the total time an async command can run for, but is a separate timeout to wait for an async command to start. The task will only start to be timed against its async_timeout once it has connected to the pipe, so the overall maximum duration the task can take will be extended by the amount specified here.
;win_async_startup_timeout=5

[privilege_escalation]

;agnostic_become_prompt=True

# (boolean) This setting controls if become is skipped when remote user and become user are the same. I.E root sudo to root.
# If executable, it will be run and the resulting stdout will be used as the password.
;become_allow_same_user=False
;become=False
;become_ask_pass=False
;become_exe=
;become_flags=
;become_method=sudo
;become_user=root # most systems will set this to root if not specified


[persistent_connection]
;ansible_connection_path=
;command_timeout=30
;connect_retry_timeout=15
;connect_timeout=30

# (path) Path to socket to be used by the connection persistence system.
;control_path_dir={{ ANSIBLE_HOME ~ "/pc" }} # TODO change

[connection]
# (boolean) This is a global option, each connection plugin can override either by having more specific options or not supporting pipelining at all.
# Pipelining, if supported by the connection plugin, reduces the number of network operations required to execute a module on the remote server, by executing many Ansible modules without actual file transfer.
# It can result in a very significant performance improvement when enabled.
# However this conflicts with privilege escalation (become). For example, when using 'sudo:' operations you must first disable 'requiretty' in /etc/sudoers on all managed hosts, which is why it is disabled by default.
# This setting will be disabled if "ANSIBLE_KEEP_REMOTE_FILES" is enabled.
;pipelining=False

[colors]

;changed=yellow
;console_prompt=white
;debug=dark gra
;deprecate=purple
;diff_add=gree
;diff_lines=cyan
;diff_remove=red
;error=red
;highlight=white
;ok=green
;skip=cyan
;unreachable=bright red
;verbose=blue
;warn=bright purple

[selinux]
# (boolean) This setting causes libvirt to connect to lxc containers by passing --noseclabel to virsh. This is necessary when running on systems which do not have SELinux.
;libvirt_lxc_noseclabel=False

# (list) Some filesystems do not support safe operations and/or return inconsistent errors, this setting makes Ansible 'tolerate' those in the list w/o causing fatal errors.
# Data corruption may occur and writes are not always verified when a filesystem is in the list.
;special_context_filesystems=fuse, nfs, vboxsf, ramfs, 9p, vfat


[diff]
;always=False # show change in stat. equivalent to "--diff".
;context=3

[galaxy]
# only used for ansible-galaxy {download,"collection install"}
;cache_dir={{ ANSIBLE_HOME ~ "/galaxy_cache" }}

# --collection-skeleton
;collection_skeleton=
;collection_skeleton_ignore=^.git$, ^.*/.git_keep$
;disable_gpg_verify=False

# (bool) Some steps in "ansible-galaxy" display a progress wheel which can cause issues on certain displays or when outputing the stdout to a file.
# This config option controls whether the display wheel is shown or not.
# The default is to show the display wheel if stdout has a tty.
display_progress=True

;gpg_keyring=
;ignore_certs=

# (list) A list of GPG status codes to ignore during GPG signature verification. See L(https://github.com/gpg/gnupg/blob/master/doc/DETAILS#general-status-codes) for status code descriptions.
# If fewer signatures successfully verify the collection than `GALAXY_REQUIRED_VALID_SIGNATURE_COUNT`, signature verification will fail even if all error codes are ignored.
;ignore_signature_status_codes=

# (str) The number of signatures that must be successful during GPG signature verification while installing or verifying collections.
# This should be a positive integer or all to indicate all signatures must successfully validate the collection.
# Prepend + to the value to fail if no valid signatures are found for the collection.
;required_valid_signature_count=1

# --role-skeleton 
;role_skeleton=
;role_skeleton_ignore=^.git$, ^.*/.git_keep$

# (string) URL to prepend when roles dont specify the full URI, assume they are referencing this server as the source.
;server=https://galaxy.ansible.com

# (list) A list of Galaxy servers to use when installing a collection.
# The value corresponds to the config ini header "[galaxy_server.{{item}}]" which defines the server details.
# See :ref:`galaxy_server_config` for more details on how to define a Galaxy server.
# The order of servers in this list is used to as the order in which a collection is resolved.
# Setting this config option will ignore the :ref:`galaxy_server` config option.
;server_list=
;token_path={{ ANSIBLE_HOME ~ "/galaxy_token" }}

[inventory]

any_unparsed_is_failed=True

# how to respond to mismatched host patterns
;host_pattern_mismatch=warning

#
# NOTE: removed deprecated cache.* options (moved to inventory)
#

# order matters
;enable_plugins=host_list, script, auto, yaml, ini, toml

# (bool) Controls if ansible-inventory will accurately reflect Ansibles view into inventory or its optimized for exporting.
;export=False

;ignore_extensions={{(REJECT_EXTS + ('.orig', '.ini', '.cfg', '.retry'))}}
;ignore_patterns=
;unparsed_is_failed=False
;inventory_unparsed_warning=True

[netconf_connection]
# (string) This variable is used to enable bastion/jump host with netconf connection. If set to True the bastion/jump host ssh settings should be present in ~/.ssh/config file, alternatively it can be set to custom ssh configuration file path to read the bastion/jump host settings.
;ssh_config=


[paramiko_connection]
# (boolean) TODO: write it
;host_key_auto_add=False

# (boolean) TODO: write it
;look_for_keys=True


[jinja2]
# (list) This list of filters avoids 'type conversion' when templating variables
# Useful when you want to avoid conversion into lists or dictionaries for JSON strings, for example.
;dont_type_filters=string, to_json, to_nice_json, to_yaml, to_nice_yaml, ppretty, json
