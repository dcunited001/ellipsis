* .emacs.hop

A minimal =custom.el=-driven emacs config for distro-hopping, now made
slightly more complicated since I'm sticking to Guix for Doom
Emacs and um also using Nix... woops.

This config should mostly mirror the settings found in .emacs.console,
but...

1) doesn't expect dependencies loaded from Guix
2) instead configures most settings using =custom.el=, sincluding the
   default packages to install.

** Notes

In any case, it gets me quality of life features like
=consult-ripgrep=, =tramp= and =magit-status= on new installations...

#+begin_quote
...or those where I don't yet feel like sorting out the Doom Emacs
installation. That itself doesn't need Nix or Guix per-se... It's just
easier when the underlying details have uniformity or at least
consistency. It also makes less sense when you're not using Emacs as a
server.

Also, I'm not crippled without vim bindings ... it's nice using the
default style emacs keybindings instead of =evil-mode=. Because then
you can pick up emacs anywhere.
#+end_quote

*** Magit

With regard to =magit=, it seems the keys =4 3 2 1= were chosen the
way they were... because they complement =n= and =p=. so =M-4 M-3 M-2
M-1= toggle all the items, and =4 3 2 1= toggle just the one you're
on. I've known this for awhile... /I've just never been beside someone
else using it/.

*** Organization

Just copy and paste for now. I may rely on load-path later idk, but
everything's bundled into my dotfiles... so either both linking and
path-finding for =load-path= gets messy.

** Problems

+ lispy needs to build from a fork to avoid issues with scheme, which
  isn't configured in this profile.

* Installation

** Arch

The =pacman= package will setup the =emacs.service= unit (and enable it
apparently). This is nice.

+ Similarly, there are =emacs{,client}.desktop= files already set up. These will
  assume the default =EMACSSOCKET=emacs= though.
  - It's a bit confusing to have
    multiple emacs logs popping out at you from the =nwg-desktop-menu= or
    whatever, so i'll probably disable these.
+ In case they're not, there are some in this directory that I adapted from
  =../.doom.d/doom.service=, etc.


* Misc notes from kratos

** Guix Profile

*** Misc notes on a system setup

this is overkill, but it needs to be set up correctly (esp with
both nix & guix). it's very confusing to debug (esp emacs eln if it
doesn't fail outright)

.guix-profile, on nix without setting up .profile or nix home

+ guix package emacs # used to install emacs
+ guix describe --format=channels >> ~/.emacs.d/.guix-channels.lock

later, worry about loading extra profiles into "~/.profile"...

+ GUIX_PROFILE=~/.guix-profile; source ... # etc
+ easier 2 modify `env` as close to project as possible
+ avoid that. only nix modifies the .profile (except?...)

emacs native comp

+ m/elpa packages need to run with .guix-channels.lock
+ bundle this into a ~/.emacs.d/.guix-profile for GC

can't load guix packages from my .dotfiles

+ guix in .config/guix/current
+ but GUILE_LOAD_PATH isn't set up (bundled in wrapper?)

EMACSLOADPATH is similarly being set:

+ compare `M-! shell-command env` vs `env`


** Custom.el

don't mess with custom.el.

#+begin_quote
just init to error after =custom.el= loads (ensure it overloads, otherwise it
may overwrite). run =M-x package-install-selected-packages= then reload.

(corrections to below)
#+end_quote

*** wrong

... nevermind, i was pretty sure you couldn't just call
=(customize-save-variable ...)= never really tried though, but it would help
to export some settings quickly.

#+begin_src emacs-lisp
(let ((sel-pkgs   ;;  package-selected-packages
   '(0x0 ace-window json-mode magit markdown-mode multiple-cursors
                 nix-mode toml-mode x509-mode yuck-mode)))
  ;; the let binding is unnecessary, just pass the value
  ;; .... the full let binding actually prevents it from q'setting
  (package--save-selected-packages sel-pkgs))
#+end_src

then =M-x package-upgrade-all= ... nope, d4mm1t
=package-install-selected-packages=

now the =custom.el= is set ... unless your session failed to load
=init.el=. then =custom.el= isn't loaded (?)

....... backtrack #456: it just appends custom custom

eval during init or it may delete the customizations.

=(setq custom-file "custom.el")=

*** misc code blocks

#+begin_src emacs-lisp
;; package-selected-packages
(sort '(nix-mode foob-mode boofster-mode) #'string<)
#+end_src

doesn't update selected-packages. may not update. may purge.

#+begin_src emacs-lisp
(mapcan (lambda (el) (package-install el)) '(x509-mode))
#+end_src
